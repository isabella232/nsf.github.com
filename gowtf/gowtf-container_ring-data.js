var gowtfData = {"index":"index.html","html":"<p>\u000aThe ring package implements operations on circular lists.\u000a</p>\u000a","name":"ring","filenames":["/home/nsf/go/src/pkg/container/ring/ring.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Ring!\">Ring</a></h2>\u000a<pre>type Ring struct {\u000a\u0009Value interface{} // for use by client; untouched by this library\u000a\u0009// contains unexported fields\u000a}</pre>\u000a<p>\u000aA Ring is an element of a circular list, or ring.\u000aRings do not have a beginning or end; a pointer to any ring element\u000aserves as reference to the entire ring. Empty rings are represented\u000aas nil Ring pointers. The zero value for a Ring is a one-element\u000aring with a nil Value.\u000a</p>\u000a\u000a","name":"Ring","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Ring\">func (*Ring)</a> <a href=\"?m:Ring.Iter!\">Iter</a></h2>\u000a<code>func (r *Ring) Iter() &lt;-chan interface{}</code>\u000a\u000a","name":"Iter"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Ring\">func (*Ring)</a> <a href=\"?m:Ring.Len!\">Len</a></h2>\u000a<code>func (r *Ring) Len() int</code>\u000a<p>\u000aLen computes the number of elements in ring r.\u000aIt executes in time proportional to the number of elements.\u000a</p>\u000a\u000a","name":"Len"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Ring\">func (*Ring)</a> <a href=\"?m:Ring.Link!\">Link</a></h2>\u000a<code>func (r *Ring) Link(s *Ring) *Ring</code>\u000a<p>\u000aLink connects ring r with with ring s such that r.Next()\u000abecomes s and returns the original value for r.Next().\u000ar must not be empty.\u000a</p>\u000a<p>\u000aIf r and s point to the same ring, linking\u000athem removes the elements between r and s from the ring.\u000aThe removed elements form a subring and the result is a\u000areference to that subring (if no elements were removed,\u000athe result is still the original value for r.Next(),\u000aand not nil).\u000a</p>\u000a<p>\u000aIf r and s point to different rings, linking\u000athem creates a single ring with the elements of s inserted\u000aafter r. The result points to the element following the\u000alast element of s after insertion.\u000a</p>\u000a\u000a","name":"Link"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Ring\">func (*Ring)</a> <a href=\"?m:Ring.Move!\">Move</a></h2>\u000a<code>func (r *Ring) Move(n int) *Ring</code>\u000a<p>\u000aMove moves n % r.Len() elements backward (n &lt; 0) or forward (n &gt;= 0)\u000ain the ring and returns that ring element. r must not be empty.\u000a</p>\u000a\u000a","name":"Move"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Ring\">func (*Ring)</a> <a href=\"?m:Ring.Next!\">Next</a></h2>\u000a<code>func (r *Ring) Next() *Ring</code>\u000a<p>\u000aNext returns the next ring element. r must not be empty.\u000a</p>\u000a\u000a","name":"Next"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Ring\">func (*Ring)</a> <a href=\"?m:Ring.Prev!\">Prev</a></h2>\u000a<code>func (r *Ring) Prev() *Ring</code>\u000a<p>\u000aPrev returns the previous ring element. r must not be empty.\u000a</p>\u000a\u000a","name":"Prev"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Ring\">func (*Ring)</a> <a href=\"?m:Ring.Unlink!\">Unlink</a></h2>\u000a<code>func (r *Ring) Unlink(n int) *Ring</code>\u000a<p>\u000aUnlink removes n % r.Len() elements from the ring r, starting\u000aat r.Next(). If n % r.Len() == 0, r remains unchanged.\u000aThe result is the removed subring. r must not be empty.\u000a</p>\u000a\u000a","name":"Unlink"}]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:New!\">New</a></h2>\u000a<code>func New(n int) *Ring</code>\u000a<p>\u000aNew creates a ring of n elements.\u000a</p>\u000a\u000a","name":"New"}],"consts":[],"vars":[]}