var gowtfData = {"index":"index.html","html":"<p>\u000aThe doc package extracts source code documentation from a Go AST.\u000a</p>\u000a","name":"doc","filenames":["/home/nsf/go/src/pkg/go/doc/comment.go","/home/nsf/go/src/pkg/go/doc/doc.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Filter!\">Filter</a></h2>\u000a<pre>type Filter func(string) bool</pre>\u000a\u000a","name":"Filter","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FuncDoc!\">FuncDoc</a></h2>\u000a<pre>type FuncDoc struct {\u000a\u0009Doc  string\u000a\u0009Recv ast.Expr // TODO(rsc): Would like string here\u000a\u0009Name string\u000a\u0009Decl *ast.FuncDecl\u000a}</pre>\u000a<p>\u000aFuncDoc is the documentation for a func declaration,\u000aeither a top-level function or a method function.\u000a</p>\u000a\u000a","name":"FuncDoc","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:PackageDoc!\">PackageDoc</a></h2>\u000a<pre>type PackageDoc struct {\u000a\u0009PackageName string\u000a\u0009ImportPath  string\u000a\u0009Filenames   []string\u000a\u0009Doc         string\u000a\u0009Consts      []*ValueDoc\u000a\u0009Types       []*TypeDoc\u000a\u0009Vars        []*ValueDoc\u000a\u0009Funcs       []*FuncDoc\u000a\u0009Bugs        []string\u000a}</pre>\u000a<p>\u000aPackageDoc is the documentation for an entire package.\u000a</p>\u000a\u000a","name":"PackageDoc","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:PackageDoc\">func (*PackageDoc)</a> <a href=\"?m:PackageDoc.Filter!\">Filter</a></h2>\u000a<code>func (p *PackageDoc) Filter(f Filter)</code>\u000a<p>\u000aFilter eliminates documentation for names that don&#39;t pass through the filter f.\u000aTODO: Recognize &#34;Type.Method&#34; as a name.\u000a</p>\u000a\u000a","name":"Filter"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:TypeDoc!\">TypeDoc</a></h2>\u000a<pre>type TypeDoc struct {\u000a\u0009Doc       string\u000a\u0009Type      *ast.TypeSpec\u000a\u0009Consts    []*ValueDoc\u000a\u0009Vars      []*ValueDoc\u000a\u0009Factories []*FuncDoc\u000a\u0009Methods   []*FuncDoc\u000a\u0009Decl      *ast.GenDecl\u000a\u0009order     int\u000a}</pre>\u000a<p>\u000aTypeDoc is the documentation for a declared type.\u000aConsts and Vars are sorted lists of constants and variables of (mostly) that type.\u000aFactories is a sorted list of factory functions that return that type.\u000aMethods is a sorted list of method functions on that type.\u000a</p>\u000a\u000a","name":"TypeDoc","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ValueDoc!\">ValueDoc</a></h2>\u000a<pre>type ValueDoc struct {\u000a\u0009Doc   string\u000a\u0009Decl  *ast.GenDecl\u000a\u0009order int\u000a}</pre>\u000a<p>\u000aValueDoc is the documentation for a group of declared\u000avalues, either vars or consts.\u000a</p>\u000a\u000a","name":"ValueDoc","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:CommentText!\">CommentText</a></h2>\u000a<code>func CommentText(comment *ast.CommentGroup) string</code>\u000a<p>\u000aCommentText returns the text of comment,\u000awith the comment markers - //, /*, and */ - removed.\u000a</p>\u000a\u000a","name":"CommentText"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewFileDoc!\">NewFileDoc</a></h2>\u000a<code>func NewFileDoc(file *ast.File) *PackageDoc</code>\u000a\u000a","name":"NewFileDoc"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewPackageDoc!\">NewPackageDoc</a></h2>\u000a<code>func NewPackageDoc(pkg *ast.Package, importpath string) *PackageDoc</code>\u000a\u000a","name":"NewPackageDoc"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ToHTML!\">ToHTML</a></h2>\u000a<code>func ToHTML(w io.Writer, s []byte, words map[string]string)</code>\u000a<p>\u000aConvert comment text to formatted HTML.\u000aThe comment was prepared by DocReader,\u000aso it is known not to have leading, trailing blank lines\u000anor to have trailing spaces at the end of lines.\u000aThe comment markers have already been removed.\u000a</p>\u000a<p>\u000aTurn each run of multiple \\n into &lt;/p&gt;&lt;p&gt;\u000aTurn each run of indented lines into a &lt;pre&gt; block without indent.\u000a</p>\u000a<p>\u000aURLs in the comment text are converted into links; if the URL also appears\u000ain the words map, the link is taken from the map (if the corresponding map\u000avalue is the empty string, the URL is not converted into a link).\u000a</p>\u000a<p>\u000aGo identifiers that appear in the words map are italicized; if the corresponding\u000amap value is not the empty string, it is considered a URL and the word is converted\u000ainto a link.\u000a</p>\u000a\u000a","name":"ToHTML"}],"consts":[],"vars":[]}