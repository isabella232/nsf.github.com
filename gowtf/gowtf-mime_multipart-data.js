var gowtfData = {"index":"index.html","html":"<p>\u000aPackage multipart implements MIME multipart parsing, as defined in RFC\u000a2046.\u000a</p>\u000a<p>\u000aThe implementation is sufficient for HTTP (RFC 2388) and the multipart\u000abodies generated by popular browsers.\u000a</p>\u000a","name":"multipart","filenames":["/home/nsf/go/src/pkg/mime/multipart/multipart.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Part!\">Part</a></h2>\u000a<pre>type Part struct {\u000a\u0009// The headers of the body, if any, with the keys canonicalized\u000a\u0009// in the same fashion that the Go http.Request headers are.\u000a\u0009// i.e. &#34;foo-bar&#34; changes case to &#34;Foo-Bar&#34;\u000a\u0009Header map[string]string\u000a\u000a\u0009buffer *bytes.Buffer\u000a\u0009mr     *multiReader\u000a}</pre>\u000a<p>\u000aA Part represents a single part in a multipart body.\u000a</p>\u000a\u000a","name":"Part","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Part\">func (*Part)</a> <a href=\"?m:Part.Close!\">Close</a></h2>\u000a<code>func (bp *Part) Close() os.Error</code>\u000a\u000a","name":"Close"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Part\">func (*Part)</a> <a href=\"?m:Part.FormName!\">FormName</a></h2>\u000a<code>func (p *Part) FormName() string</code>\u000a<p>\u000aFormName returns the name parameter if p has a Content-Disposition\u000aof type &#34;form-data&#34;.  Otherwise it returns the empty string.\u000a</p>\u000a\u000a","name":"FormName"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Part\">func (*Part)</a> <a href=\"?m:Part.Read!\">Read</a></h2>\u000a<code>func (bp *Part) Read(p []byte) (n int, err os.Error)</code>\u000a<p>\u000aRead reads the body of a part, after its headers and before the\u000anext part (if any) begins.\u000a</p>\u000a\u000a","name":"Read"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Reader!\">Reader</a></h2>\u000a<pre>type Reader interface {\u000a\u0009// NextPart returns the next part in the multipart, or (nil,\u000a\u0009// nil) on EOF.  An error is returned if the underlying reader\u000a\u0009// reports errors, or on truncated or otherwise malformed\u000a\u0009// input.\u000a\u0009NextPart() (*Part, os.Error)\u000a}</pre>\u000a<p>\u000aReader is an iterator over parts in a MIME multipart body.\u000aReader&#39;s underlying parser consumes its input as needed.  Seeking\u000aisn&#39;t supported.\u000a</p>\u000a\u000a","name":"Reader","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewReader!\">NewReader</a></h2>\u000a<code>func NewReader(reader io.Reader, boundary string) Reader</code>\u000a<p>\u000aNewReader creates a new multipart Reader reading from r using the\u000agiven MIME boundary.\u000a</p>\u000a\u000a","name":"NewReader"}],"consts":[],"vars":[]}