var gowtfData = {"html":"<p>\u000aPackage macho implements access to Mach-O object files, as defined by\u000a<a href=\"http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/MachORuntime/Reference/reference.html\">http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/MachORuntime/Reference/reference.html</a>.\u000a</p>\u000a","name":"macho","filenames":["/home/nsf/go/src/pkg/debug/macho/file.go","/home/nsf/go/src/pkg/debug/macho/macho.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Cpu!\">Cpu</a></h2>\u000a<pre>type Cpu uint32</pre>\u000a<p>\u000aA Cpu is a Mach-O cpu type.\u000a</p>\u000a\u000a","name":"Cpu","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Cpu\">func (Cpu)</a> <a href=\"?m:Cpu.GoString!\">GoString</a></h2>\u000a<code>func (i Cpu) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Cpu\">func (Cpu)</a> <a href=\"?m:Cpu.String!\">String</a></h2>\u000a<code>func (i Cpu) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:File!\">File</a></h2>\u000a<pre>type File struct {\u000a\u0009FileHeader\u000a\u0009ByteOrder binary.ByteOrder\u000a\u0009Loads     []Load\u000a\u0009Sections  []*Section\u000a\u000a\u0009closer io.Closer\u000a}</pre>\u000a<p>\u000aA File represents an open Mach-O file.\u000a</p>\u000a\u000a","name":"File","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Close!\">Close</a></h2>\u000a<code>func (f *File) Close() os.Error</code>\u000a<p>\u000aClose closes the File.\u000aIf the File was created using NewFile directly instead of Open,\u000aClose has no effect.\u000a</p>\u000a\u000a","name":"Close"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.DWARF!\">DWARF</a></h2>\u000a<code>func (f *File) DWARF() (*dwarf.Data, os.Error)</code>\u000a<p>\u000aDWARF returns the DWARF debug information for the Mach-O file.\u000a</p>\u000a\u000a","name":"DWARF"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Section!\">Section</a></h2>\u000a<code>func (f *File) Section(name string) *Section</code>\u000a<p>\u000aSection returns the first section with the given name, or nil if no such\u000asection exists.\u000a</p>\u000a\u000a","name":"Section"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Segment!\">Segment</a></h2>\u000a<code>func (f *File) Segment(name string) *Segment</code>\u000a<p>\u000aSegment returns the first Segment with the given name, or nil if no such segment exists.\u000a</p>\u000a\u000a","name":"Segment"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FileHeader!\">FileHeader</a></h2>\u000a<pre>type FileHeader struct {\u000a\u0009Magic  uint32\u000a\u0009Cpu    Cpu\u000a\u0009SubCpu uint32\u000a\u0009Type   Type\u000a\u0009Ncmd   uint32\u000a\u0009Cmdsz  uint32\u000a\u0009Flags  uint32\u000a}</pre>\u000a<p>\u000aA FileHeader represents a Mach-O file header.\u000a</p>\u000a\u000a","name":"FileHeader","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FormatError!\">FormatError</a></h2>\u000a<pre>type FormatError struct {\u000a\u0009off int64\u000a\u0009msg string\u000a\u0009val interface{}\u000a}</pre>\u000a\u000a","name":"FormatError","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:FormatError\">func (*FormatError)</a> <a href=\"?m:FormatError.String!\">String</a></h2>\u000a<code>func (e *FormatError) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Load!\">Load</a></h2>\u000a<pre>type Load interface {\u000a\u0009Raw() []byte\u000a}</pre>\u000a<p>\u000aA Load represents any Mach-O load command.\u000a</p>\u000a\u000a","name":"Load","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:LoadBytes!\">LoadBytes</a></h2>\u000a<pre>type LoadBytes []byte</pre>\u000a<p>\u000aA LoadBytes is the uninterpreted bytes of a Mach-O load command.\u000a</p>\u000a\u000a","name":"LoadBytes","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:LoadBytes\">func (LoadBytes)</a> <a href=\"?m:LoadBytes.Raw!\">Raw</a></h2>\u000a<code>func (b LoadBytes) Raw() []byte</code>\u000a\u000a","name":"Raw"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:LoadCmd!\">LoadCmd</a></h2>\u000a<pre>type LoadCmd uint32</pre>\u000a<p>\u000aA LoadCmd is a Mach-O load command.\u000a</p>\u000a\u000a","name":"LoadCmd","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:LoadCmd\">func (LoadCmd)</a> <a href=\"?m:LoadCmd.GoString!\">GoString</a></h2>\u000a<code>func (i LoadCmd) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:LoadCmd\">func (LoadCmd)</a> <a href=\"?m:LoadCmd.String!\">String</a></h2>\u000a<code>func (i LoadCmd) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Regs386!\">Regs386</a></h2>\u000a<pre>type Regs386 struct {\u000a\u0009AX    uint32\u000a\u0009BX    uint32\u000a\u0009CX    uint32\u000a\u0009DX    uint32\u000a\u0009DI    uint32\u000a\u0009SI    uint32\u000a\u0009BP    uint32\u000a\u0009SP    uint32\u000a\u0009SS    uint32\u000a\u0009FLAGS uint32\u000a\u0009IP    uint32\u000a\u0009CS    uint32\u000a\u0009DS    uint32\u000a\u0009ES    uint32\u000a\u0009FS    uint32\u000a\u0009GS    uint32\u000a}</pre>\u000a<p>\u000aRegs386 is the Mach-O 386 register structure.\u000a</p>\u000a\u000a","name":"Regs386","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:RegsAMD64!\">RegsAMD64</a></h2>\u000a<pre>type RegsAMD64 struct {\u000a\u0009AX    uint64\u000a\u0009BX    uint64\u000a\u0009CX    uint64\u000a\u0009DX    uint64\u000a\u0009DI    uint64\u000a\u0009SI    uint64\u000a\u0009BP    uint64\u000a\u0009SP    uint64\u000a\u0009R8    uint64\u000a\u0009R9    uint64\u000a\u0009R10   uint64\u000a\u0009R11   uint64\u000a\u0009R12   uint64\u000a\u0009R13   uint64\u000a\u0009R14   uint64\u000a\u0009R15   uint64\u000a\u0009IP    uint64\u000a\u0009FLAGS uint64\u000a\u0009CS    uint64\u000a\u0009FS    uint64\u000a\u0009GS    uint64\u000a}</pre>\u000a<p>\u000aRegsAMD64 is the Mach-O AMD64 register structure.\u000a</p>\u000a\u000a","name":"RegsAMD64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section!\">Section</a></h2>\u000a<pre>type Section struct {\u000a\u0009SectionHeader\u000a\u000a\u0009// Embed ReaderAt for ReadAt method.\u000a\u0009// Do not embed SectionReader directly\u000a\u0009// to avoid having Read and Seek.\u000a\u0009// If a client wants Read and Seek it must use\u000a\u0009// Open() to avoid fighting over the seek offset\u000a\u0009// with other clients.\u000a\u0009io.ReaderAt\u000a\u0009sr *io.SectionReader\u000a}</pre>\u000a\u000a","name":"Section","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Section\">func (*Section)</a> <a href=\"?m:Section.Data!\">Data</a></h2>\u000a<code>func (s *Section) Data() ([]byte, os.Error)</code>\u000a<p>\u000aData reads and returns the contents of the Mach-O section.\u000a</p>\u000a\u000a","name":"Data"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Section\">func (*Section)</a> <a href=\"?m:Section.Open!\">Open</a></h2>\u000a<code>func (s *Section) Open() io.ReadSeeker</code>\u000a<p>\u000aOpen returns a new ReadSeeker reading the Mach-O section.\u000a</p>\u000a\u000a","name":"Open"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section32!\">Section32</a></h2>\u000a<pre>type Section32 struct {\u000a\u0009Name     [16]byte\u000a\u0009Seg      [16]byte\u000a\u0009Addr     uint32\u000a\u0009Size     uint32\u000a\u0009Offset   uint32\u000a\u0009Align    uint32\u000a\u0009Reloff   uint32\u000a\u0009Nreloc   uint32\u000a\u0009Flags    uint32\u000a\u0009Reserve1 uint32\u000a\u0009Reserve2 uint32\u000a}</pre>\u000a<p>\u000aA Section32 is a 32-bit Mach-O section header.\u000a</p>\u000a\u000a","name":"Section32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section64!\">Section64</a></h2>\u000a<pre>type Section64 struct {\u000a\u0009Name     [16]byte\u000a\u0009Seg      [16]byte\u000a\u0009Addr     uint64\u000a\u0009Size     uint64\u000a\u0009Offset   uint32\u000a\u0009Align    uint32\u000a\u0009Reloff   uint32\u000a\u0009Nreloc   uint32\u000a\u0009Flags    uint32\u000a\u0009Reserve1 uint32\u000a\u0009Reserve2 uint32\u000a\u0009Reserve3 uint32\u000a}</pre>\u000a<p>\u000aA Section32 is a 64-bit Mach-O section header.\u000a</p>\u000a\u000a","name":"Section64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionHeader!\">SectionHeader</a></h2>\u000a<pre>type SectionHeader struct {\u000a\u0009Name   string\u000a\u0009Seg    string\u000a\u0009Addr   uint64\u000a\u0009Size   uint64\u000a\u0009Offset uint32\u000a\u0009Align  uint32\u000a\u0009Reloff uint32\u000a\u0009Nreloc uint32\u000a\u0009Flags  uint32\u000a}</pre>\u000a\u000a","name":"SectionHeader","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Segment!\">Segment</a></h2>\u000a<pre>type Segment struct {\u000a\u0009LoadBytes\u000a\u0009SegmentHeader\u000a\u000a\u0009// Embed ReaderAt for ReadAt method.\u000a\u0009// Do not embed SectionReader directly\u000a\u0009// to avoid having Read and Seek.\u000a\u0009// If a client wants Read and Seek it must use\u000a\u0009// Open() to avoid fighting over the seek offset\u000a\u0009// with other clients.\u000a\u0009io.ReaderAt\u000a\u0009sr *io.SectionReader\u000a}</pre>\u000a<p>\u000aA Segment represents a Mach-O 32-bit or 64-bit load segment command.\u000a</p>\u000a\u000a","name":"Segment","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Segment\">func (*Segment)</a> <a href=\"?m:Segment.Data!\">Data</a></h2>\u000a<code>func (s *Segment) Data() ([]byte, os.Error)</code>\u000a<p>\u000aData reads and returns the contents of the segment.\u000a</p>\u000a\u000a","name":"Data"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Segment\">func (*Segment)</a> <a href=\"?m:Segment.Open!\">Open</a></h2>\u000a<code>func (s *Segment) Open() io.ReadSeeker</code>\u000a<p>\u000aOpen returns a new ReadSeeker reading the segment.\u000a</p>\u000a\u000a","name":"Open"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Segment32!\">Segment32</a></h2>\u000a<pre>type Segment32 struct {\u000a\u0009Cmd     LoadCmd\u000a\u0009Len     uint32\u000a\u0009Name    [16]byte\u000a\u0009Addr    uint32\u000a\u0009Memsz   uint32\u000a\u0009Offset  uint32\u000a\u0009Filesz  uint32\u000a\u0009Maxprot uint32\u000a\u0009Prot    uint32\u000a\u0009Nsect   uint32\u000a\u0009Flag    uint32\u000a}</pre>\u000a<p>\u000aA Segment32 is a 32-bit Mach-O segment load command.\u000a</p>\u000a\u000a","name":"Segment32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Segment64!\">Segment64</a></h2>\u000a<pre>type Segment64 struct {\u000a\u0009Cmd     LoadCmd\u000a\u0009Len     uint32\u000a\u0009Name    [16]byte\u000a\u0009Addr    uint64\u000a\u0009Memsz   uint64\u000a\u0009Offset  uint64\u000a\u0009Filesz  uint64\u000a\u0009Maxprot uint32\u000a\u0009Prot    uint32\u000a\u0009Nsect   uint32\u000a\u0009Flag    uint32\u000a}</pre>\u000a<p>\u000aA Segment64 is a 64-bit Mach-O segment load command.\u000a</p>\u000a\u000a","name":"Segment64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SegmentHeader!\">SegmentHeader</a></h2>\u000a<pre>type SegmentHeader struct {\u000a\u0009Cmd     LoadCmd\u000a\u0009Len     uint32\u000a\u0009Name    string\u000a\u0009Addr    uint64\u000a\u0009Memsz   uint64\u000a\u0009Offset  uint64\u000a\u0009Filesz  uint64\u000a\u0009Maxprot uint32\u000a\u0009Prot    uint32\u000a\u0009Nsect   uint32\u000a\u0009Flag    uint32\u000a}</pre>\u000a<p>\u000aA SegmentHeader is the header for a Mach-O 32-bit or 64-bit load segment command.\u000a</p>\u000a\u000a","name":"SegmentHeader","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Thread!\">Thread</a></h2>\u000a<pre>type Thread struct {\u000a\u0009Cmd  LoadCmd\u000a\u0009Len  uint32\u000a\u0009Type uint32\u000a\u0009Data []uint32\u000a}</pre>\u000a<p>\u000aA Thread is a Mach-O thread state command.\u000a</p>\u000a\u000a","name":"Thread","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Type!\">Type</a></h2>\u000a<pre>type Type uint32</pre>\u000a<p>\u000aA Type is a Mach-O file type, either an object or an executable.\u000a</p>\u000a\u000a","name":"Type","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewFile!\">NewFile</a></h2>\u000a<code>func NewFile(r io.ReaderAt) (*File, os.Error)</code>\u000a<p>\u000aNewFile creates a new File for acecssing a Mach-O binary in an underlying reader.\u000aThe Mach-O binary is expected to start at position 0 in the ReaderAt.\u000a</p>\u000a\u000a","name":"NewFile"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Open!\">Open</a></h2>\u000a<code>func Open(name string) (*File, os.Error)</code>\u000a<p>\u000aOpen opens the named file using os.Open and prepares it for use as a Mach-O binary.\u000a</p>\u000a\u000a","name":"Open"}],"consts":[{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Magic32!\"><em>group</em></a></h2>\u000a<pre>const (\u000a\u0009Magic32 uint32 = 0xfeedface\u000a\u0009Magic64 uint32 = 0xfeedfacf\u000a)</pre>\u000a\u000a","names":["Magic32","Magic64"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Type!\">Type</a></h2>\u000a<pre>const (\u000a\u0009TypeObj  Type = 1\u000a\u0009TypeExec Type = 2\u000a)</pre>\u000a\u000a","names":["TypeObj","TypeExec"],"type":"Type"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Cpu!\">Cpu</a></h2>\u000a<pre>const (\u000a\u0009Cpu386   Cpu = 7\u000a\u0009CpuAmd64 Cpu = Cpu386 + 1&lt;&lt;24\u000a)</pre>\u000a\u000a","names":["Cpu386","CpuAmd64"],"type":"Cpu"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:LoadCmd!\">LoadCmd</a></h2>\u000a<pre>const (\u000a\u0009LoadCmdSegment    LoadCmd = 1\u000a\u0009LoadCmdSegment64  LoadCmd = 25\u000a\u0009LoadCmdThread     LoadCmd = 4\u000a\u0009LoadCmdUnixThread LoadCmd = 5 // thread+stack\u000a)</pre>\u000a\u000a","names":["LoadCmdSegment","LoadCmdSegment64","LoadCmdThread","LoadCmdUnixThread"],"type":"LoadCmd"}],"vars":[]}