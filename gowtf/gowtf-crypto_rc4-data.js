var gowtfData = {"index":"index.html","html":"<p>\u000aThis package implements RC4 encryption, as defined in Bruce Schneier&#39;s\u000aApplied Cryptography.\u000a</p>\u000a","name":"rc4","filenames":["/home/nsf/go/src/pkg/crypto/rc4/rc4.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Cipher!\">Cipher</a></h2>\u000a<pre>type Cipher struct {\u000a\u0009s    [256]byte\u000a\u0009i, j uint8\u000a}</pre>\u000a<p>\u000aA Cipher is an instance of RC4 using a particular key.\u000a</p>\u000a\u000a","name":"Cipher","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Cipher\">func (*Cipher)</a> <a href=\"?m:Cipher.Reset!\">Reset</a></h2>\u000a<code>func (c *Cipher) Reset()</code>\u000a<p>\u000aReset zeros the key data so that it will no longer appear in the\u000aprocess&#39;s memory.\u000a</p>\u000a\u000a","name":"Reset"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Cipher\">func (*Cipher)</a> <a href=\"?m:Cipher.XORKeyStream!\">XORKeyStream</a></h2>\u000a<code>func (c *Cipher) XORKeyStream(buf []byte)</code>\u000a<p>\u000aXORKeyStream will XOR each byte of the given buffer with a byte of the\u000agenerated keystream.\u000a</p>\u000a\u000a","name":"XORKeyStream"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:KeySizeError!\">KeySizeError</a></h2>\u000a<pre>type KeySizeError int</pre>\u000a\u000a","name":"KeySizeError","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:KeySizeError\">func (KeySizeError)</a> <a href=\"?m:KeySizeError.String!\">String</a></h2>\u000a<code>func (k KeySizeError) String() string</code>\u000a\u000a","name":"String"}]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCipher!\">NewCipher</a></h2>\u000a<code>func NewCipher(key []byte) (*Cipher, os.Error)</code>\u000a<p>\u000aNewCipher creates and returns a new Cipher.  The key argument should be the\u000aRC4 key, at least 1 byte and at most 256 bytes.\u000a</p>\u000a\u000a","name":"NewCipher"}],"consts":[],"vars":[]}