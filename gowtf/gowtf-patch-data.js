var gowtfData = {"html":"<p>\u000aPackage patch implements parsing and execution of the textual and\u000abinary patch descriptions used by version control tools such as\u000aCVS, Git, Mercurial, and Subversion.\u000a</p>\u000a","name":"patch","filenames":["/home/nsf/go/src/pkg/patch/textdiff.go","/home/nsf/go/src/pkg/patch/patch.go","/home/nsf/go/src/pkg/patch/git.go","/home/nsf/go/src/pkg/patch/apply.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Diff!\">Diff</a></h2>\u000a<pre>type Diff interface {\u000a\u0009// Apply applies the changes listed in the diff\u000a\u0009// to the string s, returning the new version of the string.\u000a\u0009// Note that the string s need not be a text string.\u000a\u0009Apply(old []byte) (new []byte, err os.Error)\u000a}</pre>\u000a<p>\u000aA Diff is any object that describes changes to transform\u000aan old byte stream to a new one.\u000a</p>\u000a\u000a","name":"Diff","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:File!\">File</a></h2>\u000a<pre>type File struct {\u000a\u0009Verb             Verb\u000a\u0009Src              string // source for Verb == Copy, Verb == Rename\u000a\u0009Dst              string\u000a\u0009OldMode, NewMode int // 0 indicates not used\u000a\u0009Diff                 // changes to data; == NoDiff if operation does not edit file\u000a}</pre>\u000a<p>\u000aA File represents a collection of changes to be made to a single file.\u000a</p>\u000a\u000a","name":"File","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:GitBinaryLiteral!\">GitBinaryLiteral</a></h2>\u000a<pre>type GitBinaryLiteral struct {\u000a\u0009OldSHA1 []byte // if non-empty, the SHA1 hash of the original\u000a\u0009New     []byte // the new contents\u000a}</pre>\u000a<p>\u000aGitBinaryLiteral represents a Git binary literal diff.\u000a</p>\u000a\u000a","name":"GitBinaryLiteral","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:GitBinaryLiteral\">func (*GitBinaryLiteral)</a> <a href=\"?m:GitBinaryLiteral.Apply!\">Apply</a></h2>\u000a<code>func (d *GitBinaryLiteral) Apply(old []byte) ([]byte, os.Error)</code>\u000a<p>\u000aApply implements the Diff interface&#39;s Apply method.\u000a</p>\u000a\u000a","name":"Apply"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Op!\">Op</a></h2>\u000a<pre>type Op struct {\u000a\u0009Verb Verb   // action\u000a\u0009Src  string // source file\u000a\u0009Dst  string // destination file\u000a\u0009Mode int    // mode for destination (if non-zero)\u000a\u0009Data []byte // data for destination (if non-nil)\u000a}</pre>\u000a<p>\u000aAn Op is a single operation to execute to apply a patch.\u000a</p>\u000a\u000a","name":"Op","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Set!\">Set</a></h2>\u000a<pre>type Set struct {\u000a\u0009Header string // free-form text\u000a\u0009File   []*File\u000a}</pre>\u000a<p>\u000aA Set represents a set of patches to be applied as a single atomic unit.\u000aPatch sets are often preceded by a descriptive header.\u000a</p>\u000a\u000a","name":"Set","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Set\">func (*Set)</a> <a href=\"?m:Set.Apply!\">Apply</a></h2>\u000a<code>func (set *Set) Apply(readFile func(string) ([]byte, os.Error)) ([]Op, os.Error)</code>\u000a<p>\u000aApply applies the patch set to the files named in the patch set,\u000aconstructing an in-memory copy of the new file state.\u000aIt is the client&#39;s job to write the changes to the file system\u000aif desired.\u000a</p>\u000a<p>\u000aThe function readFile should return the contents of the named file.\u000aTypically this function will be io.ReadFile.\u000a</p>\u000a\u000a","name":"Apply"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SyntaxError!\">SyntaxError</a></h2>\u000a<pre>type SyntaxError string</pre>\u000a<p>\u000aA SyntaxError represents a syntax error encountered while parsing a patch.\u000a</p>\u000a\u000a","name":"SyntaxError","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:SyntaxError\">func (SyntaxError)</a> <a href=\"?m:SyntaxError.String!\">String</a></h2>\u000a<code>func (e SyntaxError) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:TextChunk!\">TextChunk</a></h2>\u000a<pre>type TextChunk struct {\u000a\u0009Line int\u000a\u0009Old  []byte\u000a\u0009New  []byte\u000a}</pre>\u000a<p>\u000aA TextChunk specifies an edit to a section of a file:\u000athe text beginning at Line, which should be exactly Old,\u000ais to be replaced with New.\u000a</p>\u000a\u000a","name":"TextChunk","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:TextDiff!\">TextDiff</a></h2>\u000a<pre>type TextDiff []TextChunk</pre>\u000a\u000a","name":"TextDiff","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:TextDiff\">func (TextDiff)</a> <a href=\"?m:TextDiff.Apply!\">Apply</a></h2>\u000a<code>func (d TextDiff) Apply(data []byte) ([]byte, os.Error)</code>\u000a<p>\u000aApply applies the changes listed in the diff\u000ato the data, returning the new version.\u000a</p>\u000a\u000a","name":"Apply"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Verb!\">Verb</a></h2>\u000a<pre>type Verb string</pre>\u000a<p>\u000aA Verb is an action performed on a file.\u000a</p>\u000a\u000a","name":"Verb","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Parse!\">Parse</a></h2>\u000a<code>func Parse(text []byte) (*Set, os.Error)</code>\u000a<p>\u000aParse patches the patch text to create a patch Set.\u000aThe patch text typically comprises a textual header and a sequence\u000aof file patches, as would be generated by CVS, Subversion,\u000aMercurial, or Git.\u000a</p>\u000a\u000a","name":"Parse"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ParseGitBinary!\">ParseGitBinary</a></h2>\u000a<code>func ParseGitBinary(raw []byte) (Diff, os.Error)</code>\u000a<p>\u000aParseGitBinary parses raw as a Git binary patch.\u000a</p>\u000a\u000a","name":"ParseGitBinary"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ParseTextDiff!\">ParseTextDiff</a></h2>\u000a<code>func ParseTextDiff(raw []byte) (TextDiff, os.Error)</code>\u000a\u000a","name":"ParseTextDiff"}],"consts":[{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Verb!\">Verb</a></h2>\u000a<pre>const (\u000a\u0009Add    Verb = &#34;add&#34;\u000a\u0009Copy   Verb = &#34;copy&#34;\u000a\u0009Delete Verb = &#34;delete&#34;\u000a\u0009Edit   Verb = &#34;edit&#34;\u000a\u0009Rename Verb = &#34;rename&#34;\u000a)</pre>\u000a\u000a","names":["Add","Copy","Delete","Edit","Rename"],"type":"Verb"}],"vars":[{"html":"\u000a<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:ErrPatchFailure!\">ErrPatchFailure</a></h2>\u000a<pre>var ErrPatchFailure = os.NewError(&#34;patch did not apply cleanly&#34;)</pre>\u000a\u000a","names":["ErrPatchFailure"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:NoDiff!\">NoDiff</a></h2>\u000a<pre>var NoDiff Diff = noDiffType(0)</pre>\u000a<p>\u000aNoDiff is a no-op Diff implementation: it passes the\u000aold data through unchanged.\u000a</p>\u000a\u000a","names":["NoDiff"],"type":""}]}