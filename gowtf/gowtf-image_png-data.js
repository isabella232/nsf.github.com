var gowtfData = {"index":"index.html","html":"<p>\u000aThe png package implements a PNG image decoder and encoder.\u000a</p>\u000a<p>\u000aThe PNG specification is at <a href=\"http://www.libpng.org/pub/png/spec/1.2/PNG-Contents.html\">http://www.libpng.org/pub/png/spec/1.2/PNG-Contents.html</a>\u000a</p>\u000a","name":"png","filenames":["/home/nsf/go/src/pkg/image/png/reader.go","/home/nsf/go/src/pkg/image/png/writer.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FormatError!\">FormatError</a></h2>\u000a<pre>type FormatError string</pre>\u000a<p>\u000aA FormatError reports that the input is not a valid PNG.\u000a</p>\u000a\u000a","name":"FormatError","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:FormatError\">func (FormatError)</a> <a href=\"?m:FormatError.String!\">String</a></h2>\u000a<code>func (e FormatError) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:IDATDecodingError!\">IDATDecodingError</a></h2>\u000a<pre>type IDATDecodingError struct {\u000a\u0009Err os.Error\u000a}</pre>\u000a<p>\u000aAn IDATDecodingError wraps an inner error (such as a ZLIB decoding error) encountered while processing an IDAT chunk.\u000a</p>\u000a\u000a","name":"IDATDecodingError","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:IDATDecodingError\">func (IDATDecodingError)</a> <a href=\"?m:IDATDecodingError.String!\">String</a></h2>\u000a<code>func (e IDATDecodingError) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:UnsupportedError!\">UnsupportedError</a></h2>\u000a<pre>type UnsupportedError string</pre>\u000a<p>\u000aAn UnsupportedError reports that the input uses a valid but unimplemented PNG feature.\u000a</p>\u000a\u000a","name":"UnsupportedError","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:UnsupportedError\">func (UnsupportedError)</a> <a href=\"?m:UnsupportedError.String!\">String</a></h2>\u000a<code>func (e UnsupportedError) String() string</code>\u000a\u000a","name":"String"}]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Decode!\">Decode</a></h2>\u000a<code>func Decode(r io.Reader) (image.Image, os.Error)</code>\u000a<p>\u000aDecode reads a PNG image from r and returns it as an image.Image.\u000aThe type of Image returned depends on the PNG contents.\u000a</p>\u000a\u000a","name":"Decode"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:DecodeConfig!\">DecodeConfig</a></h2>\u000a<code>func DecodeConfig(r io.Reader) (image.Config, os.Error)</code>\u000a<p>\u000aDecodeConfig returns the color model and dimensions of a PNG image without\u000adecoding the entire image.\u000a</p>\u000a\u000a","name":"DecodeConfig"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Encode!\">Encode</a></h2>\u000a<code>func Encode(w io.Writer, m image.Image) os.Error</code>\u000a<p>\u000aEncode writes the Image m to w in PNG format. Any Image may be encoded, but\u000aimages that are not image.NRGBA might be encoded lossily.\u000a</p>\u000a\u000a","name":"Encode"}],"consts":[],"vars":[]}