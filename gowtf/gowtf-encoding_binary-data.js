var gowtfData = {"html":"<p>\u000aThis package implements translation between\u000aunsigned integer values and byte sequences.\u000a</p>\u000a","name":"binary","filenames":["/home/nsf/go/src/pkg/encoding/binary/binary.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ByteOrder!\">ByteOrder</a></h2>\u000a<pre>type ByteOrder interface {\u000a\u0009Uint16(b []byte) uint16\u000a\u0009Uint32(b []byte) uint32\u000a\u0009Uint64(b []byte) uint64\u000a\u0009PutUint16([]byte, uint16)\u000a\u0009PutUint32([]byte, uint32)\u000a\u0009PutUint64([]byte, uint64)\u000a\u0009String() string\u000a}</pre>\u000a<p>\u000aA ByteOrder specifies how to convert byte sequences into\u000a16-, 32-, or 64-bit unsigned integers.\u000a</p>\u000a\u000a","name":"ByteOrder","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Read!\">Read</a></h2>\u000a<code>func Read(r io.Reader, order ByteOrder, data interface{}) os.Error</code>\u000a<p>\u000aRead reads structured binary data from r into data.\u000aData must be a pointer to a fixed-size value or a slice\u000aof fixed-size values.\u000aA fixed-size value is either a fixed-size arithmetic\u000atype (int8, uint8, int16, float32, complex64, ...)\u000aor an array or struct containing only fixed-size values.\u000aBytes read from r are decoded using the specified byte order\u000aand written to successive fields of the data.\u000a</p>\u000a\u000a","name":"Read"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:TotalSize!\">TotalSize</a></h2>\u000a<code>func TotalSize(v reflect.Value) int</code>\u000a\u000a","name":"TotalSize"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Write!\">Write</a></h2>\u000a<code>func Write(w io.Writer, order ByteOrder, data interface{}) os.Error</code>\u000a<p>\u000aWrite writes the binary representation of data into w.\u000aData must be a fixed-size value or a pointer to\u000aa fixed-size value.\u000aA fixed-size value is either a fixed-size arithmetic\u000atype (int8, uint8, int16, float32, complex64, ...)\u000aor an array or struct containing only fixed-size values.\u000aBytes written to w are encoded using the specified byte order\u000aand read from successive fields of the data.\u000a</p>\u000a\u000a","name":"Write"}],"consts":[],"vars":[{"html":"\u000a<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:LittleEndian!\">LittleEndian</a></h2>\u000a<pre>var LittleEndian littleEndian</pre>\u000a<p>\u000aLittleEndian is the little-endian implementation of ByteOrder.\u000a</p>\u000a\u000a","names":["LittleEndian"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:BigEndian!\">BigEndian</a></h2>\u000a<pre>var BigEndian bigEndian</pre>\u000a<p>\u000aBigEndian is the big-endian implementation of ByteOrder.\u000a</p>\u000a\u000a","names":["BigEndian"],"type":""}]}