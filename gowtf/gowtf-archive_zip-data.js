var gowtfData = {"index":"index.html","html":"<p>\u000aThe zip package provides support for reading ZIP archives.\u000a</p>\u000a<p>\u000aSee: <a href=\"http://www.pkware.com/documents/casestudies/APPNOTE.TXT\">http://www.pkware.com/documents/casestudies/APPNOTE.TXT</a>\u000a</p>\u000a<p>\u000aThis package does not support ZIP64 or disk spanning.\u000a</p>\u000a","name":"zip","filenames":["/home/nsf/go/src/pkg/archive/zip/struct.go","/home/nsf/go/src/pkg/archive/zip/reader.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:File!\">File</a></h2>\u000a<pre>type File struct {\u000a\u0009FileHeader\u000a\u0009zipr         io.ReaderAt\u000a\u0009zipsize      int64\u000a\u0009headerOffset uint32\u000a\u0009bodyOffset   int64\u000a}</pre>\u000a\u000a","name":"File","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Open!\">Open</a></h2>\u000a<code>func (f *File) Open() (rc io.ReadCloser, err os.Error)</code>\u000a<p>\u000aOpen returns a ReadCloser that provides access to the File&#39;s contents.\u000a</p>\u000a\u000a","name":"Open"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FileHeader!\">FileHeader</a></h2>\u000a<pre>type FileHeader struct {\u000a\u0009Name             string\u000a\u0009CreatorVersion   uint16\u000a\u0009ReaderVersion    uint16\u000a\u0009Flags            uint16\u000a\u0009Method           uint16\u000a\u0009ModifiedTime     uint16\u000a\u0009ModifiedDate     uint16\u000a\u0009CRC32            uint32\u000a\u0009CompressedSize   uint32\u000a\u0009UncompressedSize uint32\u000a\u0009Extra            []byte\u000a\u0009Comment          string\u000a}</pre>\u000a\u000a","name":"FileHeader","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Reader!\">Reader</a></h2>\u000a<pre>type Reader struct {\u000a\u0009r       io.ReaderAt\u000a\u0009File    []*File\u000a\u0009Comment string\u000a}</pre>\u000a\u000a","name":"Reader","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewReader!\">NewReader</a></h2>\u000a<code>func NewReader(r io.ReaderAt, size int64) (*Reader, os.Error)</code>\u000a<p>\u000aNewReader returns a new Reader reading from r, which is assumed to\u000ahave the given size in bytes.\u000a</p>\u000a\u000a","name":"NewReader"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:OpenReader!\">OpenReader</a></h2>\u000a<code>func OpenReader(name string) (*Reader, os.Error)</code>\u000a<p>\u000aOpenReader will open the Zip file specified by name and return a Reader.\u000a</p>\u000a\u000a","name":"OpenReader"}],"consts":[],"vars":[{"html":"\u000a<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:FormatError!\"><em>group</em></a></h2>\u000a<pre>var (\u000a\u0009FormatError       = os.NewError(&#34;not a valid zip file&#34;)\u000a\u0009UnsupportedMethod = os.NewError(&#34;unsupported compression algorithm&#34;)\u000a\u0009ChecksumError     = os.NewError(&#34;checksum error&#34;)\u000a)</pre>\u000a\u000a","names":["FormatError","UnsupportedMethod","ChecksumError"],"type":""}]}