var gowtfData = {"index":"index.html","html":"<p>\u000aPackage elf implements access to ELF object files.\u000a</p>\u000a","name":"elf","filenames":["/home/nsf/go/src/pkg/debug/elf/elf.go","/home/nsf/go/src/pkg/debug/elf/file.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Class!\">Class</a></h2>\u000a<pre>type Class byte</pre>\u000a<p>\u000aClass is found in Header.Ident[EI_CLASS] and Header.Class.\u000a</p>\u000a\u000a","name":"Class","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Class\">func (Class)</a> <a href=\"?m:Class.GoString!\">GoString</a></h2>\u000a<code>func (i Class) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Class\">func (Class)</a> <a href=\"?m:Class.String!\">String</a></h2>\u000a<code>func (i Class) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Data!\">Data</a></h2>\u000a<pre>type Data byte</pre>\u000a<p>\u000aData is found in Header.Ident[EI_DATA] and Header.Data.\u000a</p>\u000a\u000a","name":"Data","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Data\">func (Data)</a> <a href=\"?m:Data.GoString!\">GoString</a></h2>\u000a<code>func (i Data) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Data\">func (Data)</a> <a href=\"?m:Data.String!\">String</a></h2>\u000a<code>func (i Data) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Dyn32!\">Dyn32</a></h2>\u000a<pre>type Dyn32 struct {\u000a\u0009Tag int32  /* Entry type. */\u000a\u0009Val uint32 /* Integer/Address value. */\u000a}</pre>\u000a<p>\u000aELF32 Dynamic structure.  The &#34;.dynamic&#34; section contains an array of them.\u000a</p>\u000a\u000a","name":"Dyn32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Dyn64!\">Dyn64</a></h2>\u000a<pre>type Dyn64 struct {\u000a\u0009Tag int64  /* Entry type. */\u000a\u0009Val uint64 /* Integer/address value */\u000a}</pre>\u000a<p>\u000aELF64 Dynamic structure.  The &#34;.dynamic&#34; section contains an array of them.\u000a</p>\u000a\u000a","name":"Dyn64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:DynFlag!\">DynFlag</a></h2>\u000a<pre>type DynFlag int</pre>\u000a<p>\u000aDT_FLAGS values.\u000a</p>\u000a\u000a","name":"DynFlag","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:DynFlag\">func (DynFlag)</a> <a href=\"?m:DynFlag.GoString!\">GoString</a></h2>\u000a<code>func (i DynFlag) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:DynFlag\">func (DynFlag)</a> <a href=\"?m:DynFlag.String!\">String</a></h2>\u000a<code>func (i DynFlag) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:DynTag!\">DynTag</a></h2>\u000a<pre>type DynTag int</pre>\u000a<p>\u000aDyn.Tag\u000a</p>\u000a\u000a","name":"DynTag","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:DynTag\">func (DynTag)</a> <a href=\"?m:DynTag.GoString!\">GoString</a></h2>\u000a<code>func (i DynTag) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:DynTag\">func (DynTag)</a> <a href=\"?m:DynTag.String!\">String</a></h2>\u000a<code>func (i DynTag) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:File!\">File</a></h2>\u000a<pre>type File struct {\u000a\u0009FileHeader\u000a\u0009Sections []*Section\u000a\u0009Progs    []*Prog\u000a\u0009closer   io.Closer\u000a}</pre>\u000a<p>\u000aA File represents an open ELF file.\u000a</p>\u000a\u000a","name":"File","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Close!\">Close</a></h2>\u000a<code>func (f *File) Close() os.Error</code>\u000a<p>\u000aClose closes the File.\u000aIf the File was created using NewFile directly instead of Open,\u000aClose has no effect.\u000a</p>\u000a\u000a","name":"Close"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.DWARF!\">DWARF</a></h2>\u000a<code>func (f *File) DWARF() (*dwarf.Data, os.Error)</code>\u000a\u000a","name":"DWARF"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Section!\">Section</a></h2>\u000a<code>func (f *File) Section(name string) *Section</code>\u000a<p>\u000aSection returns a section with the given name, or nil if no such\u000asection exists.\u000a</p>\u000a\u000a","name":"Section"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FileHeader!\">FileHeader</a></h2>\u000a<pre>type FileHeader struct {\u000a\u0009Class      Class\u000a\u0009Data       Data\u000a\u0009Version    Version\u000a\u0009OSABI      OSABI\u000a\u0009ABIVersion uint8\u000a\u0009ByteOrder  binary.ByteOrder\u000a\u0009Type       Type\u000a\u0009Machine    Machine\u000a}</pre>\u000a<p>\u000aA FileHeader represents an ELF file header.\u000a</p>\u000a\u000a","name":"FileHeader","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FormatError!\">FormatError</a></h2>\u000a<pre>type FormatError struct {\u000a\u0009off int64\u000a\u0009msg string\u000a\u0009val interface{}\u000a}</pre>\u000a\u000a","name":"FormatError","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:FormatError\">func (*FormatError)</a> <a href=\"?m:FormatError.String!\">String</a></h2>\u000a<code>func (e *FormatError) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Header32!\">Header32</a></h2>\u000a<pre>type Header32 struct {\u000a\u0009Ident     [EI_NIDENT]byte /* File identification. */\u000a\u0009Type      uint16          /* File type. */\u000a\u0009Machine   uint16          /* Machine architecture. */\u000a\u0009Version   uint32          /* ELF format version. */\u000a\u0009Entry     uint32          /* Entry point. */\u000a\u0009Phoff     uint32          /* Program header file offset. */\u000a\u0009Shoff     uint32          /* Section header file offset. */\u000a\u0009Flags     uint32          /* Architecture-specific flags. */\u000a\u0009Ehsize    uint16          /* Size of ELF header in bytes. */\u000a\u0009Phentsize uint16          /* Size of program header entry. */\u000a\u0009Phnum     uint16          /* Number of program header entries. */\u000a\u0009Shentsize uint16          /* Size of section header entry. */\u000a\u0009Shnum     uint16          /* Number of section header entries. */\u000a\u0009Shstrndx  uint16          /* Section name strings section. */\u000a}</pre>\u000a<p>\u000aELF32 File header.\u000a</p>\u000a\u000a","name":"Header32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Header64!\">Header64</a></h2>\u000a<pre>type Header64 struct {\u000a\u0009Ident     [EI_NIDENT]byte /* File identification. */\u000a\u0009Type      uint16          /* File type. */\u000a\u0009Machine   uint16          /* Machine architecture. */\u000a\u0009Version   uint32          /* ELF format version. */\u000a\u0009Entry     uint64          /* Entry point. */\u000a\u0009Phoff     uint64          /* Program header file offset. */\u000a\u0009Shoff     uint64          /* Section header file offset. */\u000a\u0009Flags     uint32          /* Architecture-specific flags. */\u000a\u0009Ehsize    uint16          /* Size of ELF header in bytes. */\u000a\u0009Phentsize uint16          /* Size of program header entry. */\u000a\u0009Phnum     uint16          /* Number of program header entries. */\u000a\u0009Shentsize uint16          /* Size of section header entry. */\u000a\u0009Shnum     uint16          /* Number of section header entries. */\u000a\u0009Shstrndx  uint16          /* Section name strings section. */\u000a}</pre>\u000a<p>\u000aELF64 file header.\u000a</p>\u000a\u000a","name":"Header64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Machine!\">Machine</a></h2>\u000a<pre>type Machine uint16</pre>\u000a<p>\u000aMachine is found in Header.Machine.\u000a</p>\u000a\u000a","name":"Machine","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Machine\">func (Machine)</a> <a href=\"?m:Machine.GoString!\">GoString</a></h2>\u000a<code>func (i Machine) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Machine\">func (Machine)</a> <a href=\"?m:Machine.String!\">String</a></h2>\u000a<code>func (i Machine) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:NType!\">NType</a></h2>\u000a<pre>type NType int</pre>\u000a<p>\u000aNType values; used in core files.\u000a</p>\u000a\u000a","name":"NType","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:NType\">func (NType)</a> <a href=\"?m:NType.GoString!\">GoString</a></h2>\u000a<code>func (i NType) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:NType\">func (NType)</a> <a href=\"?m:NType.String!\">String</a></h2>\u000a<code>func (i NType) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:OSABI!\">OSABI</a></h2>\u000a<pre>type OSABI byte</pre>\u000a<p>\u000aOSABI is found in Header.Ident[EI_OSABI] and Header.OSABI.\u000a</p>\u000a\u000a","name":"OSABI","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:OSABI\">func (OSABI)</a> <a href=\"?m:OSABI.GoString!\">GoString</a></h2>\u000a<code>func (i OSABI) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:OSABI\">func (OSABI)</a> <a href=\"?m:OSABI.String!\">String</a></h2>\u000a<code>func (i OSABI) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Prog!\">Prog</a></h2>\u000a<pre>type Prog struct {\u000a\u0009ProgHeader\u000a\u000a\u0009// Embed ReaderAt for ReadAt method.\u000a\u0009// Do not embed SectionReader directly\u000a\u0009// to avoid having Read and Seek.\u000a\u0009// If a client wants Read and Seek it must use\u000a\u0009// Open() to avoid fighting over the seek offset\u000a\u0009// with other clients.\u000a\u0009io.ReaderAt\u000a\u0009sr *io.SectionReader\u000a}</pre>\u000a<p>\u000aA Prog represents a single ELF program header in an ELF binary.\u000a</p>\u000a\u000a","name":"Prog","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Prog\">func (*Prog)</a> <a href=\"?m:Prog.Open!\">Open</a></h2>\u000a<code>func (p *Prog) Open() io.ReadSeeker</code>\u000a<p>\u000aOpen returns a new ReadSeeker reading the ELF program body.\u000a</p>\u000a\u000a","name":"Open"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Prog32!\">Prog32</a></h2>\u000a<pre>type Prog32 struct {\u000a\u0009Type   uint32 /* Entry type. */\u000a\u0009Off    uint32 /* File offset of contents. */\u000a\u0009Vaddr  uint32 /* Virtual address in memory image. */\u000a\u0009Paddr  uint32 /* Physical address (not used). */\u000a\u0009Filesz uint32 /* Size of contents in file. */\u000a\u0009Memsz  uint32 /* Size of contents in memory. */\u000a\u0009Flags  uint32 /* Access permission flags. */\u000a\u0009Align  uint32 /* Alignment in memory and file. */\u000a}</pre>\u000a<p>\u000aELF32 Program header.\u000a</p>\u000a\u000a","name":"Prog32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Prog64!\">Prog64</a></h2>\u000a<pre>type Prog64 struct {\u000a\u0009Type   uint32 /* Entry type. */\u000a\u0009Flags  uint32 /* Access permission flags. */\u000a\u0009Off    uint64 /* File offset of contents. */\u000a\u0009Vaddr  uint64 /* Virtual address in memory image. */\u000a\u0009Paddr  uint64 /* Physical address (not used). */\u000a\u0009Filesz uint64 /* Size of contents in file. */\u000a\u0009Memsz  uint64 /* Size of contents in memory. */\u000a\u0009Align  uint64 /* Alignment in memory and file. */\u000a}</pre>\u000a<p>\u000aELF64 Program header.\u000a</p>\u000a\u000a","name":"Prog64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ProgFlag!\">ProgFlag</a></h2>\u000a<pre>type ProgFlag uint32</pre>\u000a<p>\u000aProg.Flag\u000a</p>\u000a\u000a","name":"ProgFlag","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:ProgFlag\">func (ProgFlag)</a> <a href=\"?m:ProgFlag.GoString!\">GoString</a></h2>\u000a<code>func (i ProgFlag) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:ProgFlag\">func (ProgFlag)</a> <a href=\"?m:ProgFlag.String!\">String</a></h2>\u000a<code>func (i ProgFlag) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ProgHeader!\">ProgHeader</a></h2>\u000a<pre>type ProgHeader struct {\u000a\u0009Type   ProgType\u000a\u0009Flags  ProgFlag\u000a\u0009Vaddr  uint64\u000a\u0009Paddr  uint64\u000a\u0009Filesz uint64\u000a\u0009Memsz  uint64\u000a\u0009Align  uint64\u000a}</pre>\u000a<p>\u000aA ProgHeader represents a single ELF program header.\u000a</p>\u000a\u000a","name":"ProgHeader","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ProgType!\">ProgType</a></h2>\u000a<pre>type ProgType int</pre>\u000a<p>\u000aProg.Type\u000a</p>\u000a\u000a","name":"ProgType","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:ProgType\">func (ProgType)</a> <a href=\"?m:ProgType.GoString!\">GoString</a></h2>\u000a<code>func (i ProgType) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:ProgType\">func (ProgType)</a> <a href=\"?m:ProgType.String!\">String</a></h2>\u000a<code>func (i ProgType) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_386!\">R_386</a></h2>\u000a<pre>type R_386 int</pre>\u000a<p>\u000aRelocation types for 386.\u000a</p>\u000a\u000a","name":"R_386","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_386\">func (R_386)</a> <a href=\"?m:R_386.GoString!\">GoString</a></h2>\u000a<code>func (i R_386) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_386\">func (R_386)</a> <a href=\"?m:R_386.String!\">String</a></h2>\u000a<code>func (i R_386) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_ALPHA!\">R_ALPHA</a></h2>\u000a<pre>type R_ALPHA int</pre>\u000a<p>\u000aRelocation types for Alpha.\u000a</p>\u000a\u000a","name":"R_ALPHA","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_ALPHA\">func (R_ALPHA)</a> <a href=\"?m:R_ALPHA.GoString!\">GoString</a></h2>\u000a<code>func (i R_ALPHA) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_ALPHA\">func (R_ALPHA)</a> <a href=\"?m:R_ALPHA.String!\">String</a></h2>\u000a<code>func (i R_ALPHA) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_ARM!\">R_ARM</a></h2>\u000a<pre>type R_ARM int</pre>\u000a<p>\u000aRelocation types for ARM.\u000a</p>\u000a\u000a","name":"R_ARM","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_ARM\">func (R_ARM)</a> <a href=\"?m:R_ARM.GoString!\">GoString</a></h2>\u000a<code>func (i R_ARM) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_ARM\">func (R_ARM)</a> <a href=\"?m:R_ARM.String!\">String</a></h2>\u000a<code>func (i R_ARM) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_PPC!\">R_PPC</a></h2>\u000a<pre>type R_PPC int</pre>\u000a<p>\u000aRelocation types for PowerPC.\u000a</p>\u000a\u000a","name":"R_PPC","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_PPC\">func (R_PPC)</a> <a href=\"?m:R_PPC.GoString!\">GoString</a></h2>\u000a<code>func (i R_PPC) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_PPC\">func (R_PPC)</a> <a href=\"?m:R_PPC.String!\">String</a></h2>\u000a<code>func (i R_PPC) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_SPARC!\">R_SPARC</a></h2>\u000a<pre>type R_SPARC int</pre>\u000a<p>\u000aRelocation types for SPARC.\u000a</p>\u000a\u000a","name":"R_SPARC","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_SPARC\">func (R_SPARC)</a> <a href=\"?m:R_SPARC.GoString!\">GoString</a></h2>\u000a<code>func (i R_SPARC) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_SPARC\">func (R_SPARC)</a> <a href=\"?m:R_SPARC.String!\">String</a></h2>\u000a<code>func (i R_SPARC) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_X86_64!\">R_X86_64</a></h2>\u000a<pre>type R_X86_64 int</pre>\u000a<p>\u000aRelocation types for x86-64.\u000a</p>\u000a\u000a","name":"R_X86_64","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_X86_64\">func (R_X86_64)</a> <a href=\"?m:R_X86_64.GoString!\">GoString</a></h2>\u000a<code>func (i R_X86_64) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:R_X86_64\">func (R_X86_64)</a> <a href=\"?m:R_X86_64.String!\">String</a></h2>\u000a<code>func (i R_X86_64) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rel32!\">Rel32</a></h2>\u000a<pre>type Rel32 struct {\u000a\u0009Off  uint32 /* Location to be relocated. */\u000a\u0009Info uint32 /* Relocation type and symbol index. */\u000a}</pre>\u000a<p>\u000aELF32 Relocations that don&#39;t need an addend field.\u000a</p>\u000a\u000a","name":"Rel32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rel64!\">Rel64</a></h2>\u000a<pre>type Rel64 struct {\u000a\u0009Off  uint64 /* Location to be relocated. */\u000a\u0009Info uint64 /* Relocation type and symbol index. */\u000a}</pre>\u000a<p>\u000aELF64 relocations that don&#39;t need an addend field.\u000a</p>\u000a\u000a","name":"Rel64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rela32!\">Rela32</a></h2>\u000a<pre>type Rela32 struct {\u000a\u0009Off    uint32 /* Location to be relocated. */\u000a\u0009Info   uint32 /* Relocation type and symbol index. */\u000a\u0009Addend int32  /* Addend. */\u000a}</pre>\u000a<p>\u000aELF32 Relocations that need an addend field.\u000a</p>\u000a\u000a","name":"Rela32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rela64!\">Rela64</a></h2>\u000a<pre>type Rela64 struct {\u000a\u0009Off    uint64 /* Location to be relocated. */\u000a\u0009Info   uint64 /* Relocation type and symbol index. */\u000a\u0009Addend int64  /* Addend. */\u000a}</pre>\u000a<p>\u000aELF64 relocations that need an addend field.\u000a</p>\u000a\u000a","name":"Rela64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section!\">Section</a></h2>\u000a<pre>type Section struct {\u000a\u0009SectionHeader\u000a\u000a\u0009// Embed ReaderAt for ReadAt method.\u000a\u0009// Do not embed SectionReader directly\u000a\u0009// to avoid having Read and Seek.\u000a\u0009// If a client wants Read and Seek it must use\u000a\u0009// Open() to avoid fighting over the seek offset\u000a\u0009// with other clients.\u000a\u0009io.ReaderAt\u000a\u0009sr *io.SectionReader\u000a}</pre>\u000a<p>\u000aA Section represents a single section in an ELF file.\u000a</p>\u000a\u000a","name":"Section","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Section\">func (*Section)</a> <a href=\"?m:Section.Data!\">Data</a></h2>\u000a<code>func (s *Section) Data() ([]byte, os.Error)</code>\u000a<p>\u000aData reads and returns the contents of the ELF section.\u000a</p>\u000a\u000a","name":"Data"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Section\">func (*Section)</a> <a href=\"?m:Section.Open!\">Open</a></h2>\u000a<code>func (s *Section) Open() io.ReadSeeker</code>\u000a<p>\u000aOpen returns a new ReadSeeker reading the ELF section.\u000a</p>\u000a\u000a","name":"Open"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section32!\">Section32</a></h2>\u000a<pre>type Section32 struct {\u000a\u0009Name      uint32 /* Section name (index into the section header string table). */\u000a\u0009Type      uint32 /* Section type. */\u000a\u0009Flags     uint32 /* Section flags. */\u000a\u0009Addr      uint32 /* Address in memory image. */\u000a\u0009Off       uint32 /* Offset in file. */\u000a\u0009Size      uint32 /* Size in bytes. */\u000a\u0009Link      uint32 /* Index of a related section. */\u000a\u0009Info      uint32 /* Depends on section type. */\u000a\u0009Addralign uint32 /* Alignment in bytes. */\u000a\u0009Entsize   uint32 /* Size of each entry in section. */\u000a}</pre>\u000a<p>\u000aELF32 Section header.\u000a</p>\u000a\u000a","name":"Section32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section64!\">Section64</a></h2>\u000a<pre>type Section64 struct {\u000a\u0009Name      uint32 /* Section name (index into the section header string table). */\u000a\u0009Type      uint32 /* Section type. */\u000a\u0009Flags     uint64 /* Section flags. */\u000a\u0009Addr      uint64 /* Address in memory image. */\u000a\u0009Off       uint64 /* Offset in file. */\u000a\u0009Size      uint64 /* Size in bytes. */\u000a\u0009Link      uint32 /* Index of a related section. */\u000a\u0009Info      uint32 /* Depends on section type. */\u000a\u0009Addralign uint64 /* Alignment in bytes. */\u000a\u0009Entsize   uint64 /* Size of each entry in section. */\u000a}</pre>\u000a<p>\u000aELF64 Section header.\u000a</p>\u000a\u000a","name":"Section64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionFlag!\">SectionFlag</a></h2>\u000a<pre>type SectionFlag uint32</pre>\u000a<p>\u000aSection flags.\u000a</p>\u000a\u000a","name":"SectionFlag","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:SectionFlag\">func (SectionFlag)</a> <a href=\"?m:SectionFlag.GoString!\">GoString</a></h2>\u000a<code>func (i SectionFlag) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:SectionFlag\">func (SectionFlag)</a> <a href=\"?m:SectionFlag.String!\">String</a></h2>\u000a<code>func (i SectionFlag) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionHeader!\">SectionHeader</a></h2>\u000a<pre>type SectionHeader struct {\u000a\u0009Name      string\u000a\u0009Type      SectionType\u000a\u0009Flags     SectionFlag\u000a\u0009Addr      uint64\u000a\u0009Offset    uint64\u000a\u0009Size      uint64\u000a\u0009Link      uint32\u000a\u0009Info      uint32\u000a\u0009Addralign uint64\u000a\u0009Entsize   uint64\u000a}</pre>\u000a<p>\u000aA SectionHeader represents a single ELF section header.\u000a</p>\u000a\u000a","name":"SectionHeader","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionIndex!\">SectionIndex</a></h2>\u000a<pre>type SectionIndex int</pre>\u000a<p>\u000aSpecial section indices.\u000a</p>\u000a\u000a","name":"SectionIndex","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:SectionIndex\">func (SectionIndex)</a> <a href=\"?m:SectionIndex.GoString!\">GoString</a></h2>\u000a<code>func (i SectionIndex) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:SectionIndex\">func (SectionIndex)</a> <a href=\"?m:SectionIndex.String!\">String</a></h2>\u000a<code>func (i SectionIndex) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionType!\">SectionType</a></h2>\u000a<pre>type SectionType uint32</pre>\u000a<p>\u000aSection type.\u000a</p>\u000a\u000a","name":"SectionType","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:SectionType\">func (SectionType)</a> <a href=\"?m:SectionType.GoString!\">GoString</a></h2>\u000a<code>func (i SectionType) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:SectionType\">func (SectionType)</a> <a href=\"?m:SectionType.String!\">String</a></h2>\u000a<code>func (i SectionType) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Sym32!\">Sym32</a></h2>\u000a<pre>type Sym32 struct {\u000a\u0009Name  uint32\u000a\u0009Value uint32\u000a\u0009Size  uint32\u000a\u0009Info  uint8\u000a\u0009Other uint8\u000a\u0009Shndx uint16\u000a}</pre>\u000a<p>\u000aELF32 Symbol.\u000a</p>\u000a\u000a","name":"Sym32","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Sym64!\">Sym64</a></h2>\u000a<pre>type Sym64 struct {\u000a\u0009Name  uint32 /* String table index of name. */\u000a\u0009Info  uint8  /* Type and binding information. */\u000a\u0009Other uint8  /* Reserved (not used). */\u000a\u0009Shndx uint16 /* Section index of symbol. */\u000a\u0009Value uint64 /* Symbol value. */\u000a\u0009Size  uint64 /* Size of associated object. */\u000a}</pre>\u000a<p>\u000aELF64 symbol table entries.\u000a</p>\u000a\u000a","name":"Sym64","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SymBind!\">SymBind</a></h2>\u000a<pre>type SymBind int</pre>\u000a<p>\u000aSymbol Binding - ELFNN_ST_BIND - st_info\u000a</p>\u000a\u000a","name":"SymBind","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:SymBind\">func (SymBind)</a> <a href=\"?m:SymBind.GoString!\">GoString</a></h2>\u000a<code>func (i SymBind) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:SymBind\">func (SymBind)</a> <a href=\"?m:SymBind.String!\">String</a></h2>\u000a<code>func (i SymBind) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SymType!\">SymType</a></h2>\u000a<pre>type SymType int</pre>\u000a<p>\u000aSymbol type - ELFNN_ST_TYPE - st_info\u000a</p>\u000a\u000a","name":"SymType","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:SymType\">func (SymType)</a> <a href=\"?m:SymType.GoString!\">GoString</a></h2>\u000a<code>func (i SymType) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:SymType\">func (SymType)</a> <a href=\"?m:SymType.String!\">String</a></h2>\u000a<code>func (i SymType) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SymVis!\">SymVis</a></h2>\u000a<pre>type SymVis int</pre>\u000a<p>\u000aSymbol visibility - ELFNN_ST_VISIBILITY - st_other\u000a</p>\u000a\u000a","name":"SymVis","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:SymVis\">func (SymVis)</a> <a href=\"?m:SymVis.GoString!\">GoString</a></h2>\u000a<code>func (i SymVis) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:SymVis\">func (SymVis)</a> <a href=\"?m:SymVis.String!\">String</a></h2>\u000a<code>func (i SymVis) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Symbol!\">Symbol</a></h2>\u000a<pre>type Symbol struct {\u000a\u0009Name        uint32\u000a\u0009Info, Other byte\u000a\u0009Section     uint32\u000a\u0009Value, Size uint64\u000a}</pre>\u000a<p>\u000aA Symbol represents an entry in an ELF symbol table section.\u000a</p>\u000a\u000a","name":"Symbol","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Type!\">Type</a></h2>\u000a<pre>type Type uint16</pre>\u000a<p>\u000aType is found in Header.Type.\u000a</p>\u000a\u000a","name":"Type","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Type\">func (Type)</a> <a href=\"?m:Type.GoString!\">GoString</a></h2>\u000a<code>func (i Type) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Type\">func (Type)</a> <a href=\"?m:Type.String!\">String</a></h2>\u000a<code>func (i Type) String() string</code>\u000a\u000a","name":"String"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Version!\">Version</a></h2>\u000a<pre>type Version byte</pre>\u000a<p>\u000aVersion is found in Header.Ident[EI_VERSION] and Header.Version.\u000a</p>\u000a\u000a","name":"Version","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Version\">func (Version)</a> <a href=\"?m:Version.GoString!\">GoString</a></h2>\u000a<code>func (i Version) GoString() string</code>\u000a\u000a","name":"GoString"},{"html":"\u000a<h2><a class=\"black\" href=\"?m:Version\">func (Version)</a> <a href=\"?m:Version.String!\">String</a></h2>\u000a<code>func (i Version) String() string</code>\u000a\u000a","name":"String"}]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewFile!\">NewFile</a></h2>\u000a<code>func NewFile(r io.ReaderAt) (*File, os.Error)</code>\u000a<p>\u000aNewFile creates a new File for accessing an ELF binary in an underlying reader.\u000aThe ELF binary is expected to start at position 0 in the ReaderAt.\u000a</p>\u000a\u000a","name":"NewFile"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Open!\">Open</a></h2>\u000a<code>func Open(name string) (*File, os.Error)</code>\u000a<p>\u000aOpen opens the named file using os.Open and prepares it for use as an ELF binary.\u000a</p>\u000a\u000a","name":"Open"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_INFO!\">R_INFO</a></h2>\u000a<code>func R_INFO(sym, typ uint32) uint64</code>\u000a\u000a","name":"R_INFO"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_INFO32!\">R_INFO32</a></h2>\u000a<code>func R_INFO32(sym, typ uint32) uint32</code>\u000a\u000a","name":"R_INFO32"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_SYM32!\">R_SYM32</a></h2>\u000a<code>func R_SYM32(info uint32) uint32</code>\u000a\u000a","name":"R_SYM32"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_SYM64!\">R_SYM64</a></h2>\u000a<code>func R_SYM64(info uint64) uint32</code>\u000a\u000a","name":"R_SYM64"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_TYPE32!\">R_TYPE32</a></h2>\u000a<code>func R_TYPE32(info uint32) uint32</code>\u000a\u000a","name":"R_TYPE32"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_TYPE64!\">R_TYPE64</a></h2>\u000a<code>func R_TYPE64(info uint64) uint32</code>\u000a\u000a","name":"R_TYPE64"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ST_BIND!\">ST_BIND</a></h2>\u000a<code>func ST_BIND(info uint8) SymBind</code>\u000a\u000a","name":"ST_BIND"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ST_TYPE!\">ST_TYPE</a></h2>\u000a<code>func ST_TYPE(bind SymBind, typ SymType) uint8</code>\u000a\u000a","name":"ST_TYPE"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ST_VISIBILITY!\">ST_VISIBILITY</a></h2>\u000a<code>func ST_VISIBILITY(other uint8) SymVis</code>\u000a\u000a","name":"ST_VISIBILITY"}],"consts":[{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:EI_CLASS!\"><em>group</em></a></h2>\u000a<pre>const (\u000a\u0009EI_CLASS      = 4  /* Class of machine. */\u000a\u0009EI_DATA       = 5  /* Data format. */\u000a\u0009EI_VERSION    = 6  /* ELF format version. */\u000a\u0009EI_OSABI      = 7  /* Operating system / ABI identification */\u000a\u0009EI_ABIVERSION = 8  /* ABI version */\u000a\u0009EI_PAD        = 9  /* Start of padding (per SVR4 ABI). */\u000a\u0009EI_NIDENT     = 16 /* Size of e_ident array. */\u000a)</pre>\u000a<p>\u000aIndexes into the Header.Ident array.\u000a</p>\u000a\u000a","names":["EI_CLASS","EI_DATA","EI_VERSION","EI_OSABI","EI_ABIVERSION","EI_PAD","EI_NIDENT"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ELFMAG!\">ELFMAG</a></h2>\u000a<pre>const ELFMAG = &#34;\\177ELF&#34;</pre>\u000a<p>\u000aInitial magic number for ELF files.\u000a</p>\u000a\u000a","names":["ELFMAG"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Version!\">Version</a></h2>\u000a<pre>const (\u000a\u0009EV_NONE    Version = 0\u000a\u0009EV_CURRENT Version = 1\u000a)</pre>\u000a\u000a","names":["EV_NONE","EV_CURRENT"],"type":"Version"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Class!\">Class</a></h2>\u000a<pre>const (\u000a\u0009ELFCLASSNONE Class = 0 /* Unknown class. */\u000a\u0009ELFCLASS32   Class = 1 /* 32-bit architecture. */\u000a\u0009ELFCLASS64   Class = 2 /* 64-bit architecture. */\u000a)</pre>\u000a\u000a","names":["ELFCLASSNONE","ELFCLASS32","ELFCLASS64"],"type":"Class"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Data!\">Data</a></h2>\u000a<pre>const (\u000a\u0009ELFDATANONE Data = 0 /* Unknown data format. */\u000a\u0009ELFDATA2LSB Data = 1 /* 2&#39;s complement little-endian. */\u000a\u0009ELFDATA2MSB Data = 2 /* 2&#39;s complement big-endian. */\u000a)</pre>\u000a\u000a","names":["ELFDATANONE","ELFDATA2LSB","ELFDATA2MSB"],"type":"Data"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:OSABI!\">OSABI</a></h2>\u000a<pre>const (\u000a\u0009ELFOSABI_NONE       OSABI = 0   /* UNIX System V ABI */\u000a\u0009ELFOSABI_HPUX       OSABI = 1   /* HP-UX operating system */\u000a\u0009ELFOSABI_NETBSD     OSABI = 2   /* NetBSD */\u000a\u0009ELFOSABI_LINUX      OSABI = 3   /* GNU/Linux */\u000a\u0009ELFOSABI_HURD       OSABI = 4   /* GNU/Hurd */\u000a\u0009ELFOSABI_86OPEN     OSABI = 5   /* 86Open common IA32 ABI */\u000a\u0009ELFOSABI_SOLARIS    OSABI = 6   /* Solaris */\u000a\u0009ELFOSABI_AIX        OSABI = 7   /* AIX */\u000a\u0009ELFOSABI_IRIX       OSABI = 8   /* IRIX */\u000a\u0009ELFOSABI_FREEBSD    OSABI = 9   /* FreeBSD */\u000a\u0009ELFOSABI_TRU64      OSABI = 10  /* TRU64 UNIX */\u000a\u0009ELFOSABI_MODESTO    OSABI = 11  /* Novell Modesto */\u000a\u0009ELFOSABI_OPENBSD    OSABI = 12  /* OpenBSD */\u000a\u0009ELFOSABI_OPENVMS    OSABI = 13  /* Open VMS */\u000a\u0009ELFOSABI_NSK        OSABI = 14  /* HP Non-Stop Kernel */\u000a\u0009ELFOSABI_ARM        OSABI = 97  /* ARM */\u000a\u0009ELFOSABI_STANDALONE OSABI = 255 /* Standalone (embedded) application */\u000a)</pre>\u000a\u000a","names":["ELFOSABI_NONE","ELFOSABI_HPUX","ELFOSABI_NETBSD","ELFOSABI_LINUX","ELFOSABI_HURD","ELFOSABI_86OPEN","ELFOSABI_SOLARIS","ELFOSABI_AIX","ELFOSABI_IRIX","ELFOSABI_FREEBSD","ELFOSABI_TRU64","ELFOSABI_MODESTO","ELFOSABI_OPENBSD","ELFOSABI_OPENVMS","ELFOSABI_NSK","ELFOSABI_ARM","ELFOSABI_STANDALONE"],"type":"OSABI"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Type!\">Type</a></h2>\u000a<pre>const (\u000a\u0009ET_NONE   Type = 0      /* Unknown type. */\u000a\u0009ET_REL    Type = 1      /* Relocatable. */\u000a\u0009ET_EXEC   Type = 2      /* Executable. */\u000a\u0009ET_DYN    Type = 3      /* Shared object. */\u000a\u0009ET_CORE   Type = 4      /* Core file. */\u000a\u0009ET_LOOS   Type = 0xfe00 /* First operating system specific. */\u000a\u0009ET_HIOS   Type = 0xfeff /* Last operating system-specific. */\u000a\u0009ET_LOPROC Type = 0xff00 /* First processor-specific. */\u000a\u0009ET_HIPROC Type = 0xffff /* Last processor-specific. */\u000a)</pre>\u000a\u000a","names":["ET_NONE","ET_REL","ET_EXEC","ET_DYN","ET_CORE","ET_LOOS","ET_HIOS","ET_LOPROC","ET_HIPROC"],"type":"Type"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Machine!\">Machine</a></h2>\u000a<pre>const (\u000a\u0009EM_NONE        Machine = 0  /* Unknown machine. */\u000a\u0009EM_M32         Machine = 1  /* AT&amp;T WE32100. */\u000a\u0009EM_SPARC       Machine = 2  /* Sun SPARC. */\u000a\u0009EM_386         Machine = 3  /* Intel i386. */\u000a\u0009EM_68K         Machine = 4  /* Motorola 68000. */\u000a\u0009EM_88K         Machine = 5  /* Motorola 88000. */\u000a\u0009EM_860         Machine = 7  /* Intel i860. */\u000a\u0009EM_MIPS        Machine = 8  /* MIPS R3000 Big-Endian only. */\u000a\u0009EM_S370        Machine = 9  /* IBM System/370. */\u000a\u0009EM_MIPS_RS3_LE Machine = 10 /* MIPS R3000 Little-Endian. */\u000a\u0009EM_PARISC      Machine = 15 /* HP PA-RISC. */\u000a\u0009EM_VPP500      Machine = 17 /* Fujitsu VPP500. */\u000a\u0009EM_SPARC32PLUS Machine = 18 /* SPARC v8plus. */\u000a\u0009EM_960         Machine = 19 /* Intel 80960. */\u000a\u0009EM_PPC         Machine = 20 /* PowerPC 32-bit. */\u000a\u0009EM_PPC64       Machine = 21 /* PowerPC 64-bit. */\u000a\u0009EM_S390        Machine = 22 /* IBM System/390. */\u000a\u0009EM_V800        Machine = 36 /* NEC V800. */\u000a\u0009EM_FR20        Machine = 37 /* Fujitsu FR20. */\u000a\u0009EM_RH32        Machine = 38 /* TRW RH-32. */\u000a\u0009EM_RCE         Machine = 39 /* Motorola RCE. */\u000a\u0009EM_ARM         Machine = 40 /* ARM. */\u000a\u0009EM_SH          Machine = 42 /* Hitachi SH. */\u000a\u0009EM_SPARCV9     Machine = 43 /* SPARC v9 64-bit. */\u000a\u0009EM_TRICORE     Machine = 44 /* Siemens TriCore embedded processor. */\u000a\u0009EM_ARC         Machine = 45 /* Argonaut RISC Core. */\u000a\u0009EM_H8_300      Machine = 46 /* Hitachi H8/300. */\u000a\u0009EM_H8_300H     Machine = 47 /* Hitachi H8/300H. */\u000a\u0009EM_H8S         Machine = 48 /* Hitachi H8S. */\u000a\u0009EM_H8_500      Machine = 49 /* Hitachi H8/500. */\u000a\u0009EM_IA_64       Machine = 50 /* Intel IA-64 Processor. */\u000a\u0009EM_MIPS_X      Machine = 51 /* Stanford MIPS-X. */\u000a\u0009EM_COLDFIRE    Machine = 52 /* Motorola ColdFire. */\u000a\u0009EM_68HC12      Machine = 53 /* Motorola M68HC12. */\u000a\u0009EM_MMA         Machine = 54 /* Fujitsu MMA. */\u000a\u0009EM_PCP         Machine = 55 /* Siemens PCP. */\u000a\u0009EM_NCPU        Machine = 56 /* Sony nCPU. */\u000a\u0009EM_NDR1        Machine = 57 /* Denso NDR1 microprocessor. */\u000a\u0009EM_STARCORE    Machine = 58 /* Motorola Star*Core processor. */\u000a\u0009EM_ME16        Machine = 59 /* Toyota ME16 processor. */\u000a\u0009EM_ST100       Machine = 60 /* STMicroelectronics ST100 processor. */\u000a\u0009EM_TINYJ       Machine = 61 /* Advanced Logic Corp. TinyJ processor. */\u000a\u0009EM_X86_64      Machine = 62 /* Advanced Micro Devices x86-64 */\u000a\u000a\u0009/* Non-standard or deprecated. */\u000a\u0009EM_486         Machine = 6      /* Intel i486. */\u000a\u0009EM_MIPS_RS4_BE Machine = 10     /* MIPS R4000 Big-Endian */\u000a\u0009EM_ALPHA_STD   Machine = 41     /* Digital Alpha (standard value). */\u000a\u0009EM_ALPHA       Machine = 0x9026 /* Alpha (written in the absence of an ABI) */\u000a)</pre>\u000a\u000a","names":["EM_NONE","EM_M32","EM_SPARC","EM_386","EM_68K","EM_88K","EM_860","EM_MIPS","EM_S370","EM_MIPS_RS3_LE","EM_PARISC","EM_VPP500","EM_SPARC32PLUS","EM_960","EM_PPC","EM_PPC64","EM_S390","EM_V800","EM_FR20","EM_RH32","EM_RCE","EM_ARM","EM_SH","EM_SPARCV9","EM_TRICORE","EM_ARC","EM_H8_300","EM_H8_300H","EM_H8S","EM_H8_500","EM_IA_64","EM_MIPS_X","EM_COLDFIRE","EM_68HC12","EM_MMA","EM_PCP","EM_NCPU","EM_NDR1","EM_STARCORE","EM_ME16","EM_ST100","EM_TINYJ","EM_X86_64","EM_486","EM_MIPS_RS4_BE","EM_ALPHA_STD","EM_ALPHA"],"type":"Machine"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SectionIndex!\">SectionIndex</a></h2>\u000a<pre>const (\u000a\u0009SHN_UNDEF     SectionIndex = 0      /* Undefined, missing, irrelevant. */\u000a\u0009SHN_LORESERVE SectionIndex = 0xff00 /* First of reserved range. */\u000a\u0009SHN_LOPROC    SectionIndex = 0xff00 /* First processor-specific. */\u000a\u0009SHN_HIPROC    SectionIndex = 0xff1f /* Last processor-specific. */\u000a\u0009SHN_LOOS      SectionIndex = 0xff20 /* First operating system-specific. */\u000a\u0009SHN_HIOS      SectionIndex = 0xff3f /* Last operating system-specific. */\u000a\u0009SHN_ABS       SectionIndex = 0xfff1 /* Absolute values. */\u000a\u0009SHN_COMMON    SectionIndex = 0xfff2 /* Common data. */\u000a\u0009SHN_XINDEX    SectionIndex = 0xffff /* Escape -- index stored elsewhere. */\u000a\u0009SHN_HIRESERVE SectionIndex = 0xffff /* Last of reserved range. */\u000a)</pre>\u000a\u000a","names":["SHN_UNDEF","SHN_LORESERVE","SHN_LOPROC","SHN_HIPROC","SHN_LOOS","SHN_HIOS","SHN_ABS","SHN_COMMON","SHN_XINDEX","SHN_HIRESERVE"],"type":"SectionIndex"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SectionType!\">SectionType</a></h2>\u000a<pre>const (\u000a\u0009SHT_NULL          SectionType = 0          /* inactive */\u000a\u0009SHT_PROGBITS      SectionType = 1          /* program defined information */\u000a\u0009SHT_SYMTAB        SectionType = 2          /* symbol table section */\u000a\u0009SHT_STRTAB        SectionType = 3          /* string table section */\u000a\u0009SHT_RELA          SectionType = 4          /* relocation section with addends */\u000a\u0009SHT_HASH          SectionType = 5          /* symbol hash table section */\u000a\u0009SHT_DYNAMIC       SectionType = 6          /* dynamic section */\u000a\u0009SHT_NOTE          SectionType = 7          /* note section */\u000a\u0009SHT_NOBITS        SectionType = 8          /* no space section */\u000a\u0009SHT_REL           SectionType = 9          /* relocation section - no addends */\u000a\u0009SHT_SHLIB         SectionType = 10         /* reserved - purpose unknown */\u000a\u0009SHT_DYNSYM        SectionType = 11         /* dynamic symbol table section */\u000a\u0009SHT_INIT_ARRAY    SectionType = 14         /* Initialization function pointers. */\u000a\u0009SHT_FINI_ARRAY    SectionType = 15         /* Termination function pointers. */\u000a\u0009SHT_PREINIT_ARRAY SectionType = 16         /* Pre-initialization function ptrs. */\u000a\u0009SHT_GROUP         SectionType = 17         /* Section group. */\u000a\u0009SHT_SYMTAB_SHNDX  SectionType = 18         /* Section indexes (see SHN_XINDEX). */\u000a\u0009SHT_LOOS          SectionType = 0x60000000 /* First of OS specific semantics */\u000a\u0009SHT_HIOS          SectionType = 0x6fffffff /* Last of OS specific semantics */\u000a\u0009SHT_LOPROC        SectionType = 0x70000000 /* reserved range for processor */\u000a\u0009SHT_HIPROC        SectionType = 0x7fffffff /* specific section header types */\u000a\u0009SHT_LOUSER        SectionType = 0x80000000 /* reserved range for application */\u000a\u0009SHT_HIUSER        SectionType = 0xffffffff /* specific indexes */\u000a)</pre>\u000a\u000a","names":["SHT_NULL","SHT_PROGBITS","SHT_SYMTAB","SHT_STRTAB","SHT_RELA","SHT_HASH","SHT_DYNAMIC","SHT_NOTE","SHT_NOBITS","SHT_REL","SHT_SHLIB","SHT_DYNSYM","SHT_INIT_ARRAY","SHT_FINI_ARRAY","SHT_PREINIT_ARRAY","SHT_GROUP","SHT_SYMTAB_SHNDX","SHT_LOOS","SHT_HIOS","SHT_LOPROC","SHT_HIPROC","SHT_LOUSER","SHT_HIUSER"],"type":"SectionType"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SectionFlag!\">SectionFlag</a></h2>\u000a<pre>const (\u000a\u0009SHF_WRITE            SectionFlag = 0x1        /* Section contains writable data. */\u000a\u0009SHF_ALLOC            SectionFlag = 0x2        /* Section occupies memory. */\u000a\u0009SHF_EXECINSTR        SectionFlag = 0x4        /* Section contains instructions. */\u000a\u0009SHF_MERGE            SectionFlag = 0x10       /* Section may be merged. */\u000a\u0009SHF_STRINGS          SectionFlag = 0x20       /* Section contains strings. */\u000a\u0009SHF_INFO_LINK        SectionFlag = 0x40       /* sh_info holds section index. */\u000a\u0009SHF_LINK_ORDER       SectionFlag = 0x80       /* Special ordering requirements. */\u000a\u0009SHF_OS_NONCONFORMING SectionFlag = 0x100      /* OS-specific processing required. */\u000a\u0009SHF_GROUP            SectionFlag = 0x200      /* Member of section group. */\u000a\u0009SHF_TLS              SectionFlag = 0x400      /* Section contains TLS data. */\u000a\u0009SHF_MASKOS           SectionFlag = 0x0ff00000 /* OS-specific semantics. */\u000a\u0009SHF_MASKPROC         SectionFlag = 0xf0000000 /* Processor-specific semantics. */\u000a)</pre>\u000a\u000a","names":["SHF_WRITE","SHF_ALLOC","SHF_EXECINSTR","SHF_MERGE","SHF_STRINGS","SHF_INFO_LINK","SHF_LINK_ORDER","SHF_OS_NONCONFORMING","SHF_GROUP","SHF_TLS","SHF_MASKOS","SHF_MASKPROC"],"type":"SectionFlag"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ProgType!\">ProgType</a></h2>\u000a<pre>const (\u000a\u0009PT_NULL    ProgType = 0          /* Unused entry. */\u000a\u0009PT_LOAD    ProgType = 1          /* Loadable segment. */\u000a\u0009PT_DYNAMIC ProgType = 2          /* Dynamic linking information segment. */\u000a\u0009PT_INTERP  ProgType = 3          /* Pathname of interpreter. */\u000a\u0009PT_NOTE    ProgType = 4          /* Auxiliary information. */\u000a\u0009PT_SHLIB   ProgType = 5          /* Reserved (not used). */\u000a\u0009PT_PHDR    ProgType = 6          /* Location of program header itself. */\u000a\u0009PT_TLS     ProgType = 7          /* Thread local storage segment */\u000a\u0009PT_LOOS    ProgType = 0x60000000 /* First OS-specific. */\u000a\u0009PT_HIOS    ProgType = 0x6fffffff /* Last OS-specific. */\u000a\u0009PT_LOPROC  ProgType = 0x70000000 /* First processor-specific type. */\u000a\u0009PT_HIPROC  ProgType = 0x7fffffff /* Last processor-specific type. */\u000a)</pre>\u000a\u000a","names":["PT_NULL","PT_LOAD","PT_DYNAMIC","PT_INTERP","PT_NOTE","PT_SHLIB","PT_PHDR","PT_TLS","PT_LOOS","PT_HIOS","PT_LOPROC","PT_HIPROC"],"type":"ProgType"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ProgFlag!\">ProgFlag</a></h2>\u000a<pre>const (\u000a\u0009PF_X        ProgFlag = 0x1        /* Executable. */\u000a\u0009PF_W        ProgFlag = 0x2        /* Writable. */\u000a\u0009PF_R        ProgFlag = 0x4        /* Readable. */\u000a\u0009PF_MASKOS   ProgFlag = 0x0ff00000 /* Operating system-specific. */\u000a\u0009PF_MASKPROC ProgFlag = 0xf0000000 /* Processor-specific. */\u000a)</pre>\u000a\u000a","names":["PF_X","PF_W","PF_R","PF_MASKOS","PF_MASKPROC"],"type":"ProgFlag"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:DynTag!\">DynTag</a></h2>\u000a<pre>const (\u000a\u0009DT_NULL         DynTag = 0  /* Terminating entry. */\u000a\u0009DT_NEEDED       DynTag = 1  /* String table offset of a needed shared library. */\u000a\u0009DT_PLTRELSZ     DynTag = 2  /* Total size in bytes of PLT relocations. */\u000a\u0009DT_PLTGOT       DynTag = 3  /* Processor-dependent address. */\u000a\u0009DT_HASH         DynTag = 4  /* Address of symbol hash table. */\u000a\u0009DT_STRTAB       DynTag = 5  /* Address of string table. */\u000a\u0009DT_SYMTAB       DynTag = 6  /* Address of symbol table. */\u000a\u0009DT_RELA         DynTag = 7  /* Address of ElfNN_Rela relocations. */\u000a\u0009DT_RELASZ       DynTag = 8  /* Total size of ElfNN_Rela relocations. */\u000a\u0009DT_RELAENT      DynTag = 9  /* Size of each ElfNN_Rela relocation entry. */\u000a\u0009DT_STRSZ        DynTag = 10 /* Size of string table. */\u000a\u0009DT_SYMENT       DynTag = 11 /* Size of each symbol table entry. */\u000a\u0009DT_INIT         DynTag = 12 /* Address of initialization function. */\u000a\u0009DT_FINI         DynTag = 13 /* Address of finalization function. */\u000a\u0009DT_SONAME       DynTag = 14 /* String table offset of shared object name. */\u000a\u0009DT_RPATH        DynTag = 15 /* String table offset of library path. [sup] */\u000a\u0009DT_SYMBOLIC     DynTag = 16 /* Indicates &#34;symbolic&#34; linking. [sup] */\u000a\u0009DT_REL          DynTag = 17 /* Address of ElfNN_Rel relocations. */\u000a\u0009DT_RELSZ        DynTag = 18 /* Total size of ElfNN_Rel relocations. */\u000a\u0009DT_RELENT       DynTag = 19 /* Size of each ElfNN_Rel relocation. */\u000a\u0009DT_PLTREL       DynTag = 20 /* Type of relocation used for PLT. */\u000a\u0009DT_DEBUG        DynTag = 21 /* Reserved (not used). */\u000a\u0009DT_TEXTREL      DynTag = 22 /* Indicates there may be relocations in non-writable segments. [sup] */\u000a\u0009DT_JMPREL       DynTag = 23 /* Address of PLT relocations. */\u000a\u0009DT_BIND_NOW     DynTag = 24 /* [sup] */\u000a\u0009DT_INIT_ARRAY   DynTag = 25 /* Address of the array of pointers to initialization functions */\u000a\u0009DT_FINI_ARRAY   DynTag = 26 /* Address of the array of pointers to termination functions */\u000a\u0009DT_INIT_ARRAYSZ DynTag = 27 /* Size in bytes of the array of initialization functions. */\u000a\u0009DT_FINI_ARRAYSZ DynTag = 28 /* Size in bytes of the array of terminationfunctions. */\u000a\u0009DT_RUNPATH      DynTag = 29 /* String table offset of a null-terminated library search path string. */\u000a\u0009DT_FLAGS        DynTag = 30 /* Object specific flag values. */\u000a\u0009DT_ENCODING     DynTag = 32 /* Values greater than or equal to DT_ENCODING\u000a\u0009   and less than DT_LOOS follow the rules for\u000a\u0009   the interpretation of the d_un union\u000a\u0009   as follows: even == &#39;d_ptr&#39;, even == &#39;d_val&#39;\u000a\u0009   or none */\u000a\u0009DT_PREINIT_ARRAY   DynTag = 32         /* Address of the array of pointers to pre-initialization functions. */\u000a\u0009DT_PREINIT_ARRAYSZ DynTag = 33         /* Size in bytes of the array of pre-initialization functions. */\u000a\u0009DT_LOOS            DynTag = 0x6000000d /* First OS-specific */\u000a\u0009DT_HIOS            DynTag = 0x6ffff000 /* Last OS-specific */\u000a\u0009DT_LOPROC          DynTag = 0x70000000 /* First processor-specific type. */\u000a\u0009DT_HIPROC          DynTag = 0x7fffffff /* Last processor-specific type. */\u000a)</pre>\u000a\u000a","names":["DT_NULL","DT_NEEDED","DT_PLTRELSZ","DT_PLTGOT","DT_HASH","DT_STRTAB","DT_SYMTAB","DT_RELA","DT_RELASZ","DT_RELAENT","DT_STRSZ","DT_SYMENT","DT_INIT","DT_FINI","DT_SONAME","DT_RPATH","DT_SYMBOLIC","DT_REL","DT_RELSZ","DT_RELENT","DT_PLTREL","DT_DEBUG","DT_TEXTREL","DT_JMPREL","DT_BIND_NOW","DT_INIT_ARRAY","DT_FINI_ARRAY","DT_INIT_ARRAYSZ","DT_FINI_ARRAYSZ","DT_RUNPATH","DT_FLAGS","DT_ENCODING","DT_PREINIT_ARRAY","DT_PREINIT_ARRAYSZ","DT_LOOS","DT_HIOS","DT_LOPROC","DT_HIPROC"],"type":"DynTag"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:DynFlag!\">DynFlag</a></h2>\u000a<pre>const (\u000a\u0009DF_ORIGIN DynFlag = 0x0001 /* Indicates that the object being loaded may\u000a\u0009   make reference to the\u000a\u0009   $ORIGIN substitution string */\u000a\u0009DF_SYMBOLIC DynFlag = 0x0002 /* Indicates &#34;symbolic&#34; linking. */\u000a\u0009DF_TEXTREL  DynFlag = 0x0004 /* Indicates there may be relocations in non-writable segments. */\u000a\u0009DF_BIND_NOW DynFlag = 0x0008 /* Indicates that the dynamic linker should\u000a\u0009   process all relocations for the object\u000a\u0009   containing this entry before transferring\u000a\u0009   control to the program. */\u000a\u0009DF_STATIC_TLS DynFlag = 0x0010 /* Indicates that the shared object or\u000a\u0009   executable contains code using a static\u000a\u0009   thread-local storage scheme. */\u000a)</pre>\u000a\u000a","names":["DF_ORIGIN","DF_SYMBOLIC","DF_TEXTREL","DF_BIND_NOW","DF_STATIC_TLS"],"type":"DynFlag"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:NType!\">NType</a></h2>\u000a<pre>const (\u000a\u0009NT_PRSTATUS NType = 1 /* Process status. */\u000a\u0009NT_FPREGSET NType = 2 /* Floating point registers. */\u000a\u0009NT_PRPSINFO NType = 3 /* Process state info. */\u000a)</pre>\u000a\u000a","names":["NT_PRSTATUS","NT_FPREGSET","NT_PRPSINFO"],"type":"NType"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SymBind!\">SymBind</a></h2>\u000a<pre>const (\u000a\u0009STB_LOCAL  SymBind = 0  /* Local symbol */\u000a\u0009STB_GLOBAL SymBind = 1  /* Global symbol */\u000a\u0009STB_WEAK   SymBind = 2  /* like global - lower precedence */\u000a\u0009STB_LOOS   SymBind = 10 /* Reserved range for operating system */\u000a\u0009STB_HIOS   SymBind = 12 /*   specific semantics. */\u000a\u0009STB_LOPROC SymBind = 13 /* reserved range for processor */\u000a\u0009STB_HIPROC SymBind = 15 /*   specific semantics. */\u000a)</pre>\u000a\u000a","names":["STB_LOCAL","STB_GLOBAL","STB_WEAK","STB_LOOS","STB_HIOS","STB_LOPROC","STB_HIPROC"],"type":"SymBind"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SymType!\">SymType</a></h2>\u000a<pre>const (\u000a\u0009STT_NOTYPE  SymType = 0  /* Unspecified type. */\u000a\u0009STT_OBJECT  SymType = 1  /* Data object. */\u000a\u0009STT_FUNC    SymType = 2  /* Function. */\u000a\u0009STT_SECTION SymType = 3  /* Section. */\u000a\u0009STT_FILE    SymType = 4  /* Source file. */\u000a\u0009STT_COMMON  SymType = 5  /* Uninitialized common block. */\u000a\u0009STT_TLS     SymType = 6  /* TLS object. */\u000a\u0009STT_LOOS    SymType = 10 /* Reserved range for operating system */\u000a\u0009STT_HIOS    SymType = 12 /*   specific semantics. */\u000a\u0009STT_LOPROC  SymType = 13 /* reserved range for processor */\u000a\u0009STT_HIPROC  SymType = 15 /*   specific semantics. */\u000a)</pre>\u000a\u000a","names":["STT_NOTYPE","STT_OBJECT","STT_FUNC","STT_SECTION","STT_FILE","STT_COMMON","STT_TLS","STT_LOOS","STT_HIOS","STT_LOPROC","STT_HIPROC"],"type":"SymType"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SymVis!\">SymVis</a></h2>\u000a<pre>const (\u000a\u0009STV_DEFAULT   SymVis = 0x0 /* Default visibility (see binding). */\u000a\u0009STV_INTERNAL  SymVis = 0x1 /* Special meaning in relocatable objects. */\u000a\u0009STV_HIDDEN    SymVis = 0x2 /* Not visible. */\u000a\u0009STV_PROTECTED SymVis = 0x3 /* Visible but not preemptible. */\u000a)</pre>\u000a\u000a","names":["STV_DEFAULT","STV_INTERNAL","STV_HIDDEN","STV_PROTECTED"],"type":"SymVis"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_X86_64!\">R_X86_64</a></h2>\u000a<pre>const (\u000a\u0009R_X86_64_NONE     R_X86_64 = 0  /* No relocation. */\u000a\u0009R_X86_64_64       R_X86_64 = 1  /* Add 64 bit symbol value. */\u000a\u0009R_X86_64_PC32     R_X86_64 = 2  /* PC-relative 32 bit signed sym value. */\u000a\u0009R_X86_64_GOT32    R_X86_64 = 3  /* PC-relative 32 bit GOT offset. */\u000a\u0009R_X86_64_PLT32    R_X86_64 = 4  /* PC-relative 32 bit PLT offset. */\u000a\u0009R_X86_64_COPY     R_X86_64 = 5  /* Copy data from shared object. */\u000a\u0009R_X86_64_GLOB_DAT R_X86_64 = 6  /* Set GOT entry to data address. */\u000a\u0009R_X86_64_JMP_SLOT R_X86_64 = 7  /* Set GOT entry to code address. */\u000a\u0009R_X86_64_RELATIVE R_X86_64 = 8  /* Add load address of shared object. */\u000a\u0009R_X86_64_GOTPCREL R_X86_64 = 9  /* Add 32 bit signed pcrel offset to GOT. */\u000a\u0009R_X86_64_32       R_X86_64 = 10 /* Add 32 bit zero extended symbol value */\u000a\u0009R_X86_64_32S      R_X86_64 = 11 /* Add 32 bit sign extended symbol value */\u000a\u0009R_X86_64_16       R_X86_64 = 12 /* Add 16 bit zero extended symbol value */\u000a\u0009R_X86_64_PC16     R_X86_64 = 13 /* Add 16 bit signed extended pc relative symbol value */\u000a\u0009R_X86_64_8        R_X86_64 = 14 /* Add 8 bit zero extended symbol value */\u000a\u0009R_X86_64_PC8      R_X86_64 = 15 /* Add 8 bit signed extended pc relative symbol value */\u000a\u0009R_X86_64_DTPMOD64 R_X86_64 = 16 /* ID of module containing symbol */\u000a\u0009R_X86_64_DTPOFF64 R_X86_64 = 17 /* Offset in TLS block */\u000a\u0009R_X86_64_TPOFF64  R_X86_64 = 18 /* Offset in static TLS block */\u000a\u0009R_X86_64_TLSGD    R_X86_64 = 19 /* PC relative offset to GD GOT entry */\u000a\u0009R_X86_64_TLSLD    R_X86_64 = 20 /* PC relative offset to LD GOT entry */\u000a\u0009R_X86_64_DTPOFF32 R_X86_64 = 21 /* Offset in TLS block */\u000a\u0009R_X86_64_GOTTPOFF R_X86_64 = 22 /* PC relative offset to IE GOT entry */\u000a\u0009R_X86_64_TPOFF32  R_X86_64 = 23 /* Offset in static TLS block */\u000a)</pre>\u000a\u000a","names":["R_X86_64_NONE","R_X86_64_64","R_X86_64_PC32","R_X86_64_GOT32","R_X86_64_PLT32","R_X86_64_COPY","R_X86_64_GLOB_DAT","R_X86_64_JMP_SLOT","R_X86_64_RELATIVE","R_X86_64_GOTPCREL","R_X86_64_32","R_X86_64_32S","R_X86_64_16","R_X86_64_PC16","R_X86_64_8","R_X86_64_PC8","R_X86_64_DTPMOD64","R_X86_64_DTPOFF64","R_X86_64_TPOFF64","R_X86_64_TLSGD","R_X86_64_TLSLD","R_X86_64_DTPOFF32","R_X86_64_GOTTPOFF","R_X86_64_TPOFF32"],"type":"R_X86_64"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_ALPHA!\">R_ALPHA</a></h2>\u000a<pre>const (\u000a\u0009R_ALPHA_NONE           R_ALPHA = 0  /* No reloc */\u000a\u0009R_ALPHA_REFLONG        R_ALPHA = 1  /* Direct 32 bit */\u000a\u0009R_ALPHA_REFQUAD        R_ALPHA = 2  /* Direct 64 bit */\u000a\u0009R_ALPHA_GPREL32        R_ALPHA = 3  /* GP relative 32 bit */\u000a\u0009R_ALPHA_LITERAL        R_ALPHA = 4  /* GP relative 16 bit w/optimization */\u000a\u0009R_ALPHA_LITUSE         R_ALPHA = 5  /* Optimization hint for LITERAL */\u000a\u0009R_ALPHA_GPDISP         R_ALPHA = 6  /* Add displacement to GP */\u000a\u0009R_ALPHA_BRADDR         R_ALPHA = 7  /* PC+4 relative 23 bit shifted */\u000a\u0009R_ALPHA_HINT           R_ALPHA = 8  /* PC+4 relative 16 bit shifted */\u000a\u0009R_ALPHA_SREL16         R_ALPHA = 9  /* PC relative 16 bit */\u000a\u0009R_ALPHA_SREL32         R_ALPHA = 10 /* PC relative 32 bit */\u000a\u0009R_ALPHA_SREL64         R_ALPHA = 11 /* PC relative 64 bit */\u000a\u0009R_ALPHA_OP_PUSH        R_ALPHA = 12 /* OP stack push */\u000a\u0009R_ALPHA_OP_STORE       R_ALPHA = 13 /* OP stack pop and store */\u000a\u0009R_ALPHA_OP_PSUB        R_ALPHA = 14 /* OP stack subtract */\u000a\u0009R_ALPHA_OP_PRSHIFT     R_ALPHA = 15 /* OP stack right shift */\u000a\u0009R_ALPHA_GPVALUE        R_ALPHA = 16\u000a\u0009R_ALPHA_GPRELHIGH      R_ALPHA = 17\u000a\u0009R_ALPHA_GPRELLOW       R_ALPHA = 18\u000a\u0009R_ALPHA_IMMED_GP_16    R_ALPHA = 19\u000a\u0009R_ALPHA_IMMED_GP_HI32  R_ALPHA = 20\u000a\u0009R_ALPHA_IMMED_SCN_HI32 R_ALPHA = 21\u000a\u0009R_ALPHA_IMMED_BR_HI32  R_ALPHA = 22\u000a\u0009R_ALPHA_IMMED_LO32     R_ALPHA = 23\u000a\u0009R_ALPHA_COPY           R_ALPHA = 24 /* Copy symbol at runtime */\u000a\u0009R_ALPHA_GLOB_DAT       R_ALPHA = 25 /* Create GOT entry */\u000a\u0009R_ALPHA_JMP_SLOT       R_ALPHA = 26 /* Create PLT entry */\u000a\u0009R_ALPHA_RELATIVE       R_ALPHA = 27 /* Adjust by program base */\u000a)</pre>\u000a\u000a","names":["R_ALPHA_NONE","R_ALPHA_REFLONG","R_ALPHA_REFQUAD","R_ALPHA_GPREL32","R_ALPHA_LITERAL","R_ALPHA_LITUSE","R_ALPHA_GPDISP","R_ALPHA_BRADDR","R_ALPHA_HINT","R_ALPHA_SREL16","R_ALPHA_SREL32","R_ALPHA_SREL64","R_ALPHA_OP_PUSH","R_ALPHA_OP_STORE","R_ALPHA_OP_PSUB","R_ALPHA_OP_PRSHIFT","R_ALPHA_GPVALUE","R_ALPHA_GPRELHIGH","R_ALPHA_GPRELLOW","R_ALPHA_IMMED_GP_16","R_ALPHA_IMMED_GP_HI32","R_ALPHA_IMMED_SCN_HI32","R_ALPHA_IMMED_BR_HI32","R_ALPHA_IMMED_LO32","R_ALPHA_COPY","R_ALPHA_GLOB_DAT","R_ALPHA_JMP_SLOT","R_ALPHA_RELATIVE"],"type":"R_ALPHA"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_ARM!\">R_ARM</a></h2>\u000a<pre>const (\u000a\u0009R_ARM_NONE          R_ARM = 0 /* No relocation. */\u000a\u0009R_ARM_PC24          R_ARM = 1\u000a\u0009R_ARM_ABS32         R_ARM = 2\u000a\u0009R_ARM_REL32         R_ARM = 3\u000a\u0009R_ARM_PC13          R_ARM = 4\u000a\u0009R_ARM_ABS16         R_ARM = 5\u000a\u0009R_ARM_ABS12         R_ARM = 6\u000a\u0009R_ARM_THM_ABS5      R_ARM = 7\u000a\u0009R_ARM_ABS8          R_ARM = 8\u000a\u0009R_ARM_SBREL32       R_ARM = 9\u000a\u0009R_ARM_THM_PC22      R_ARM = 10\u000a\u0009R_ARM_THM_PC8       R_ARM = 11\u000a\u0009R_ARM_AMP_VCALL9    R_ARM = 12\u000a\u0009R_ARM_SWI24         R_ARM = 13\u000a\u0009R_ARM_THM_SWI8      R_ARM = 14\u000a\u0009R_ARM_XPC25         R_ARM = 15\u000a\u0009R_ARM_THM_XPC22     R_ARM = 16\u000a\u0009R_ARM_COPY          R_ARM = 20 /* Copy data from shared object. */\u000a\u0009R_ARM_GLOB_DAT      R_ARM = 21 /* Set GOT entry to data address. */\u000a\u0009R_ARM_JUMP_SLOT     R_ARM = 22 /* Set GOT entry to code address. */\u000a\u0009R_ARM_RELATIVE      R_ARM = 23 /* Add load address of shared object. */\u000a\u0009R_ARM_GOTOFF        R_ARM = 24 /* Add GOT-relative symbol address. */\u000a\u0009R_ARM_GOTPC         R_ARM = 25 /* Add PC-relative GOT table address. */\u000a\u0009R_ARM_GOT32         R_ARM = 26 /* Add PC-relative GOT offset. */\u000a\u0009R_ARM_PLT32         R_ARM = 27 /* Add PC-relative PLT offset. */\u000a\u0009R_ARM_GNU_VTENTRY   R_ARM = 100\u000a\u0009R_ARM_GNU_VTINHERIT R_ARM = 101\u000a\u0009R_ARM_RSBREL32      R_ARM = 250\u000a\u0009R_ARM_THM_RPC22     R_ARM = 251\u000a\u0009R_ARM_RREL32        R_ARM = 252\u000a\u0009R_ARM_RABS32        R_ARM = 253\u000a\u0009R_ARM_RPC24         R_ARM = 254\u000a\u0009R_ARM_RBASE         R_ARM = 255\u000a)</pre>\u000a\u000a","names":["R_ARM_NONE","R_ARM_PC24","R_ARM_ABS32","R_ARM_REL32","R_ARM_PC13","R_ARM_ABS16","R_ARM_ABS12","R_ARM_THM_ABS5","R_ARM_ABS8","R_ARM_SBREL32","R_ARM_THM_PC22","R_ARM_THM_PC8","R_ARM_AMP_VCALL9","R_ARM_SWI24","R_ARM_THM_SWI8","R_ARM_XPC25","R_ARM_THM_XPC22","R_ARM_COPY","R_ARM_GLOB_DAT","R_ARM_JUMP_SLOT","R_ARM_RELATIVE","R_ARM_GOTOFF","R_ARM_GOTPC","R_ARM_GOT32","R_ARM_PLT32","R_ARM_GNU_VTENTRY","R_ARM_GNU_VTINHERIT","R_ARM_RSBREL32","R_ARM_THM_RPC22","R_ARM_RREL32","R_ARM_RABS32","R_ARM_RPC24","R_ARM_RBASE"],"type":"R_ARM"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_386!\">R_386</a></h2>\u000a<pre>const (\u000a\u0009R_386_NONE         R_386 = 0  /* No relocation. */\u000a\u0009R_386_32           R_386 = 1  /* Add symbol value. */\u000a\u0009R_386_PC32         R_386 = 2  /* Add PC-relative symbol value. */\u000a\u0009R_386_GOT32        R_386 = 3  /* Add PC-relative GOT offset. */\u000a\u0009R_386_PLT32        R_386 = 4  /* Add PC-relative PLT offset. */\u000a\u0009R_386_COPY         R_386 = 5  /* Copy data from shared object. */\u000a\u0009R_386_GLOB_DAT     R_386 = 6  /* Set GOT entry to data address. */\u000a\u0009R_386_JMP_SLOT     R_386 = 7  /* Set GOT entry to code address. */\u000a\u0009R_386_RELATIVE     R_386 = 8  /* Add load address of shared object. */\u000a\u0009R_386_GOTOFF       R_386 = 9  /* Add GOT-relative symbol address. */\u000a\u0009R_386_GOTPC        R_386 = 10 /* Add PC-relative GOT table address. */\u000a\u0009R_386_TLS_TPOFF    R_386 = 14 /* Negative offset in static TLS block */\u000a\u0009R_386_TLS_IE       R_386 = 15 /* Absolute address of GOT for -ve static TLS */\u000a\u0009R_386_TLS_GOTIE    R_386 = 16 /* GOT entry for negative static TLS block */\u000a\u0009R_386_TLS_LE       R_386 = 17 /* Negative offset relative to static TLS */\u000a\u0009R_386_TLS_GD       R_386 = 18 /* 32 bit offset to GOT (index,off) pair */\u000a\u0009R_386_TLS_LDM      R_386 = 19 /* 32 bit offset to GOT (index,zero) pair */\u000a\u0009R_386_TLS_GD_32    R_386 = 24 /* 32 bit offset to GOT (index,off) pair */\u000a\u0009R_386_TLS_GD_PUSH  R_386 = 25 /* pushl instruction for Sun ABI GD sequence */\u000a\u0009R_386_TLS_GD_CALL  R_386 = 26 /* call instruction for Sun ABI GD sequence */\u000a\u0009R_386_TLS_GD_POP   R_386 = 27 /* popl instruction for Sun ABI GD sequence */\u000a\u0009R_386_TLS_LDM_32   R_386 = 28 /* 32 bit offset to GOT (index,zero) pair */\u000a\u0009R_386_TLS_LDM_PUSH R_386 = 29 /* pushl instruction for Sun ABI LD sequence */\u000a\u0009R_386_TLS_LDM_CALL R_386 = 30 /* call instruction for Sun ABI LD sequence */\u000a\u0009R_386_TLS_LDM_POP  R_386 = 31 /* popl instruction for Sun ABI LD sequence */\u000a\u0009R_386_TLS_LDO_32   R_386 = 32 /* 32 bit offset from start of TLS block */\u000a\u0009R_386_TLS_IE_32    R_386 = 33 /* 32 bit offset to GOT static TLS offset entry */\u000a\u0009R_386_TLS_LE_32    R_386 = 34 /* 32 bit offset within static TLS block */\u000a\u0009R_386_TLS_DTPMOD32 R_386 = 35 /* GOT entry containing TLS index */\u000a\u0009R_386_TLS_DTPOFF32 R_386 = 36 /* GOT entry containing TLS offset */\u000a\u0009R_386_TLS_TPOFF32  R_386 = 37 /* GOT entry of -ve static TLS offset */\u000a)</pre>\u000a\u000a","names":["R_386_NONE","R_386_32","R_386_PC32","R_386_GOT32","R_386_PLT32","R_386_COPY","R_386_GLOB_DAT","R_386_JMP_SLOT","R_386_RELATIVE","R_386_GOTOFF","R_386_GOTPC","R_386_TLS_TPOFF","R_386_TLS_IE","R_386_TLS_GOTIE","R_386_TLS_LE","R_386_TLS_GD","R_386_TLS_LDM","R_386_TLS_GD_32","R_386_TLS_GD_PUSH","R_386_TLS_GD_CALL","R_386_TLS_GD_POP","R_386_TLS_LDM_32","R_386_TLS_LDM_PUSH","R_386_TLS_LDM_CALL","R_386_TLS_LDM_POP","R_386_TLS_LDO_32","R_386_TLS_IE_32","R_386_TLS_LE_32","R_386_TLS_DTPMOD32","R_386_TLS_DTPOFF32","R_386_TLS_TPOFF32"],"type":"R_386"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_PPC!\">R_PPC</a></h2>\u000a<pre>const (\u000a\u0009R_PPC_NONE            R_PPC = 0 /* No relocation. */\u000a\u0009R_PPC_ADDR32          R_PPC = 1\u000a\u0009R_PPC_ADDR24          R_PPC = 2\u000a\u0009R_PPC_ADDR16          R_PPC = 3\u000a\u0009R_PPC_ADDR16_LO       R_PPC = 4\u000a\u0009R_PPC_ADDR16_HI       R_PPC = 5\u000a\u0009R_PPC_ADDR16_HA       R_PPC = 6\u000a\u0009R_PPC_ADDR14          R_PPC = 7\u000a\u0009R_PPC_ADDR14_BRTAKEN  R_PPC = 8\u000a\u0009R_PPC_ADDR14_BRNTAKEN R_PPC = 9\u000a\u0009R_PPC_REL24           R_PPC = 10\u000a\u0009R_PPC_REL14           R_PPC = 11\u000a\u0009R_PPC_REL14_BRTAKEN   R_PPC = 12\u000a\u0009R_PPC_REL14_BRNTAKEN  R_PPC = 13\u000a\u0009R_PPC_GOT16           R_PPC = 14\u000a\u0009R_PPC_GOT16_LO        R_PPC = 15\u000a\u0009R_PPC_GOT16_HI        R_PPC = 16\u000a\u0009R_PPC_GOT16_HA        R_PPC = 17\u000a\u0009R_PPC_PLTREL24        R_PPC = 18\u000a\u0009R_PPC_COPY            R_PPC = 19\u000a\u0009R_PPC_GLOB_DAT        R_PPC = 20\u000a\u0009R_PPC_JMP_SLOT        R_PPC = 21\u000a\u0009R_PPC_RELATIVE        R_PPC = 22\u000a\u0009R_PPC_LOCAL24PC       R_PPC = 23\u000a\u0009R_PPC_UADDR32         R_PPC = 24\u000a\u0009R_PPC_UADDR16         R_PPC = 25\u000a\u0009R_PPC_REL32           R_PPC = 26\u000a\u0009R_PPC_PLT32           R_PPC = 27\u000a\u0009R_PPC_PLTREL32        R_PPC = 28\u000a\u0009R_PPC_PLT16_LO        R_PPC = 29\u000a\u0009R_PPC_PLT16_HI        R_PPC = 30\u000a\u0009R_PPC_PLT16_HA        R_PPC = 31\u000a\u0009R_PPC_SDAREL16        R_PPC = 32\u000a\u0009R_PPC_SECTOFF         R_PPC = 33\u000a\u0009R_PPC_SECTOFF_LO      R_PPC = 34\u000a\u0009R_PPC_SECTOFF_HI      R_PPC = 35\u000a\u0009R_PPC_SECTOFF_HA      R_PPC = 36\u000a\u0009R_PPC_TLS             R_PPC = 67\u000a\u0009R_PPC_DTPMOD32        R_PPC = 68\u000a\u0009R_PPC_TPREL16         R_PPC = 69\u000a\u0009R_PPC_TPREL16_LO      R_PPC = 70\u000a\u0009R_PPC_TPREL16_HI      R_PPC = 71\u000a\u0009R_PPC_TPREL16_HA      R_PPC = 72\u000a\u0009R_PPC_TPREL32         R_PPC = 73\u000a\u0009R_PPC_DTPREL16        R_PPC = 74\u000a\u0009R_PPC_DTPREL16_LO     R_PPC = 75\u000a\u0009R_PPC_DTPREL16_HI     R_PPC = 76\u000a\u0009R_PPC_DTPREL16_HA     R_PPC = 77\u000a\u0009R_PPC_DTPREL32        R_PPC = 78\u000a\u0009R_PPC_GOT_TLSGD16     R_PPC = 79\u000a\u0009R_PPC_GOT_TLSGD16_LO  R_PPC = 80\u000a\u0009R_PPC_GOT_TLSGD16_HI  R_PPC = 81\u000a\u0009R_PPC_GOT_TLSGD16_HA  R_PPC = 82\u000a\u0009R_PPC_GOT_TLSLD16     R_PPC = 83\u000a\u0009R_PPC_GOT_TLSLD16_LO  R_PPC = 84\u000a\u0009R_PPC_GOT_TLSLD16_HI  R_PPC = 85\u000a\u0009R_PPC_GOT_TLSLD16_HA  R_PPC = 86\u000a\u0009R_PPC_GOT_TPREL16     R_PPC = 87\u000a\u0009R_PPC_GOT_TPREL16_LO  R_PPC = 88\u000a\u0009R_PPC_GOT_TPREL16_HI  R_PPC = 89\u000a\u0009R_PPC_GOT_TPREL16_HA  R_PPC = 90\u000a\u0009R_PPC_EMB_NADDR32     R_PPC = 101\u000a\u0009R_PPC_EMB_NADDR16     R_PPC = 102\u000a\u0009R_PPC_EMB_NADDR16_LO  R_PPC = 103\u000a\u0009R_PPC_EMB_NADDR16_HI  R_PPC = 104\u000a\u0009R_PPC_EMB_NADDR16_HA  R_PPC = 105\u000a\u0009R_PPC_EMB_SDAI16      R_PPC = 106\u000a\u0009R_PPC_EMB_SDA2I16     R_PPC = 107\u000a\u0009R_PPC_EMB_SDA2REL     R_PPC = 108\u000a\u0009R_PPC_EMB_SDA21       R_PPC = 109\u000a\u0009R_PPC_EMB_MRKREF      R_PPC = 110\u000a\u0009R_PPC_EMB_RELSEC16    R_PPC = 111\u000a\u0009R_PPC_EMB_RELST_LO    R_PPC = 112\u000a\u0009R_PPC_EMB_RELST_HI    R_PPC = 113\u000a\u0009R_PPC_EMB_RELST_HA    R_PPC = 114\u000a\u0009R_PPC_EMB_BIT_FLD     R_PPC = 115\u000a\u0009R_PPC_EMB_RELSDA      R_PPC = 116\u000a)</pre>\u000a\u000a","names":["R_PPC_NONE","R_PPC_ADDR32","R_PPC_ADDR24","R_PPC_ADDR16","R_PPC_ADDR16_LO","R_PPC_ADDR16_HI","R_PPC_ADDR16_HA","R_PPC_ADDR14","R_PPC_ADDR14_BRTAKEN","R_PPC_ADDR14_BRNTAKEN","R_PPC_REL24","R_PPC_REL14","R_PPC_REL14_BRTAKEN","R_PPC_REL14_BRNTAKEN","R_PPC_GOT16","R_PPC_GOT16_LO","R_PPC_GOT16_HI","R_PPC_GOT16_HA","R_PPC_PLTREL24","R_PPC_COPY","R_PPC_GLOB_DAT","R_PPC_JMP_SLOT","R_PPC_RELATIVE","R_PPC_LOCAL24PC","R_PPC_UADDR32","R_PPC_UADDR16","R_PPC_REL32","R_PPC_PLT32","R_PPC_PLTREL32","R_PPC_PLT16_LO","R_PPC_PLT16_HI","R_PPC_PLT16_HA","R_PPC_SDAREL16","R_PPC_SECTOFF","R_PPC_SECTOFF_LO","R_PPC_SECTOFF_HI","R_PPC_SECTOFF_HA","R_PPC_TLS","R_PPC_DTPMOD32","R_PPC_TPREL16","R_PPC_TPREL16_LO","R_PPC_TPREL16_HI","R_PPC_TPREL16_HA","R_PPC_TPREL32","R_PPC_DTPREL16","R_PPC_DTPREL16_LO","R_PPC_DTPREL16_HI","R_PPC_DTPREL16_HA","R_PPC_DTPREL32","R_PPC_GOT_TLSGD16","R_PPC_GOT_TLSGD16_LO","R_PPC_GOT_TLSGD16_HI","R_PPC_GOT_TLSGD16_HA","R_PPC_GOT_TLSLD16","R_PPC_GOT_TLSLD16_LO","R_PPC_GOT_TLSLD16_HI","R_PPC_GOT_TLSLD16_HA","R_PPC_GOT_TPREL16","R_PPC_GOT_TPREL16_LO","R_PPC_GOT_TPREL16_HI","R_PPC_GOT_TPREL16_HA","R_PPC_EMB_NADDR32","R_PPC_EMB_NADDR16","R_PPC_EMB_NADDR16_LO","R_PPC_EMB_NADDR16_HI","R_PPC_EMB_NADDR16_HA","R_PPC_EMB_SDAI16","R_PPC_EMB_SDA2I16","R_PPC_EMB_SDA2REL","R_PPC_EMB_SDA21","R_PPC_EMB_MRKREF","R_PPC_EMB_RELSEC16","R_PPC_EMB_RELST_LO","R_PPC_EMB_RELST_HI","R_PPC_EMB_RELST_HA","R_PPC_EMB_BIT_FLD","R_PPC_EMB_RELSDA"],"type":"R_PPC"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_SPARC!\">R_SPARC</a></h2>\u000a<pre>const (\u000a\u0009R_SPARC_NONE     R_SPARC = 0\u000a\u0009R_SPARC_8        R_SPARC = 1\u000a\u0009R_SPARC_16       R_SPARC = 2\u000a\u0009R_SPARC_32       R_SPARC = 3\u000a\u0009R_SPARC_DISP8    R_SPARC = 4\u000a\u0009R_SPARC_DISP16   R_SPARC = 5\u000a\u0009R_SPARC_DISP32   R_SPARC = 6\u000a\u0009R_SPARC_WDISP30  R_SPARC = 7\u000a\u0009R_SPARC_WDISP22  R_SPARC = 8\u000a\u0009R_SPARC_HI22     R_SPARC = 9\u000a\u0009R_SPARC_22       R_SPARC = 10\u000a\u0009R_SPARC_13       R_SPARC = 11\u000a\u0009R_SPARC_LO10     R_SPARC = 12\u000a\u0009R_SPARC_GOT10    R_SPARC = 13\u000a\u0009R_SPARC_GOT13    R_SPARC = 14\u000a\u0009R_SPARC_GOT22    R_SPARC = 15\u000a\u0009R_SPARC_PC10     R_SPARC = 16\u000a\u0009R_SPARC_PC22     R_SPARC = 17\u000a\u0009R_SPARC_WPLT30   R_SPARC = 18\u000a\u0009R_SPARC_COPY     R_SPARC = 19\u000a\u0009R_SPARC_GLOB_DAT R_SPARC = 20\u000a\u0009R_SPARC_JMP_SLOT R_SPARC = 21\u000a\u0009R_SPARC_RELATIVE R_SPARC = 22\u000a\u0009R_SPARC_UA32     R_SPARC = 23\u000a\u0009R_SPARC_PLT32    R_SPARC = 24\u000a\u0009R_SPARC_HIPLT22  R_SPARC = 25\u000a\u0009R_SPARC_LOPLT10  R_SPARC = 26\u000a\u0009R_SPARC_PCPLT32  R_SPARC = 27\u000a\u0009R_SPARC_PCPLT22  R_SPARC = 28\u000a\u0009R_SPARC_PCPLT10  R_SPARC = 29\u000a\u0009R_SPARC_10       R_SPARC = 30\u000a\u0009R_SPARC_11       R_SPARC = 31\u000a\u0009R_SPARC_64       R_SPARC = 32\u000a\u0009R_SPARC_OLO10    R_SPARC = 33\u000a\u0009R_SPARC_HH22     R_SPARC = 34\u000a\u0009R_SPARC_HM10     R_SPARC = 35\u000a\u0009R_SPARC_LM22     R_SPARC = 36\u000a\u0009R_SPARC_PC_HH22  R_SPARC = 37\u000a\u0009R_SPARC_PC_HM10  R_SPARC = 38\u000a\u0009R_SPARC_PC_LM22  R_SPARC = 39\u000a\u0009R_SPARC_WDISP16  R_SPARC = 40\u000a\u0009R_SPARC_WDISP19  R_SPARC = 41\u000a\u0009R_SPARC_GLOB_JMP R_SPARC = 42\u000a\u0009R_SPARC_7        R_SPARC = 43\u000a\u0009R_SPARC_5        R_SPARC = 44\u000a\u0009R_SPARC_6        R_SPARC = 45\u000a\u0009R_SPARC_DISP64   R_SPARC = 46\u000a\u0009R_SPARC_PLT64    R_SPARC = 47\u000a\u0009R_SPARC_HIX22    R_SPARC = 48\u000a\u0009R_SPARC_LOX10    R_SPARC = 49\u000a\u0009R_SPARC_H44      R_SPARC = 50\u000a\u0009R_SPARC_M44      R_SPARC = 51\u000a\u0009R_SPARC_L44      R_SPARC = 52\u000a\u0009R_SPARC_REGISTER R_SPARC = 53\u000a\u0009R_SPARC_UA64     R_SPARC = 54\u000a\u0009R_SPARC_UA16     R_SPARC = 55\u000a)</pre>\u000a\u000a","names":["R_SPARC_NONE","R_SPARC_8","R_SPARC_16","R_SPARC_32","R_SPARC_DISP8","R_SPARC_DISP16","R_SPARC_DISP32","R_SPARC_WDISP30","R_SPARC_WDISP22","R_SPARC_HI22","R_SPARC_22","R_SPARC_13","R_SPARC_LO10","R_SPARC_GOT10","R_SPARC_GOT13","R_SPARC_GOT22","R_SPARC_PC10","R_SPARC_PC22","R_SPARC_WPLT30","R_SPARC_COPY","R_SPARC_GLOB_DAT","R_SPARC_JMP_SLOT","R_SPARC_RELATIVE","R_SPARC_UA32","R_SPARC_PLT32","R_SPARC_HIPLT22","R_SPARC_LOPLT10","R_SPARC_PCPLT32","R_SPARC_PCPLT22","R_SPARC_PCPLT10","R_SPARC_10","R_SPARC_11","R_SPARC_64","R_SPARC_OLO10","R_SPARC_HH22","R_SPARC_HM10","R_SPARC_LM22","R_SPARC_PC_HH22","R_SPARC_PC_HM10","R_SPARC_PC_LM22","R_SPARC_WDISP16","R_SPARC_WDISP19","R_SPARC_GLOB_JMP","R_SPARC_7","R_SPARC_5","R_SPARC_6","R_SPARC_DISP64","R_SPARC_PLT64","R_SPARC_HIX22","R_SPARC_LOX10","R_SPARC_H44","R_SPARC_M44","R_SPARC_L44","R_SPARC_REGISTER","R_SPARC_UA64","R_SPARC_UA16"],"type":"R_SPARC"},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ARM_MAGIC_TRAMP_NUMBER!\">ARM_MAGIC_TRAMP_NUMBER</a></h2>\u000a<pre>const ARM_MAGIC_TRAMP_NUMBER = 0x5c000003</pre>\u000a<p>\u000aMagic number for the elf trampoline, chosen wisely to be an immediate value.\u000a</p>\u000a\u000a","names":["ARM_MAGIC_TRAMP_NUMBER"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Sym32Size!\">Sym32Size</a></h2>\u000a<pre>const Sym32Size = 16</pre>\u000a\u000a","names":["Sym32Size"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Sym64Size!\">Sym64Size</a></h2>\u000a<pre>const Sym64Size = 24</pre>\u000a\u000a","names":["Sym64Size"],"type":""}],"vars":[]}