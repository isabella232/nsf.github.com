var gowtfData = {"index":"index.html","html":"<p>\u000aThe flag package implements command-line flag parsing.\u000a</p>\u000a<p>\u000aUsage:\u000a</p>\u000a<p>\u000a1) Define flags using flag.String(), Bool(), Int(), etc. Example:\u000a</p>\u000a<pre>import &#34;flag&#34;\u000avar ip *int = flag.Int(&#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)\u000a</pre>\u000a<p>\u000aIf you like, you can bind the flag to a variable using the Var() functions.\u000a</p>\u000a<pre>var flagvar int\u000afunc init() {\u000a\u0009flag.IntVar(&amp;flagvar, &#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)\u000a}\u000a</pre>\u000a<p>\u000aOr you can create custom flags that satisfy the Value interface (with\u000apointer receivers) and couple them to flag parsing by\u000a</p>\u000a<pre>flag.Var(&amp;flagVal, &#34;name&#34;, &#34;help message for flagname&#34;)\u000a</pre>\u000a<p>\u000aFor such flags, the default value is just the initial value of the variable.\u000a</p>\u000a<p>\u000a2) After all flags are defined, call\u000a</p>\u000a<pre>flag.Parse()\u000a</pre>\u000a<p>\u000ato parse the command line into the defined flags.\u000a</p>\u000a<p>\u000a3) Flags may then be used directly. If you&#39;re using the flags themselves,\u000athey are all pointers; if you bind to variables, they&#39;re values.\u000a</p>\u000a<pre>fmt.Println(&#34;ip has value &#34;, *ip);\u000afmt.Println(&#34;flagvar has value &#34;, flagvar);\u000a</pre>\u000a<p>\u000a4) After parsing, flag.Arg(i) is the i&#39;th argument after the flags.\u000aArgs are indexed from 0 up to flag.NArg().\u000a</p>\u000a<p>\u000aCommand line flag syntax:\u000a</p>\u000a<pre>-flag\u000a-flag=x\u000a-flag x  // non-boolean flags only\u000a</pre>\u000a<p>\u000aOne or two minus signs may be used; they are equivalent.\u000aThe last form is not permitted for boolean flags because the\u000ameaning of the command\u000a</p>\u000a<pre>cmd -x *\u000a</pre>\u000a<p>\u000awill change if there is a file called 0, false, etc.  You must\u000ause the -flag=false form to turn off a boolean flag.\u000a</p>\u000a<p>\u000aFlag parsing stops just before the first non-flag argument\u000a(&#34;-&#34; is a non-flag argument) or after the terminator &#34;--&#34;.\u000a</p>\u000a<p>\u000aInteger flags accept 1234, 0664, 0x1234 and may be negative.\u000aBoolean flags may be 1, 0, t, f, true, false, TRUE, FALSE, True, False.\u000a</p>\u000a","name":"flag","filenames":["/home/nsf/go/src/pkg/flag/flag.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Flag!\">Flag</a></h2>\u000a<pre>type Flag struct {\u000a\u0009Name     string // name as it appears on command line\u000a\u0009Usage    string // help message\u000a\u0009Value    Value  // value as set\u000a\u0009DefValue string // default value (as text); for usage message\u000a}</pre>\u000a<p>\u000aA Flag represents the state of a flag.\u000a</p>\u000a\u000a","name":"Flag","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Value!\">Value</a></h2>\u000a<pre>type Value interface {\u000a\u0009String() string\u000a\u0009Set(string) bool\u000a}</pre>\u000a<p>\u000aValue is the interface to the dynamic value stored in a flag.\u000a(The default value is represented as a string.)\u000a</p>\u000a\u000a","name":"Value","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Arg!\">Arg</a></h2>\u000a<code>func Arg(i int) string</code>\u000a<p>\u000aArg returns the i&#39;th command-line argument.  Arg(0) is the first remaining argument\u000aafter flags have been processed.\u000a</p>\u000a\u000a","name":"Arg"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Args!\">Args</a></h2>\u000a<code>func Args() []string</code>\u000a<p>\u000aArgs returns the non-flag command-line arguments.\u000a</p>\u000a\u000a","name":"Args"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Bool!\">Bool</a></h2>\u000a<code>func Bool(name string, value bool, usage string) *bool</code>\u000a<p>\u000aBool defines a bool flag with specified name, default value, and usage string.\u000aThe return value is the address of a bool variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"Bool"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:BoolVar!\">BoolVar</a></h2>\u000a<code>func BoolVar(p *bool, name string, value bool, usage string)</code>\u000a<p>\u000aBoolVar defines a bool flag with specified name, default value, and usage string.\u000aThe argument p points to a bool variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"BoolVar"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float!\">Float</a></h2>\u000a<code>func Float(name string, value float, usage string) *float</code>\u000a<p>\u000aFloat defines a float flag with specified name, default value, and usage string.\u000aThe return value is the address of a float variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"Float"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64!\">Float64</a></h2>\u000a<code>func Float64(name string, value float64, usage string) *float64</code>\u000a<p>\u000aFloat64 defines a float64 flag with specified name, default value, and usage string.\u000aThe return value is the address of a float64 variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"Float64"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64Var!\">Float64Var</a></h2>\u000a<code>func Float64Var(p *float64, name string, value float64, usage string)</code>\u000a<p>\u000aFloat64Var defines a float64 flag with specified name, default value, and usage string.\u000aThe argument p points to a float64 variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"Float64Var"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:FloatVar!\">FloatVar</a></h2>\u000a<code>func FloatVar(p *float, name string, value float, usage string)</code>\u000a<p>\u000aFloatVar defines a float flag with specified name, default value, and usage string.\u000aThe argument p points to a float variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"FloatVar"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int!\">Int</a></h2>\u000a<code>func Int(name string, value int, usage string) *int</code>\u000a<p>\u000aInt defines an int flag with specified name, default value, and usage string.\u000aThe return value is the address of an int variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"Int"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int64!\">Int64</a></h2>\u000a<code>func Int64(name string, value int64, usage string) *int64</code>\u000a<p>\u000aInt64 defines an int64 flag with specified name, default value, and usage string.\u000aThe return value is the address of an int64 variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"Int64"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int64Var!\">Int64Var</a></h2>\u000a<code>func Int64Var(p *int64, name string, value int64, usage string)</code>\u000a<p>\u000aInt64Var defines an int64 flag with specified name, default value, and usage string.\u000aThe argument p points to an int64 variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"Int64Var"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IntVar!\">IntVar</a></h2>\u000a<code>func IntVar(p *int, name string, value int, usage string)</code>\u000a<p>\u000aIntVar defines an int flag with specified name, default value, and usage string.\u000aThe argument p points to an int variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"IntVar"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Lookup!\">Lookup</a></h2>\u000a<code>func Lookup(name string) *Flag</code>\u000a<p>\u000aLookup returns the Flag structure of the named flag, returning nil if none exists.\u000a</p>\u000a\u000a","name":"Lookup"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NArg!\">NArg</a></h2>\u000a<code>func NArg() int</code>\u000a<p>\u000aNArg is the number of arguments remaining after flags have been processed.\u000a</p>\u000a\u000a","name":"NArg"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NFlag!\">NFlag</a></h2>\u000a<code>func NFlag() int</code>\u000a\u000a","name":"NFlag"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Parse!\">Parse</a></h2>\u000a<code>func Parse()</code>\u000a<p>\u000aParse parses the command-line flags.  Must be called after all flags are defined\u000aand before any are accessed by the program.\u000a</p>\u000a\u000a","name":"Parse"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ParseForTesting!\">ParseForTesting</a></h2>\u000a<code>func ParseForTesting(args []string) (result bool)</code>\u000a<p>\u000aParseForTesting parses the flag state using the provided arguments. It\u000ashould be called after 1) ResetForTesting and 2) setting up the new flags.\u000aThe return value reports whether the parse was error-free.\u000aFor testing only!\u000a</p>\u000a\u000a","name":"ParseForTesting"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:PrintDefaults!\">PrintDefaults</a></h2>\u000a<code>func PrintDefaults()</code>\u000a<p>\u000aPrintDefaults prints to standard error the default values of all defined flags.\u000a</p>\u000a\u000a","name":"PrintDefaults"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ResetForTesting!\">ResetForTesting</a></h2>\u000a<code>func ResetForTesting(usage func())</code>\u000a<p>\u000aResetForTesting clears all flag state and sets the usage function as directed.\u000aAfter calling ResetForTesting, parse errors in flag handling will panic rather\u000athan exit the program.\u000aFor testing only!\u000a</p>\u000a\u000a","name":"ResetForTesting"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Set!\">Set</a></h2>\u000a<code>func Set(name, value string) bool</code>\u000a<p>\u000aSet sets the value of the named flag.  It returns true if the set succeeded; false if\u000athere is no such flag defined.\u000a</p>\u000a\u000a","name":"Set"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:String!\">String</a></h2>\u000a<code>func String(name, value string, usage string) *string</code>\u000a<p>\u000aString defines a string flag with specified name, default value, and usage string.\u000aThe return value is the address of a string variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"String"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:StringVar!\">StringVar</a></h2>\u000a<code>func StringVar(p *string, name, value string, usage string)</code>\u000a<p>\u000aStringVar defines a string flag with specified name, default value, and usage string.\u000aThe argument p points to a string variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"StringVar"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Uint!\">Uint</a></h2>\u000a<code>func Uint(name string, value uint, usage string) *uint</code>\u000a<p>\u000aUint defines a uint flag with specified name, default value, and usage string.\u000aThe return value is the address of a uint variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"Uint"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Uint64!\">Uint64</a></h2>\u000a<code>func Uint64(name string, value uint64, usage string) *uint64</code>\u000a<p>\u000aUint64 defines a uint64 flag with specified name, default value, and usage string.\u000aThe return value is the address of a uint64 variable that stores the value of the flag.\u000a</p>\u000a\u000a","name":"Uint64"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Uint64Var!\">Uint64Var</a></h2>\u000a<code>func Uint64Var(p *uint64, name string, value uint64, usage string)</code>\u000a<p>\u000aUint64Var defines a uint64 flag with specified name, default value, and usage string.\u000aThe argument p points to a uint64 variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"Uint64Var"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:UintVar!\">UintVar</a></h2>\u000a<code>func UintVar(p *uint, name string, value uint, usage string)</code>\u000a<p>\u000aUintVar defines a uint flag with specified name, default value, and usage string.\u000aThe argument p points to a uint variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"UintVar"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Var!\">Var</a></h2>\u000a<code>func Var(value Value, name string, usage string)</code>\u000a<p>\u000aVar defines a user-typed flag with specified name, default value, and usage string.\u000aThe argument p points to a Value variable in which to store the value of the flag.\u000a</p>\u000a\u000a","name":"Var"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Visit!\">Visit</a></h2>\u000a<code>func Visit(fn func(*Flag))</code>\u000a<p>\u000aVisit visits the flags, calling fn for each. It visits only those flags that have been set.\u000a</p>\u000a\u000a","name":"Visit"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:VisitAll!\">VisitAll</a></h2>\u000a<code>func VisitAll(fn func(*Flag))</code>\u000a<p>\u000aVisitAll visits the flags, calling fn for each. It visits all flags, even those not set.\u000a</p>\u000a\u000a","name":"VisitAll"}],"consts":[],"vars":[{"html":"\u000a<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:Usage!\">Usage</a></h2>\u000a<pre>var Usage = func() {\u000a\u0009fmt.Fprintf(os.Stderr, &#34;Usage of %s:\\n&#34;, os.Args[0])\u000a\u0009PrintDefaults()\u000a}</pre>\u000a<p>\u000aUsage prints to standard error a default usage message documenting all defined flags.\u000aThe function is a variable that may be changed to point to a custom function.\u000a</p>\u000a\u000a","names":["Usage"],"type":""}]}