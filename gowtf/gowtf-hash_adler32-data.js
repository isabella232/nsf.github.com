var gowtfData = {"html":"<p>\u000aThis package implements the Adler-32 checksum.\u000aDefined in RFC 1950:\u000a</p>\u000a<pre>Adler-32 is composed of two sums accumulated per byte: s1 is\u000athe sum of all bytes, s2 is the sum of all s1 values. Both sums\u000aare done modulo 65521. s1 is initialized to 1, s2 to zero.  The\u000aAdler-32 checksum is stored as s2*65536 + s1 in most-\u000asignificant-byte first (network) order.\u000a</pre>\u000a","name":"adler32","filenames":["/home/nsf/go/src/pkg/hash/adler32/adler32.go"],"types":[],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Checksum!\">Checksum</a></h2>\u000a<code>func Checksum(data []byte) uint32</code>\u000a<p>\u000aChecksum returns the Adler-32 checksum of data.\u000a</p>\u000a\u000a","name":"Checksum"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:New!\">New</a></h2>\u000a<code>func New() hash.Hash32</code>\u000a<p>\u000aNew returns a new hash.Hash32 computing the Adler-32 checksum.\u000a</p>\u000a\u000a","name":"New"}],"consts":[{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Size!\">Size</a></h2>\u000a<pre>const Size = 4</pre>\u000a<p>\u000aThe size of an Adler-32 checksum in bytes.\u000a</p>\u000a\u000a","names":["Size"],"type":""}],"vars":[]}