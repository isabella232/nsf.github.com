var gowtfData = {"index":"index.html","html":"<p>\u000aThe mime package implements parts of the MIME spec.\u000a</p>\u000a","name":"mime","filenames":["/home/nsf/go/src/pkg/mime/type.go","/home/nsf/go/src/pkg/mime/mediatype.go","/home/nsf/go/src/pkg/mime/grammar.go"],"types":[],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:AddExtensionType!\">AddExtensionType</a></h2>\u000a<code>func AddExtensionType(ext, typ string) os.Error</code>\u000a<p>\u000aAddExtensionType sets the MIME type associated with\u000athe extension ext to typ.  The extension should begin with\u000aa leading dot, as in &#34;.html&#34;.\u000a</p>\u000a\u000a","name":"AddExtensionType"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IsQText!\">IsQText</a></h2>\u000a<code>func IsQText(rune int) bool</code>\u000a<p>\u000aIsQText returns true if rune is in &#39;qtext&#39; as defined by RFC 822.\u000a</p>\u000a\u000a","name":"IsQText"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IsTokenChar!\">IsTokenChar</a></h2>\u000a<code>func IsTokenChar(rune int) bool</code>\u000a<p>\u000aIsTokenChar returns true if rune is in &#39;token&#39; as defined by RFC\u000a1531 and RFC 2045.\u000a</p>\u000a\u000a","name":"IsTokenChar"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ParseMediaType!\">ParseMediaType</a></h2>\u000a<code>func ParseMediaType(v string) (mediatype string, params map[string]string)</code>\u000a<p>\u000aParseMediaType parses a media type value and any optional\u000aparameters, per RFC 1531.  Media types are the values in\u000aContent-Type and Content-Disposition headers (RFC 2183).  On\u000asuccess, ParseMediaType returns the media type converted to\u000alowercase and trimmed of white space and a non-nil params.  On\u000aerror, it returns an empty string and a nil params.\u000a</p>\u000a\u000a","name":"ParseMediaType"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:TypeByExtension!\">TypeByExtension</a></h2>\u000a<code>func TypeByExtension(ext string) string</code>\u000a<p>\u000aTypeByExtension returns the MIME type associated with the file extension ext.\u000aThe extension ext should begin with a leading dot, as in &#34;.html&#34;.\u000aWhen ext has no associated type, TypeByExtension returns &#34;&#34;.\u000a</p>\u000a<p>\u000aThe built-in table is small but is is augmented by the local\u000asystem&#39;s mime.types file(s) if available under one or more of these\u000anames:\u000a</p>\u000a<pre>/etc/mime.types\u000a/etc/apache2/mime.types\u000a/etc/apache/mime.types\u000a</pre>\u000a\u000a","name":"TypeByExtension"}],"consts":[],"vars":[]}