var gowtfData = {"index":"index.html","html":"<p>\u000aThe printer package implements printing of AST nodes.\u000a</p>\u000a","name":"printer","filenames":["/home/nsf/go/src/pkg/go/printer/nodes.go","/home/nsf/go/src/pkg/go/printer/printer.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Config!\">Config</a></h2>\u000a<pre>type Config struct {\u000a\u0009Mode     uint   // default: 0\u000a\u0009Tabwidth int    // default: 8\u000a\u0009Styler   Styler // default: nil\u000a}</pre>\u000a<p>\u000aA Config node controls the output of Fprint.\u000a</p>\u000a\u000a","name":"Config","methods":[{"html":"\u000a<h2><a class=\"black\" href=\"?m:Config\">func (*Config)</a> <a href=\"?m:Config.Fprint!\">Fprint</a></h2>\u000a<code>func (cfg *Config) Fprint(output io.Writer, node interface{}) (int, os.Error)</code>\u000a<p>\u000aFprint &#34;pretty-prints&#34; an AST node to output and returns the number\u000aof bytes written and an error (if any) for a given configuration cfg.\u000aThe node type must be *ast.File, or assignment-compatible to ast.Expr,\u000aast.Decl, ast.Spec, or ast.Stmt.\u000a</p>\u000a\u000a","name":"Fprint"}]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:HTMLTag!\">HTMLTag</a></h2>\u000a<pre>type HTMLTag struct {\u000a\u0009Start, End string // empty if tags are absent\u000a}</pre>\u000a<p>\u000aAn HTMLTag specifies a start and end tag.\u000a</p>\u000a\u000a","name":"HTMLTag","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Styler!\">Styler</a></h2>\u000a<pre>type Styler interface {\u000a\u0009LineTag(line int) ([]byte, HTMLTag)\u000a\u0009Comment(c *ast.Comment, line []byte) ([]byte, HTMLTag)\u000a\u0009BasicLit(x *ast.BasicLit) ([]byte, HTMLTag)\u000a\u0009Ident(id *ast.Ident) ([]byte, HTMLTag)\u000a\u0009Token(tok token.Token) ([]byte, HTMLTag)\u000a}</pre>\u000a<p>\u000aA Styler specifies formatting of line tags and elementary Go words.\u000aA format consists of text and a (possibly empty) surrounding HTML tag.\u000a</p>\u000a\u000a","name":"Styler","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Fprint!\">Fprint</a></h2>\u000a<code>func Fprint(output io.Writer, node interface{}) os.Error</code>\u000a<p>\u000aFprint &#34;pretty-prints&#34; an AST node to output.\u000aIt calls Config.Fprint with default settings.\u000a</p>\u000a\u000a","name":"Fprint"}],"consts":[{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:GenHTML!\"><em>group</em></a></h2>\u000a<pre>const (\u000a\u0009GenHTML   uint = 1 &lt;&lt; iota // generate HTML\u000a\u0009RawFormat                  // do not use a tabwriter; if set, UseSpaces is ignored\u000a\u0009TabIndent                  // use tabs for indentation independent of UseSpaces\u000a\u0009UseSpaces                  // use spaces instead of tabs for alignment\u000a)</pre>\u000a<p>\u000aGeneral printing is controlled with these Config.Mode flags.\u000a</p>\u000a\u000a","names":["GenHTML","RawFormat","TabIndent","UseSpaces"],"type":""}],"vars":[]}