var gowtfData = {"index":"index.html","html":"<p>\u000aThe math package provides basic constants and mathematical functions.\u000a</p>\u000a","name":"math","filenames":["/home/nsf/go/src/pkg/math/erf.go","/home/nsf/go/src/pkg/math/sinh.go","/home/nsf/go/src/pkg/math/fmod_decl.go","/home/nsf/go/src/pkg/math/jn.go","/home/nsf/go/src/pkg/math/tan_decl.go","/home/nsf/go/src/pkg/math/gamma.go","/home/nsf/go/src/pkg/math/logb.go","/home/nsf/go/src/pkg/math/hypot_decl.go","/home/nsf/go/src/pkg/math/acosh.go","/home/nsf/go/src/pkg/math/frexp_decl.go","/home/nsf/go/src/pkg/math/expm1_decl.go","/home/nsf/go/src/pkg/math/atanh.go","/home/nsf/go/src/pkg/math/bits.go","/home/nsf/go/src/pkg/math/exp_decl.go","/home/nsf/go/src/pkg/math/sqrt_port.go","/home/nsf/go/src/pkg/math/cbrt.go","/home/nsf/go/src/pkg/math/log10_decl.go","/home/nsf/go/src/pkg/math/pow.go","/home/nsf/go/src/pkg/math/copysign.go","/home/nsf/go/src/pkg/math/j0.go","/home/nsf/go/src/pkg/math/unsafe.go","/home/nsf/go/src/pkg/math/exp2_decl.go","/home/nsf/go/src/pkg/math/const.go","/home/nsf/go/src/pkg/math/signbit.go","/home/nsf/go/src/pkg/math/asinh.go","/home/nsf/go/src/pkg/math/sin_decl.go","/home/nsf/go/src/pkg/math/lgamma.go","/home/nsf/go/src/pkg/math/fabs_decl.go","/home/nsf/go/src/pkg/math/sqrt_decl.go","/home/nsf/go/src/pkg/math/fdim.go","/home/nsf/go/src/pkg/math/tanh.go","/home/nsf/go/src/pkg/math/log1p_decl.go","/home/nsf/go/src/pkg/math/sincos_decl.go","/home/nsf/go/src/pkg/math/log_decl.go","/home/nsf/go/src/pkg/math/j1.go","/home/nsf/go/src/pkg/math/ldexp_decl.go","/home/nsf/go/src/pkg/math/nextafter.go","/home/nsf/go/src/pkg/math/floor_decl.go","/home/nsf/go/src/pkg/math/modf_decl.go","/home/nsf/go/src/pkg/math/atan2_decl.go","/home/nsf/go/src/pkg/math/asin_decl.go","/home/nsf/go/src/pkg/math/atan_decl.go","/home/nsf/go/src/pkg/math/hypot_port.go","/home/nsf/go/src/pkg/math/remainder_decl.go","/home/nsf/go/src/pkg/math/pow10.go"],"types":[],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Acos!\">Acos</a></h2>\u000a<code>func Acos(x float64) float64</code>\u000a\u000a","name":"Acos"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Acosh!\">Acosh</a></h2>\u000a<code>func Acosh(x float64) float64</code>\u000a<p>\u000aAcosh(x) calculates the inverse hyperbolic cosine of x.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Acosh(x) = NaN if x &lt; 1\u000aAcosh(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Acosh"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Asin!\">Asin</a></h2>\u000a<code>func Asin(x float64) float64</code>\u000a\u000a","name":"Asin"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Asinh!\">Asinh</a></h2>\u000a<code>func Asinh(x float64) float64</code>\u000a<p>\u000aAsinh(x) calculates the inverse hyperbolic sine of x.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Asinh(+Inf) = +Inf\u000aAsinh(-Inf) = -Inf\u000aAsinh(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Asinh"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Atan!\">Atan</a></h2>\u000a<code>func Atan(x float64) float64</code>\u000a\u000a","name":"Atan"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Atan2!\">Atan2</a></h2>\u000a<code>func Atan2(y, x float64) float64</code>\u000a\u000a","name":"Atan2"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Atanh!\">Atanh</a></h2>\u000a<code>func Atanh(x float64) float64</code>\u000a<p>\u000aAtanh(x) calculates the inverse hyperbolic tangent of x.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Atanh(x) = NaN if x &lt; -1 or x &gt; 1\u000aAtanh(1) = +Inf\u000aAtanh(-1) = -Inf\u000aAtanh(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Atanh"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Cbrt!\">Cbrt</a></h2>\u000a<code>func Cbrt(x float64) float64</code>\u000a<p>\u000aCbrt returns the cube root of its argument.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Cbrt(±0) = ±0\u000aCbrt(±Inf) = ±Inf\u000aCbrt(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Cbrt"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Ceil!\">Ceil</a></h2>\u000a<code>func Ceil(x float64) float64</code>\u000a\u000a","name":"Ceil"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Copysign!\">Copysign</a></h2>\u000a<code>func Copysign(x, y float64) float64</code>\u000a<p>\u000aCopysign(x, y) returns a value with the magnitude\u000aof x and the sign of y.\u000a</p>\u000a\u000a","name":"Copysign"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Cos!\">Cos</a></h2>\u000a<code>func Cos(x float64) float64</code>\u000a\u000a","name":"Cos"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Cosh!\">Cosh</a></h2>\u000a<code>func Cosh(x float64) float64</code>\u000a<p>\u000aCosh returns the hyperbolic cosine of x.\u000a</p>\u000a\u000a","name":"Cosh"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Erf!\">Erf</a></h2>\u000a<code>func Erf(x float64) float64</code>\u000a<p>\u000aErf(x) returns the error function of x.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Erf(+Inf) = 1\u000aErf(-Inf) = -1\u000aErf(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Erf"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Erfc!\">Erfc</a></h2>\u000a<code>func Erfc(x float64) float64</code>\u000a<p>\u000aErfc(x) returns the complementary error function of x.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Erfc(+Inf) = 0\u000aErfc(-Inf) = 2\u000aErfc(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Erfc"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Exp!\">Exp</a></h2>\u000a<code>func Exp(x float64) float64</code>\u000a\u000a","name":"Exp"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Exp2!\">Exp2</a></h2>\u000a<code>func Exp2(x float64) float64</code>\u000a\u000a","name":"Exp2"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Expm1!\">Expm1</a></h2>\u000a<code>func Expm1(x float64) float64</code>\u000a\u000a","name":"Expm1"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Fabs!\">Fabs</a></h2>\u000a<code>func Fabs(x float64) float64</code>\u000a\u000a","name":"Fabs"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Fdim!\">Fdim</a></h2>\u000a<code>func Fdim(x, y float64) float64</code>\u000a<p>\u000aFdim returns the maximum of x-y or 0.\u000a</p>\u000a\u000a","name":"Fdim"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float32bits!\">Float32bits</a></h2>\u000a<code>func Float32bits(f float32) uint32</code>\u000a<p>\u000aFloat32bits returns the IEEE 754 binary representation of f.\u000a</p>\u000a\u000a","name":"Float32bits"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float32frombits!\">Float32frombits</a></h2>\u000a<code>func Float32frombits(b uint32) float32</code>\u000a<p>\u000aFloat32frombits returns the floating point number corresponding\u000ato the IEEE 754 binary representation b.\u000a</p>\u000a\u000a","name":"Float32frombits"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64bits!\">Float64bits</a></h2>\u000a<code>func Float64bits(f float64) uint64</code>\u000a<p>\u000aFloat64bits returns the IEEE 754 binary representation of f.\u000a</p>\u000a\u000a","name":"Float64bits"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64frombits!\">Float64frombits</a></h2>\u000a<code>func Float64frombits(b uint64) float64</code>\u000a<p>\u000aFloat64frombits returns the floating point number corresponding\u000athe IEEE 754 binary representation b.\u000a</p>\u000a\u000a","name":"Float64frombits"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Floor!\">Floor</a></h2>\u000a<code>func Floor(x float64) float64</code>\u000a\u000a","name":"Floor"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Fmax!\">Fmax</a></h2>\u000a<code>func Fmax(x, y float64) float64</code>\u000a<p>\u000aFmax returns the larger of x or y.\u000a</p>\u000a\u000a","name":"Fmax"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Fmin!\">Fmin</a></h2>\u000a<code>func Fmin(x, y float64) float64</code>\u000a<p>\u000aFmin returns the smaller of x or y.\u000a</p>\u000a\u000a","name":"Fmin"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Fmod!\">Fmod</a></h2>\u000a<code>func Fmod(x, y float64) float64</code>\u000a\u000a","name":"Fmod"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Frexp!\">Frexp</a></h2>\u000a<code>func Frexp(x float64) (f float64, e int)</code>\u000a\u000a","name":"Frexp"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Gamma!\">Gamma</a></h2>\u000a<code>func Gamma(x float64) float64</code>\u000a<p>\u000aGamma(x) returns the Gamma function of x.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Gamma(Inf) = Inf\u000aGamma(-Inf) = -Inf\u000aGamma(NaN) = NaN\u000a</pre>\u000a<p>\u000aLarge values overflow to +Inf.\u000aNegative integer values equal ±Inf.\u000a</p>\u000a\u000a","name":"Gamma"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Hypot!\">Hypot</a></h2>\u000a<code>func Hypot(x, y float64) float64</code>\u000a\u000a","name":"Hypot"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Ilogb!\">Ilogb</a></h2>\u000a<code>func Ilogb(x float64) int</code>\u000a<p>\u000aIlogb(x) returns the binary exponent of non-zero x as an integer.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Ilogb(±Inf) = MaxInt32\u000aIlogb(0) = MinInt32\u000aIlogb(NaN) = MaxInt32\u000a</pre>\u000a\u000a","name":"Ilogb"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Inf!\">Inf</a></h2>\u000a<code>func Inf(sign int) float64</code>\u000a<p>\u000aInf returns positive infinity if sign &gt;= 0, negative infinity if sign &lt; 0.\u000a</p>\u000a\u000a","name":"Inf"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IsInf!\">IsInf</a></h2>\u000a<code>func IsInf(f float64, sign int) bool</code>\u000a<p>\u000aIsInf returns whether f is an infinity, according to sign.\u000aIf sign &gt; 0, IsInf returns whether f is positive infinity.\u000aIf sign &lt; 0, IsInf returns whether f is negative infinity.\u000aIf sign == 0, IsInf returns whether f is either infinity.\u000a</p>\u000a\u000a","name":"IsInf"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IsNaN!\">IsNaN</a></h2>\u000a<code>func IsNaN(f float64) (is bool)</code>\u000a<p>\u000aIsNaN returns whether f is an IEEE 754 &ldquo;not-a-number&rdquo; value.\u000a</p>\u000a\u000a","name":"IsNaN"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:J0!\">J0</a></h2>\u000a<code>func J0(x float64) float64</code>\u000a<p>\u000aJ0 returns the order-zero Bessel function of the first kind.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>J0(±Inf) = 0\u000aJ0(0) = 1\u000aJ0(NaN) = NaN\u000a</pre>\u000a\u000a","name":"J0"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:J1!\">J1</a></h2>\u000a<code>func J1(x float64) float64</code>\u000a<p>\u000aJ1 returns the order-one Bessel function of the first kind.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>J1(±Inf) = 0\u000aJ1(NaN) = NaN\u000a</pre>\u000a\u000a","name":"J1"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Jn!\">Jn</a></h2>\u000a<code>func Jn(n int, x float64) float64</code>\u000a<p>\u000aJn returns the order-n Bessel function of the first kind.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Jn(n, ±Inf) = 0\u000aJn(n, NaN) = NaN\u000a</pre>\u000a\u000a","name":"Jn"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Ldexp!\">Ldexp</a></h2>\u000a<code>func Ldexp(f float64, e int) float64</code>\u000a\u000a","name":"Ldexp"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Lgamma!\">Lgamma</a></h2>\u000a<code>func Lgamma(x float64) (lgamma float64, sign int)</code>\u000a<p>\u000aLgamma returns the natural logarithm and sign (-1 or +1) of Gamma(x).\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Lgamma(+Inf) = +Inf\u000aLgamma(0) = +Inf\u000aLgamma(-integer) = +Inf\u000aLgamma(-Inf) = -Inf\u000aLgamma(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Lgamma"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Log!\">Log</a></h2>\u000a<code>func Log(x float64) float64</code>\u000a\u000a","name":"Log"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Log10!\">Log10</a></h2>\u000a<code>func Log10(x float64) float64</code>\u000a\u000a","name":"Log10"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Log1p!\">Log1p</a></h2>\u000a<code>func Log1p(x float64) float64</code>\u000a\u000a","name":"Log1p"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Log2!\">Log2</a></h2>\u000a<code>func Log2(x float64) float64</code>\u000a\u000a","name":"Log2"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Logb!\">Logb</a></h2>\u000a<code>func Logb(x float64) float64</code>\u000a<p>\u000aLogb(x) returns the binary exponent of non-zero x.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Logb(±Inf) = +Inf\u000aLogb(0) = -Inf\u000aLogb(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Logb"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Modf!\">Modf</a></h2>\u000a<code>func Modf(f float64) (int float64, frac float64)</code>\u000a\u000a","name":"Modf"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NaN!\">NaN</a></h2>\u000a<code>func NaN() float64</code>\u000a<p>\u000aNaN returns an IEEE 754 &ldquo;not-a-number&rdquo; value.\u000a</p>\u000a\u000a","name":"NaN"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Nextafter!\">Nextafter</a></h2>\u000a<code>func Nextafter(x, y float64) (r float64)</code>\u000a<p>\u000aNextafter returns the next representable value after x towards y.\u000aIf x == y, then x is returned.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Nextafter(NaN, y) = NaN\u000aNextafter(x, NaN) = NaN\u000a</pre>\u000a\u000a","name":"Nextafter"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Pow!\">Pow</a></h2>\u000a<code>func Pow(x, y float64) float64</code>\u000a<p>\u000aPow returns x**y, the base-x exponential of y.\u000a</p>\u000a<p>\u000aSpecial cases are (in order):\u000a</p>\u000a<pre>Pow(x, ±0) = 1 for any x\u000aPow(1, y) = 1 for any y\u000aPow(x, 1) = x for any x\u000aPow(NaN, y) = NaN\u000aPow(x, NaN) = NaN\u000aPow(±0, y) = ±Inf for y an odd integer &lt; 0\u000aPow(±0, -Inf) = +Inf\u000aPow(±0, +Inf) = +0\u000aPow(±0, y) = +Inf for finite y &lt; 0 and not an odd integer\u000aPow(±0, y) = ±0 for y an odd integer &gt; 0\u000aPow(±0, y) = +0 for finite y &gt; 0 and not an odd integer\u000aPow(-1, ±Inf) = 1\u000aPow(x, +Inf) = +Inf for |x| &gt; 1\u000aPow(x, -Inf) = +0 for |x| &gt; 1\u000aPow(x, +Inf) = +0 for |x| &lt; 1\u000aPow(x, -Inf) = +Inf for |x| &lt; 1\u000aPow(+Inf, y) = +Inf for y &gt; 0\u000aPow(+Inf, y) = +0 for y &lt; 0\u000aPow(-Inf, y) = Pow(-0, -y)\u000aPow(x, y) = NaN for finite x &lt; 0 and finite non-integer y\u000a</pre>\u000a\u000a","name":"Pow"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Pow10!\">Pow10</a></h2>\u000a<code>func Pow10(e int) float64</code>\u000a<p>\u000aPow10 returns 10**e, the base-10 exponential of e.\u000a</p>\u000a\u000a","name":"Pow10"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Remainder!\">Remainder</a></h2>\u000a<code>func Remainder(x, y float64) float64</code>\u000a\u000a","name":"Remainder"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Signbit!\">Signbit</a></h2>\u000a<code>func Signbit(x float64) bool</code>\u000a<p>\u000aSignbit returns true if x is negative or negative zero.\u000a</p>\u000a\u000a","name":"Signbit"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sin!\">Sin</a></h2>\u000a<code>func Sin(x float64) float64</code>\u000a\u000a","name":"Sin"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sincos!\">Sincos</a></h2>\u000a<code>func Sincos(x float64) (sin, cos float64)</code>\u000a\u000a","name":"Sincos"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sinh!\">Sinh</a></h2>\u000a<code>func Sinh(x float64) float64</code>\u000a<p>\u000aSinh returns the hyperbolic sine of x.\u000a</p>\u000a\u000a","name":"Sinh"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sqrt!\">Sqrt</a></h2>\u000a<code>func Sqrt(x float64) float64</code>\u000a\u000a","name":"Sqrt"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Tan!\">Tan</a></h2>\u000a<code>func Tan(x float64) float64</code>\u000a\u000a","name":"Tan"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Tanh!\">Tanh</a></h2>\u000a<code>func Tanh(x float64) float64</code>\u000a<p>\u000aTanh computes the hyperbolic tangent of x.\u000a</p>\u000a\u000a","name":"Tanh"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Trunc!\">Trunc</a></h2>\u000a<code>func Trunc(x float64) float64</code>\u000a\u000a","name":"Trunc"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Y0!\">Y0</a></h2>\u000a<code>func Y0(x float64) float64</code>\u000a<p>\u000aY0 returns the order-zero Bessel function of the second kind.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Y0(+Inf) = 0\u000aY0(0) = -Inf\u000aY0(x &lt; 0) = NaN\u000aY0(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Y0"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Y1!\">Y1</a></h2>\u000a<code>func Y1(x float64) float64</code>\u000a<p>\u000aY1 returns the order-one Bessel function of the second kind.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Y1(+Inf) = 0\u000aY1(0) = -Inf\u000aY1(x &lt; 0) = NaN\u000aY1(NaN) = NaN\u000a</pre>\u000a\u000a","name":"Y1"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Yn!\">Yn</a></h2>\u000a<code>func Yn(n int, x float64) float64</code>\u000a<p>\u000aYn returns the order-n Bessel function of the second kind.\u000a</p>\u000a<p>\u000aSpecial cases are:\u000a</p>\u000a<pre>Yn(n, +Inf) = 0\u000aYn(n &gt; 0, 0) = -Inf\u000aYn(n &lt; 0, 0) = +Inf if n is odd, -Inf if n is even\u000aY1(n, x &lt; 0) = NaN\u000aY1(n, NaN) = NaN\u000a</pre>\u000a\u000a","name":"Yn"}],"consts":[{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:E!\"><em>group</em></a></h2>\u000a<pre>const (\u000a\u0009E   = 2.71828182845904523536028747135266249775724709369995957496696763 // A001113\u000a\u0009Pi  = 3.14159265358979323846264338327950288419716939937510582097494459 // A000796\u000a\u0009Phi = 1.61803398874989484820458683436563811772030917980576286213544862 // A001622\u000a\u000a\u0009Sqrt2   = 1.41421356237309504880168872420969807856967187537694807317667974 // A002193\u000a\u0009SqrtE   = 1.64872127070012814684865078781416357165377610071014801157507931 // A019774\u000a\u0009SqrtPi  = 1.77245385090551602729816748334114518279754945612238712821380779 // A002161\u000a\u0009SqrtPhi = 1.27201964951406896425242246173749149171560804184009624861664038 // A139339\u000a\u000a\u0009Ln2    = 0.693147180559945309417232121458176568075500134360255254120680009 // A002162\u000a\u0009Log2E  = 1 / Ln2\u000a\u0009Ln10   = 2.30258509299404568401799145468436420760110148862877297603332790 // A002392\u000a\u0009Log10E = 1 / Ln10\u000a)</pre>\u000a<p>\u000aMathematical constants.\u000aReference: <a href=\"http://www.research.att.com/~njas/sequences/Axxxxxx\">http://www.research.att.com/~njas/sequences/Axxxxxx</a>\u000a</p>\u000a\u000a","names":["E","Pi","Phi","Sqrt2","SqrtE","SqrtPi","SqrtPhi","Ln2","Log2E","Ln10","Log10E"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:MaxFloat32!\"><em>group</em></a></h2>\u000a<pre>const (\u000a\u0009MaxFloat32 = 3.40282346638528859811704183484516925440e+38  /* 2**127 * (2**24 - 1) / 2**23 */\u000a\u0009MinFloat32 = 1.401298464324817070923729583289916131280e-45 /* 1 / 2**(127 - 1 + 23) */\u000a\u000a\u0009MaxFloat64 = 1.797693134862315708145274237317043567981e+308 /* 2**1023 * (2**53 - 1) / 2**52 */\u000a\u0009MinFloat64 = 4.940656458412465441765687928682213723651e-324 /* 1 / 2**(1023 - 1 + 52) */\u000a)</pre>\u000a<p>\u000aFloating-point limit values.\u000aMax is the largest finite value representable by the type.\u000aMin is the smallest nonzero value representable by the type.\u000a</p>\u000a\u000a","names":["MaxFloat32","MinFloat32","MaxFloat64","MinFloat64"],"type":""},{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:MaxInt8!\"><em>group</em></a></h2>\u000a<pre>const (\u000a\u0009MaxInt8   = 1&lt;&lt;7 - 1\u000a\u0009MinInt8   = -1 &lt;&lt; 7\u000a\u0009MaxInt16  = 1&lt;&lt;15 - 1\u000a\u0009MinInt16  = -1 &lt;&lt; 15\u000a\u0009MaxInt32  = 1&lt;&lt;31 - 1\u000a\u0009MinInt32  = -1 &lt;&lt; 31\u000a\u0009MaxInt64  = 1&lt;&lt;63 - 1\u000a\u0009MinInt64  = -1 &lt;&lt; 63\u000a\u0009MaxUint8  = 1&lt;&lt;8 - 1\u000a\u0009MaxUint16 = 1&lt;&lt;16 - 1\u000a\u0009MaxUint32 = 1&lt;&lt;32 - 1\u000a\u0009MaxUint64 = 1&lt;&lt;64 - 1\u000a)</pre>\u000a<p>\u000aInteger limit values.\u000a</p>\u000a\u000a","names":["MaxInt8","MinInt8","MaxInt16","MinInt16","MaxInt32","MinInt32","MaxInt64","MinInt64","MaxUint8","MaxUint16","MaxUint32","MaxUint64"],"type":""}],"vars":[]}