var gowtfData = {"html":"<p>\u000aPackage draw provides basic graphics and drawing primitives,\u000ain the style of the Plan 9 graphics library\u000a(see <a href=\"http://plan9.bell-labs.com/magic/man2html/2/draw\">http://plan9.bell-labs.com/magic/man2html/2/draw</a>)\u000aand the X Render extension.\u000a</p>\u000a","name":"draw","filenames":["/home/nsf/go/src/pkg/exp/draw/event.go","/home/nsf/go/src/pkg/exp/draw/draw.go"],"types":[{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ConfigEvent!\">ConfigEvent</a></h2>\u000a<pre>type ConfigEvent struct {\u000a\u0009Config image.Config\u000a}</pre>\u000a<p>\u000aA ConfigEvent is sent each time the window&#39;s color model or size changes.\u000aThe client should respond by calling Window.Screen to obtain a new image.\u000a</p>\u000a\u000a","name":"ConfigEvent","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ErrEvent!\">ErrEvent</a></h2>\u000a<pre>type ErrEvent struct {\u000a\u0009Err os.Error\u000a}</pre>\u000a<p>\u000aAn ErrEvent is sent when an error occurs.\u000a</p>\u000a\u000a","name":"ErrEvent","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Image!\">Image</a></h2>\u000a<pre>type Image interface {\u000a\u0009image.Image\u000a\u0009Set(x, y int, c image.Color)\u000a}</pre>\u000a<p>\u000aA draw.Image is an image.Image with a Set method to change a single pixel.\u000a</p>\u000a\u000a","name":"Image","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:KeyEvent!\">KeyEvent</a></h2>\u000a<pre>type KeyEvent struct {\u000a\u0009// The value k represents key k being pressed.\u000a\u0009// The value -k represents key k being released.\u000a\u0009// The specific set of key values is not specified,\u000a\u0009// but ordinary characters represent themselves.\u000a\u0009Key int\u000a}</pre>\u000a<p>\u000aA KeyEvent is sent for a key press or release.\u000a</p>\u000a\u000a","name":"KeyEvent","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:MouseEvent!\">MouseEvent</a></h2>\u000a<pre>type MouseEvent struct {\u000a\u0009// Buttons is a bit mask of buttons: 1&lt;&lt;0 is left, 1&lt;&lt;1 middle, 1&lt;&lt;2 right.\u000a\u0009// It represents button state and not necessarily the state delta: bit 0\u000a\u0009// being on means that the left mouse button is down, but does not imply\u000a\u0009// that the same button was up in the previous MouseEvent.\u000a\u0009Buttons int\u000a\u0009// Loc is the location of the cursor.\u000a\u0009Loc image.Point\u000a\u0009// Nsec is the event&#39;s timestamp.\u000a\u0009Nsec int64\u000a}</pre>\u000a<p>\u000aA MouseEvent is sent for a button press or release or for a mouse movement.\u000a</p>\u000a\u000a","name":"MouseEvent","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Op!\">Op</a></h2>\u000a<pre>type Op int</pre>\u000a<p>\u000aA Porter-Duff compositing operator.\u000a</p>\u000a\u000a","name":"Op","methods":[]},{"html":"\u000a<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Window!\">Window</a></h2>\u000a<pre>type Window interface {\u000a\u0009// Screen returns an editable Image for the window.\u000a\u0009Screen() Image\u000a\u0009// FlushImage flushes changes made to Screen() back to screen.\u000a\u0009FlushImage()\u000a\u0009// EventChan returns a channel carrying UI events such as key presses,\u000a\u0009// mouse movements and window resizes.\u000a\u0009EventChan() &lt;-chan interface{}\u000a\u0009// Close closes the window.\u000a\u0009Close() os.Error\u000a}</pre>\u000a<p>\u000aA Window represents a single graphics window.\u000a</p>\u000a\u000a","name":"Window","methods":[]}],"funcs":[{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Border!\">Border</a></h2>\u000a<code>func Border(dst Image, r image.Rectangle, w int, src image.Image, sp image.Point)</code>\u000a<p>\u000aBorder aligns r.Min in dst with sp in src and then replaces pixels\u000ain a w-pixel border around r in dst with the result of the Porter-Duff compositing\u000aoperation &ldquo;src over dst.&rdquo;  If w is positive, the border extends w pixels inside r.\u000aIf w is negative, the border extends w pixels outside r.\u000a</p>\u000a\u000a","name":"Border"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Draw!\">Draw</a></h2>\u000a<code>func Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point)</code>\u000a<p>\u000aDraw calls DrawMask with a nil mask and an Over op.\u000a</p>\u000a\u000a","name":"Draw"},{"html":"\u000a<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:DrawMask!\">DrawMask</a></h2>\u000a<code>func DrawMask(dst Image, r image.Rectangle, src image.Image, sp image.Point, mask image.Image, mp image.Point, op Op)</code>\u000a<p>\u000aDrawMask aligns r.Min in dst with sp in src and mp in mask and then replaces the rectangle r\u000ain dst with the result of a Porter-Duff composition. A nil mask is treated as opaque.\u000a</p>\u000a\u000a","name":"DrawMask"}],"consts":[{"html":"\u000a<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Op!\">Op</a></h2>\u000a<pre>const (\u000a\u0009// Over specifies ``(src in mask) over dst&#39;&#39;.\u000a\u0009Over Op = iota\u000a\u0009// Src specifies ``src in mask&#39;&#39;.\u000a\u0009Src\u000a)</pre>\u000a\u000a","names":["Over","Src"],"type":"Op"}],"vars":[]}