var gortfmData = {index:"index.html",html:"<p>\nPackage flag implements command-line flag parsing.\n</p>\n<p>\nUsage:\n</p>\n<p>\nDefine flags using flag.String(), Bool(), Int(), etc. Example:\n</p>\n<pre>import &#34;flag&#34;\nvar ip *int = flag.Int(&#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)\n</pre>\n<p>\nIf you like, you can bind the flag to a variable using the Var() functions.\n</p>\n<pre>var flagvar int\nfunc init() {\n\tflag.IntVar(&amp;flagvar, &#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)\n}\n</pre>\n<p>\nOr you can create custom flags that satisfy the Value interface (with\npointer receivers) and couple them to flag parsing by\n</p>\n<pre>flag.Var(&amp;flagVal, &#34;name&#34;, &#34;help message for flagname&#34;)\n</pre>\n<p>\nFor such flags, the default value is just the initial value of the variable.\n</p>\n<p>\nAfter all flags are defined, call\n</p>\n<pre>flag.Parse()\n</pre>\n<p>\nto parse the command line into the defined flags.\n</p>\n<p>\nFlags may then be used directly. If you&#39;re using the flags themselves,\nthey are all pointers; if you bind to variables, they&#39;re values.\n</p>\n<pre>fmt.Println(&#34;ip has value &#34;, *ip);\nfmt.Println(&#34;flagvar has value &#34;, flagvar);\n</pre>\n<p>\nAfter parsing, the arguments after the flag are available as the\nslice flag.Args() or individually as flag.Arg(i).\nThe arguments are indexed from 0 up to flag.NArg().\n</p>\n<p>\nCommand line flag syntax:\n</p>\n<pre>-flag\n-flag=x\n-flag x  // non-boolean flags only\n</pre>\n<p>\nOne or two minus signs may be used; they are equivalent.\nThe last form is not permitted for boolean flags because the\nmeaning of the command\n</p>\n<pre>cmd -x *\n</pre>\n<p>\nwill change if there is a file called 0, false, etc.  You must\nuse the -flag=false form to turn off a boolean flag.\n</p>\n<p>\nFlag parsing stops just before the first non-flag argument\n(&#34;-&#34; is a non-flag argument) or after the terminator &#34;--&#34;.\n</p>\n<p>\nInteger flags accept 1234, 0664, 0x1234 and may be negative.\nBoolean flags may be 1, 0, t, f, true, false, TRUE, FALSE, True, False.\n</p>\n<p>\nThe default set of command-line flags is controlled by\ntop-level functions.  The FlagSet type allows one to define\nindependent sets of flags, such as to implement subcommands\nin a command-line interface. The methods of FlagSet are\nanalogous to the top-level functions for the command-line\nflag set.\n</p>\n",name:"flag",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ErrorHandling!\">ErrorHandling</a></h2>\n<pre>type ErrorHandling int</pre>\n<p>\nErrorHandling defines how to handle flag parsing errors.\n</p>\n\n",name:"ErrorHandling","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Flag!\">Flag</a></h2>\n<pre>type Flag struct {\n\tName     string // name as it appears on command line\n\tUsage    string // help message\n\tValue    Value  // value as set\n\tDefValue string // default value (as text); for usage message\n}</pre>\n<p>\nA Flag represents the state of a flag.\n</p>\n\n",name:"Flag","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FlagSet!\">FlagSet</a></h2>\n<pre>type FlagSet struct {\n\t// Usage is the function called when an error occurs while parsing flags.\n\t// The field is a function (not a method) that may be changed to point to\n\t// a custom error handler.\n\tUsage func()\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nA FlagSet represents a set of defined flags.\n</p>\n\n",name:"FlagSet","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Arg!\">Arg</a></h2>\n<code>func (f *FlagSet) Arg(i int) string</code>\n<p>\nArg returns the i&#39;th argument.  Arg(0) is the first remaining argument\nafter flags have been processed.\n</p>\n\n",name:"Arg"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Args!\">Args</a></h2>\n<code>func (f *FlagSet) Args() []string</code>\n<p>\nArgs returns the non-flag arguments.\n</p>\n\n",name:"Args"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Bool!\">Bool</a></h2>\n<code>func (f *FlagSet) Bool(name string, value bool, usage string) *bool</code>\n<p>\nBool defines a bool flag with specified name, default value, and usage string.\nThe return value is the address of a bool variable that stores the value of the flag.\n</p>\n\n",name:"Bool"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.BoolVar!\">BoolVar</a></h2>\n<code>func (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string)</code>\n<p>\nBoolVar defines a bool flag with specified name, default value, and usage string.\nThe argument p points to a bool variable in which to store the value of the flag.\n</p>\n\n",name:"BoolVar"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Float64!\">Float64</a></h2>\n<code>func (f *FlagSet) Float64(name string, value float64, usage string) *float64</code>\n<p>\nFloat64 defines a float64 flag with specified name, default value, and usage string.\nThe return value is the address of a float64 variable that stores the value of the flag.\n</p>\n\n",name:"Float64"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Float64Var!\">Float64Var</a></h2>\n<code>func (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string)</code>\n<p>\nFloat64Var defines a float64 flag with specified name, default value, and usage string.\nThe argument p points to a float64 variable in which to store the value of the flag.\n</p>\n\n",name:"Float64Var"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Int!\">Int</a></h2>\n<code>func (f *FlagSet) Int(name string, value int, usage string) *int</code>\n<p>\nInt defines an int flag with specified name, default value, and usage string.\nThe return value is the address of an int variable that stores the value of the flag.\n</p>\n\n",name:"Int"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Int64!\">Int64</a></h2>\n<code>func (f *FlagSet) Int64(name string, value int64, usage string) *int64</code>\n<p>\nInt64 defines an int64 flag with specified name, default value, and usage string.\nThe return value is the address of an int64 variable that stores the value of the flag.\n</p>\n\n",name:"Int64"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Int64Var!\">Int64Var</a></h2>\n<code>func (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string)</code>\n<p>\nInt64Var defines an int64 flag with specified name, default value, and usage string.\nThe argument p points to an int64 variable in which to store the value of the flag.\n</p>\n\n",name:"Int64Var"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.IntVar!\">IntVar</a></h2>\n<code>func (f *FlagSet) IntVar(p *int, name string, value int, usage string)</code>\n<p>\nIntVar defines an int flag with specified name, default value, and usage string.\nThe argument p points to an int variable in which to store the value of the flag.\n</p>\n\n",name:"IntVar"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Lookup!\">Lookup</a></h2>\n<code>func (f *FlagSet) Lookup(name string) *Flag</code>\n<p>\nLookup returns the Flag structure of the named flag, returning nil if none exists.\n</p>\n\n",name:"Lookup"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.NArg!\">NArg</a></h2>\n<code>func (f *FlagSet) NArg() int</code>\n<p>\nNArg is the number of arguments remaining after flags have been processed.\n</p>\n\n",name:"NArg"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.NFlag!\">NFlag</a></h2>\n<code>func (f *FlagSet) NFlag() int</code>\n<p>\nNFlag returns the number of flags that have been set.\n</p>\n\n",name:"NFlag"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Parse!\">Parse</a></h2>\n<code>func (f *FlagSet) Parse(arguments []string) os.Error</code>\n<p>\nParse parses flag definitions from the argument list, which should not\ninclude the command name.  Must be called after all flags in the FlagSet\nare defined and before flags are accessed by the program.\n</p>\n\n",name:"Parse"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.PrintDefaults!\">PrintDefaults</a></h2>\n<code>func (f *FlagSet) PrintDefaults()</code>\n<p>\nPrintDefaults prints to standard error the default values of all defined flags in the set.\n</p>\n\n",name:"PrintDefaults"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Set!\">Set</a></h2>\n<code>func (f *FlagSet) Set(name, value string) bool</code>\n<p>\nSet sets the value of the named flag.  It returns true if the set succeeded; false if\nthere is no such flag defined.\n</p>\n\n",name:"Set"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.String!\">String</a></h2>\n<code>func (f *FlagSet) String(name string, value string, usage string) *string</code>\n<p>\nString defines a string flag with specified name, default value, and usage string.\nThe return value is the address of a string variable that stores the value of the flag.\n</p>\n\n",name:"String"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.StringVar!\">StringVar</a></h2>\n<code>func (f *FlagSet) StringVar(p *string, name string, value string, usage string)</code>\n<p>\nStringVar defines a string flag with specified name, default value, and usage string.\nThe argument p points to a string variable in which to store the value of the flag.\n</p>\n\n",name:"StringVar"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Uint!\">Uint</a></h2>\n<code>func (f *FlagSet) Uint(name string, value uint, usage string) *uint</code>\n<p>\nUint defines a uint flag with specified name, default value, and usage string.\nThe return value is the address of a uint  variable that stores the value of the flag.\n</p>\n\n",name:"Uint"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Uint64!\">Uint64</a></h2>\n<code>func (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64</code>\n<p>\nUint64 defines a uint64 flag with specified name, default value, and usage string.\nThe return value is the address of a uint64 variable that stores the value of the flag.\n</p>\n\n",name:"Uint64"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Uint64Var!\">Uint64Var</a></h2>\n<code>func (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string)</code>\n<p>\nUint64Var defines a uint64 flag with specified name, default value, and usage string.\nThe argument p points to a uint64 variable in which to store the value of the flag.\n</p>\n\n",name:"Uint64Var"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.UintVar!\">UintVar</a></h2>\n<code>func (f *FlagSet) UintVar(p *uint, name string, value uint, usage string)</code>\n<p>\nUintVar defines a uint flag with specified name, default value, and usage string.\nThe argument p points to a uint variable in which to store the value of the flag.\n</p>\n\n",name:"UintVar"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Var!\">Var</a></h2>\n<code>func (f *FlagSet) Var(value Value, name string, usage string)</code>\n<p>\nVar defines a flag with the specified name and usage string. The type and\nvalue of the flag are represented by the first argument, of type Value, which\ntypically holds a user-defined implementation of Value. For instance, the\ncaller could create a flag that turns a comma-separated string into a slice\nof strings by giving the slice the methods of Value; in particular, Set would\ndecompose the comma-separated string into the slice.\n</p>\n\n",name:"Var"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.Visit!\">Visit</a></h2>\n<code>func (f *FlagSet) Visit(fn func(*Flag))</code>\n<p>\nVisit visits the flags in lexicographical order, calling fn for each.\nIt visits only those flags that have been set.\n</p>\n\n",name:"Visit"},{html:"\n<h2><a class=\"black\" href=\"?m:FlagSet\">func (*FlagSet)</a> <a href=\"?m:FlagSet.VisitAll!\">VisitAll</a></h2>\n<code>func (f *FlagSet) VisitAll(fn func(*Flag))</code>\n<p>\nVisitAll visits the flags in lexicographical order, calling fn for each.\nIt visits all flags, even those not set.\n</p>\n\n",name:"VisitAll"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Value!\">Value</a></h2>\n<pre>type Value interface {\n\tString() string\n\tSet(string) bool\n}</pre>\n<p>\nValue is the interface to the dynamic value stored in a flag.\n(The default value is represented as a string.)\n</p>\n\n",name:"Value","methods":[]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Arg!\">Arg</a></h2>\n<code>func Arg(i int) string</code>\n<p>\nArg returns the i&#39;th command-line argument.  Arg(0) is the first remaining argument\nafter flags have been processed.\n</p>\n\n",name:"Arg"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Args!\">Args</a></h2>\n<code>func Args() []string</code>\n<p>\nArgs returns the non-flag command-line arguments.\n</p>\n\n",name:"Args"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Bool!\">Bool</a></h2>\n<code>func Bool(name string, value bool, usage string) *bool</code>\n<p>\nBool defines a bool flag with specified name, default value, and usage string.\nThe return value is the address of a bool variable that stores the value of the flag.\n</p>\n\n",name:"Bool"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:BoolVar!\">BoolVar</a></h2>\n<code>func BoolVar(p *bool, name string, value bool, usage string)</code>\n<p>\nBoolVar defines a bool flag with specified name, default value, and usage string.\nThe argument p points to a bool variable in which to store the value of the flag.\n</p>\n\n",name:"BoolVar"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64!\">Float64</a></h2>\n<code>func Float64(name string, value float64, usage string) *float64</code>\n<p>\nFloat64 defines an int flag with specified name, default value, and usage string.\nThe return value is the address of a float64 variable that stores the value of the flag.\n</p>\n\n",name:"Float64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64Var!\">Float64Var</a></h2>\n<code>func Float64Var(p *float64, name string, value float64, usage string)</code>\n<p>\nFloat64Var defines a float64 flag with specified name, default value, and usage string.\nThe argument p points to a float64 variable in which to store the value of the flag.\n</p>\n\n",name:"Float64Var"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int!\">Int</a></h2>\n<code>func Int(name string, value int, usage string) *int</code>\n<p>\nInt defines an int flag with specified name, default value, and usage string.\nThe return value is the address of an int variable that stores the value of the flag.\n</p>\n\n",name:"Int"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int64!\">Int64</a></h2>\n<code>func Int64(name string, value int64, usage string) *int64</code>\n<p>\nInt64 defines an int64 flag with specified name, default value, and usage string.\nThe return value is the address of an int64 variable that stores the value of the flag.\n</p>\n\n",name:"Int64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int64Var!\">Int64Var</a></h2>\n<code>func Int64Var(p *int64, name string, value int64, usage string)</code>\n<p>\nInt64Var defines an int64 flag with specified name, default value, and usage string.\nThe argument p points to an int64 variable in which to store the value of the flag.\n</p>\n\n",name:"Int64Var"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IntVar!\">IntVar</a></h2>\n<code>func IntVar(p *int, name string, value int, usage string)</code>\n<p>\nIntVar defines an int flag with specified name, default value, and usage string.\nThe argument p points to an int variable in which to store the value of the flag.\n</p>\n\n",name:"IntVar"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Lookup!\">Lookup</a></h2>\n<code>func Lookup(name string) *Flag</code>\n<p>\nLookup returns the Flag structure of the named command-line flag,\nreturning nil if none exists.\n</p>\n\n",name:"Lookup"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NArg!\">NArg</a></h2>\n<code>func NArg() int</code>\n<p>\nNArg is the number of arguments remaining after flags have been processed.\n</p>\n\n",name:"NArg"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NFlag!\">NFlag</a></h2>\n<code>func NFlag() int</code>\n<p>\nNFlag returns the number of command-line flags that have been set.\n</p>\n\n",name:"NFlag"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewFlagSet!\">NewFlagSet</a></h2>\n<code>func NewFlagSet(name string, errorHandling ErrorHandling) *FlagSet</code>\n<p>\nNewFlagSet returns a new, empty flag set with the specified name and\nerror handling property.\n</p>\n\n",name:"NewFlagSet"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Parse!\">Parse</a></h2>\n<code>func Parse()</code>\n<p>\nParse parses the command-line flags from os.Args[1:].  Must be called\nafter all flags are defined and before flags are accessed by the program.\n</p>\n\n",name:"Parse"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:PrintDefaults!\">PrintDefaults</a></h2>\n<code>func PrintDefaults()</code>\n<p>\nPrintDefaults prints to standard error the default values of all defined command-line flags.\n</p>\n\n",name:"PrintDefaults"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Set!\">Set</a></h2>\n<code>func Set(name, value string) bool</code>\n<p>\nSet sets the value of the named command-line flag. It returns true if the\nset succeeded; false if there is no such flag defined.\n</p>\n\n",name:"Set"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:String!\">String</a></h2>\n<code>func String(name string, value string, usage string) *string</code>\n<p>\nString defines a string flag with specified name, default value, and usage string.\nThe return value is the address of a string variable that stores the value of the flag.\n</p>\n\n",name:"String"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:StringVar!\">StringVar</a></h2>\n<code>func StringVar(p *string, name string, value string, usage string)</code>\n<p>\nStringVar defines a string flag with specified name, default value, and usage string.\nThe argument p points to a string variable in which to store the value of the flag.\n</p>\n\n",name:"StringVar"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Uint!\">Uint</a></h2>\n<code>func Uint(name string, value uint, usage string) *uint</code>\n<p>\nUint defines a uint flag with specified name, default value, and usage string.\nThe return value is the address of a uint  variable that stores the value of the flag.\n</p>\n\n",name:"Uint"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Uint64!\">Uint64</a></h2>\n<code>func Uint64(name string, value uint64, usage string) *uint64</code>\n<p>\nUint64 defines a uint64 flag with specified name, default value, and usage string.\nThe return value is the address of a uint64 variable that stores the value of the flag.\n</p>\n\n",name:"Uint64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Uint64Var!\">Uint64Var</a></h2>\n<code>func Uint64Var(p *uint64, name string, value uint64, usage string)</code>\n<p>\nUint64Var defines a uint64 flag with specified name, default value, and usage string.\nThe argument p points to a uint64 variable in which to store the value of the flag.\n</p>\n\n",name:"Uint64Var"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:UintVar!\">UintVar</a></h2>\n<code>func UintVar(p *uint, name string, value uint, usage string)</code>\n<p>\nUintVar defines a uint flag with specified name, default value, and usage string.\nThe argument p points to a uint  variable in which to store the value of the flag.\n</p>\n\n",name:"UintVar"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Var!\">Var</a></h2>\n<code>func Var(value Value, name string, usage string)</code>\n<p>\nVar defines a flag with the specified name and usage string. The type and\nvalue of the flag are represented by the first argument, of type Value, which\ntypically holds a user-defined implementation of Value. For instance, the\ncaller could create a flag that turns a comma-separated string into a slice\nof strings by giving the slice the methods of Value; in particular, Set would\ndecompose the comma-separated string into the slice.\n</p>\n\n",name:"Var"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Visit!\">Visit</a></h2>\n<code>func Visit(fn func(*Flag))</code>\n<p>\nVisit visits the command-line flags in lexicographical order, calling fn\nfor each.  It visits only those flags that have been set.\n</p>\n\n",name:"Visit"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:VisitAll!\">VisitAll</a></h2>\n<code>func VisitAll(fn func(*Flag))</code>\n<p>\nVisitAll visits the command-line flags in lexicographical order, calling\nfn for each.  It visits all flags, even those not set.\n</p>\n\n",name:"VisitAll"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ErrorHandling!\">ErrorHandling</a></h2>\n<pre>const (\n\tContinueOnError ErrorHandling = iota\n\tExitOnError\n\tPanicOnError\n)</pre>\n\n",names:["ContinueOnError","ExitOnError","PanicOnError"],type:"ErrorHandling"}],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:Usage!\">Usage</a></h2>\n<pre>var Usage = func() {\n\tdefaultUsage(commandLine)\n}</pre>\n<p>\nUsage prints to standard error a usage message documenting all defined command-line flags.\nThe function is a variable that may be changed to point to a custom function.\n</p>\n\n",names:["Usage"],type:""}]}