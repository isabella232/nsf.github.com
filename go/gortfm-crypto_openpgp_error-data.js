var gortfmData = {index:"index.html",html:"<p>\nPackage error contains common error types for the OpenPGP packages.\n</p>\n",name:"error",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:InvalidArgumentError!\">InvalidArgumentError</a></h2>\n<pre>type InvalidArgumentError string</pre>\n<p>\nInvalidArgumentError indicates that the caller is in error and passed an\nincorrect value.\n</p>\n\n",name:"InvalidArgumentError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:InvalidArgumentError\">func (InvalidArgumentError)</a> <a href=\"?m:InvalidArgumentError.String!\">String</a></h2>\n<code>func (i InvalidArgumentError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SignatureError!\">SignatureError</a></h2>\n<pre>type SignatureError string</pre>\n<p>\nSignatureError indicates that a syntactically valid signature failed to\nvalidate.\n</p>\n\n",name:"SignatureError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SignatureError\">func (SignatureError)</a> <a href=\"?m:SignatureError.String!\">String</a></h2>\n<code>func (b SignatureError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:StructuralError!\">StructuralError</a></h2>\n<pre>type StructuralError string</pre>\n<p>\nA StructuralError is returned when OpenPGP data is found to be syntactically\ninvalid.\n</p>\n\n",name:"StructuralError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:StructuralError\">func (StructuralError)</a> <a href=\"?m:StructuralError.String!\">String</a></h2>\n<code>func (s StructuralError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:UnknownPacketTypeError!\">UnknownPacketTypeError</a></h2>\n<pre>type UnknownPacketTypeError uint8</pre>\n\n",name:"UnknownPacketTypeError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:UnknownPacketTypeError\">func (UnknownPacketTypeError)</a> <a href=\"?m:UnknownPacketTypeError.String!\">String</a></h2>\n<code>func (upte UnknownPacketTypeError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:UnsupportedError!\">UnsupportedError</a></h2>\n<pre>type UnsupportedError string</pre>\n<p>\nUnsupportedError indicates that, although the OpenPGP data is valid, it\nmakes use of currently unimplemented features.\n</p>\n\n",name:"UnsupportedError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:UnsupportedError\">func (UnsupportedError)</a> <a href=\"?m:UnsupportedError.String!\">String</a></h2>\n<code>func (s UnsupportedError) String() string</code>\n\n",name:"String"}]}],funcs:[],consts:[],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:KeyIncorrectError!\">KeyIncorrectError</a></h2>\n<pre>var KeyIncorrectError = keyIncorrect(0)</pre>\n\n",names:["KeyIncorrectError"],type:""},{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:UnknownIssuerError!\">UnknownIssuerError</a></h2>\n<pre>var UnknownIssuerError = unknownIssuer(0)</pre>\n\n",names:["UnknownIssuerError"],type:""}]}