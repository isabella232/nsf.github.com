var gortfmData = {index:"index.html",html:"<p>\nThe expvar package provides a standardized interface to public variables,\nsuch as operation counters in servers. It exposes these variables via\nHTTP at /debug/vars in JSON format.\n</p>\n<p>\nOperations to set or modify these public variables are atomic.\n</p>\n<p>\nIn addition to adding the HTTP handler, this package registers the\nfollowing variables:\n</p>\n<pre>cmdline   os.Args\nmemstats  runtime.Memstats\n</pre>\n<p>\nThe package is sometimes only imported for the side effect of\nregistering its HTTP handler and the above variables.  To use it\nthis way, simply link this package into your program:\n</p>\n<pre>import _ &#34;expvar&#34;\n</pre>\n",name:"expvar",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Float!\">Float</a></h2>\n<pre>type Float struct {\n\t// contains unexported fields\n}</pre>\n<p>\nFloat is a 64-bit float variable that satisfies the Var interface.\n</p>\n\n",name:"Float","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Float\">func (*Float)</a> <a href=\"?m:Float.Add!\">Add</a></h2>\n<code>func (v *Float) Add(delta float64)</code>\n<p>\nAdd adds delta to v.\n</p>\n\n",name:"Add"},{html:"\n<h2><a class=\"black\" href=\"?m:Float\">func (*Float)</a> <a href=\"?m:Float.Set!\">Set</a></h2>\n<code>func (v *Float) Set(value float64)</code>\n<p>\nSet sets v to value.\n</p>\n\n",name:"Set"},{html:"\n<h2><a class=\"black\" href=\"?m:Float\">func (*Float)</a> <a href=\"?m:Float.String!\">String</a></h2>\n<code>func (v *Float) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FloatFunc!\">FloatFunc</a></h2>\n<pre>type FloatFunc func() float64</pre>\n<p>\nFloatFunc wraps a func() float64 to create a value that satisfies the Var interface.\nThe function will be called each time the Var is evaluated.\n</p>\n\n",name:"FloatFunc","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:FloatFunc\">func (FloatFunc)</a> <a href=\"?m:FloatFunc.String!\">String</a></h2>\n<code>func (v FloatFunc) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Int!\">Int</a></h2>\n<pre>type Int struct {\n\t// contains unexported fields\n}</pre>\n<p>\nInt is a 64-bit integer variable that satisfies the Var interface.\n</p>\n\n",name:"Int","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Int\">func (*Int)</a> <a href=\"?m:Int.Add!\">Add</a></h2>\n<code>func (v *Int) Add(delta int64)</code>\n\n",name:"Add"},{html:"\n<h2><a class=\"black\" href=\"?m:Int\">func (*Int)</a> <a href=\"?m:Int.Set!\">Set</a></h2>\n<code>func (v *Int) Set(value int64)</code>\n\n",name:"Set"},{html:"\n<h2><a class=\"black\" href=\"?m:Int\">func (*Int)</a> <a href=\"?m:Int.String!\">String</a></h2>\n<code>func (v *Int) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:IntFunc!\">IntFunc</a></h2>\n<pre>type IntFunc func() int64</pre>\n<p>\nIntFunc wraps a func() int64 to create a value that satisfies the Var interface.\nThe function will be called each time the Var is evaluated.\n</p>\n\n",name:"IntFunc","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:IntFunc\">func (IntFunc)</a> <a href=\"?m:IntFunc.String!\">String</a></h2>\n<code>func (v IntFunc) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:KeyValue!\">KeyValue</a></h2>\n<pre>type KeyValue struct {\n\tKey   string\n\tValue Var\n}</pre>\n<p>\nKeyValue represents a single entry in a Map.\n</p>\n\n",name:"KeyValue","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Map!\">Map</a></h2>\n<pre>type Map struct {\n\t// contains unexported fields\n}</pre>\n<p>\nMap is a string-to-Var map variable that satisfies the Var interface.\n</p>\n\n",name:"Map","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Map\">func (*Map)</a> <a href=\"?m:Map.Add!\">Add</a></h2>\n<code>func (v *Map) Add(key string, delta int64)</code>\n\n",name:"Add"},{html:"\n<h2><a class=\"black\" href=\"?m:Map\">func (*Map)</a> <a href=\"?m:Map.AddFloat!\">AddFloat</a></h2>\n<code>func (v *Map) AddFloat(key string, delta float64)</code>\n<p>\nAddFloat adds delta to the *Float value stored under the given map key.\n</p>\n\n",name:"AddFloat"},{html:"\n<h2><a class=\"black\" href=\"?m:Map\">func (*Map)</a> <a href=\"?m:Map.Get!\">Get</a></h2>\n<code>func (v *Map) Get(key string) Var</code>\n\n",name:"Get"},{html:"\n<h2><a class=\"black\" href=\"?m:Map\">func (*Map)</a> <a href=\"?m:Map.Init!\">Init</a></h2>\n<code>func (v *Map) Init() *Map</code>\n\n",name:"Init"},{html:"\n<h2><a class=\"black\" href=\"?m:Map\">func (*Map)</a> <a href=\"?m:Map.Iter!\">Iter</a></h2>\n<code>func (v *Map) Iter() &lt;-chan KeyValue</code>\n\n",name:"Iter"},{html:"\n<h2><a class=\"black\" href=\"?m:Map\">func (*Map)</a> <a href=\"?m:Map.Set!\">Set</a></h2>\n<code>func (v *Map) Set(key string, av Var)</code>\n\n",name:"Set"},{html:"\n<h2><a class=\"black\" href=\"?m:Map\">func (*Map)</a> <a href=\"?m:Map.String!\">String</a></h2>\n<code>func (v *Map) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:String!\">String</a></h2>\n<pre>type String struct {\n\t// contains unexported fields\n}</pre>\n<p>\nString is a string variable, and satisfies the Var interface.\n</p>\n\n",name:"String","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:String\">func (*String)</a> <a href=\"?m:String.Set!\">Set</a></h2>\n<code>func (v *String) Set(value string)</code>\n\n",name:"Set"},{html:"\n<h2><a class=\"black\" href=\"?m:String\">func (*String)</a> <a href=\"?m:String.String!\">String</a></h2>\n<code>func (v *String) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:StringFunc!\">StringFunc</a></h2>\n<pre>type StringFunc func() string</pre>\n<p>\nStringFunc wraps a func() string to create value that satisfies the Var interface.\nThe function will be called each time the Var is evaluated.\n</p>\n\n",name:"StringFunc","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:StringFunc\">func (StringFunc)</a> <a href=\"?m:StringFunc.String!\">String</a></h2>\n<code>func (f StringFunc) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Var!\">Var</a></h2>\n<pre>type Var interface {\n\tString() string\n}</pre>\n<p>\nVar is an abstract type for all exported variables.\n</p>\n\n",name:"Var","methods":[]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Get!\">Get</a></h2>\n<code>func Get(name string) Var</code>\n<p>\nGet retrieves a named exported variable.\n</p>\n\n",name:"Get"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Iter!\">Iter</a></h2>\n<code>func Iter() &lt;-chan KeyValue</code>\n\n",name:"Iter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewFloat!\">NewFloat</a></h2>\n<code>func NewFloat(name string) *Float</code>\n\n",name:"NewFloat"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewInt!\">NewInt</a></h2>\n<code>func NewInt(name string) *Int</code>\n\n",name:"NewInt"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewMap!\">NewMap</a></h2>\n<code>func NewMap(name string) *Map</code>\n\n",name:"NewMap"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewString!\">NewString</a></h2>\n<code>func NewString(name string) *String</code>\n\n",name:"NewString"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Publish!\">Publish</a></h2>\n<code>func Publish(name string, v Var)</code>\n<p>\nPublish declares an named exported variable. This should be called from a\npackage&#39;s init function when it creates its Vars. If the name is already\nregistered then this will log.Panic.\n</p>\n\n",name:"Publish"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:RemoveAll!\">RemoveAll</a></h2>\n<code>func RemoveAll()</code>\n<p>\nRemoveAll removes all exported variables.\nThis is for tests; don&#39;t call this on a real server.\n</p>\n\n",name:"RemoveAll"}],consts:[],vars:[]}