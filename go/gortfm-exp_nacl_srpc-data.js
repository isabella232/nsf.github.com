var gortfmData = {index:"index.html",html:"<p>\nThis package implements Native Client&#39;s simple RPC (SRPC).\n</p>\n",name:"srpc",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Client!\">Client</a></h2>\n<pre>type Client struct {\n\t// contains unexported fields\n}</pre>\n<p>\nA Client represents the client side of an SRPC connection.\n</p>\n\n",name:"Client","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Client\">func (*Client)</a> <a href=\"?m:Client.NewRPC!\">NewRPC</a></h2>\n<code>func (c *Client) NewRPC(done chan *RPC) *RPC</code>\n<p>\nNewRPC creates a new RPC on the client connection.\n</p>\n\n",name:"NewRPC"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Errno!\">Errno</a></h2>\n<pre>type Errno uint32</pre>\n<p>\nAn Errno is an SRPC status code.\n</p>\n\n",name:"Errno","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Errno\">func (Errno)</a> <a href=\"?m:Errno.String!\">String</a></h2>\n<code>func (e Errno) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Handler!\">Handler</a></h2>\n<pre>type Handler interface {\n\tRun(arg, ret []interface{}, size []int) Errno\n}</pre>\n<p>\nA Handler is a handler for an SRPC method.\nIt reads arguments from arg, checks size for array limits,\nwrites return values to ret, and returns an Errno status code.\n</p>\n\n",name:"Handler","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:RPC!\">RPC</a></h2>\n<pre>type RPC struct {\n\tRet   []interface{} // Return values\n\tDone  chan *RPC     // Channel where notification of done arrives\n\tErrno Errno         // Status code\n\t// contains unexported fields\n}</pre>\n<p>\nAn RPC represents a single RPC issued by a client.\n</p>\n\n",name:"RPC","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:RPC\">func (*RPC)</a> <a href=\"?m:RPC.Call!\">Call</a></h2>\n<code>func (r *RPC) Call(name string, arg []interface{}) (ret []interface{}, err Errno)</code>\n<p>\nCall is a convenient wrapper that starts the RPC request,\nwaits for it to finish, and then returns the results.\nIts implementation is:\n</p>\n<pre>r.Start(name, arg)\n&lt;-r.Done\nreturn r.Ret, r.Errno\n</pre>\n\n",name:"Call"},{html:"\n<h2><a class=\"black\" href=\"?m:RPC\">func (*RPC)</a> <a href=\"?m:RPC.Start!\">Start</a></h2>\n<code>func (r *RPC) Start(name string, arg []interface{})</code>\n<p>\nStart issues an RPC request for method name with the given arguments.\nThe RPC r must not be in use for another pending request.\nTo wait for the RPC to finish, receive from r.Done and then\ninspect r.Ret and r.Errno.\n</p>\n\n",name:"Start"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Add!\">Add</a></h2>\n<code>func Add(name, fmt string, handler Handler)</code>\n<p>\nAdd registers a handler for the named method.\nFmt is a Native Client format string, a sequence of\nalphabetic characters representing the types of the parameter values,\na colon, and then a sequence of alphabetic characters\nrepresenting the types of the returned values.\nThe format characters and corresponding dynamic types are:\n</p>\n<pre>b\tbool\nC\t[]byte\nd\tfloat64\nD\t[]float64\nh\tint\t// a file descriptor (aka handle)\ni\tint32\nI\t[]int32\ns\tstring\n</pre>\n\n",name:"Add"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Enabled!\">Enabled</a></h2>\n<code>func Enabled() bool</code>\n<p>\nEnabled returns true if SRPC is enabled in the Native Client runtime.\n</p>\n\n",name:"Enabled"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewClient!\">NewClient</a></h2>\n<code>func NewClient(fd int) (c *Client, err os.Error)</code>\n<p>\nNewClient allocates a new client using the file descriptor fd.\n</p>\n\n",name:"NewClient"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Serve!\">Serve</a></h2>\n<code>func Serve(fd int) os.Error</code>\n<p>\nServe accepts new SRPC connections from the file descriptor fd\nand answers RPCs issued on those connections.\nIt closes fd and returns an error if the imc_accept system call fails.\n</p>\n\n",name:"Serve"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ServeRuntime!\">ServeRuntime</a></h2>\n<code>func ServeRuntime() os.Error</code>\n<p>\nServeRuntime serves RPCs issued by the Native Client embedded runtime.\nThis should be called by main once all methods have been registered using Add.\n</p>\n\n",name:"ServeRuntime"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Errno!\">Errno</a></h2>\n<pre>const (\n\tOK Errno = 256 + iota\n\tErrBreak\n\tErrMessageTruncated\n\tErrNoMemory\n\tErrProtocolMismatch\n\tErrBadRPCNumber\n\tErrBadArgType\n\tErrTooFewArgs\n\tErrTooManyArgs\n\tErrInArgTypeMismatch\n\tErrOutArgTypeMismatch\n\tErrInternalError\n\tErrAppError\n)</pre>\n\n",names:["OK","ErrBreak","ErrMessageTruncated","ErrNoMemory","ErrProtocolMismatch","ErrBadRPCNumber","ErrBadArgType","ErrTooFewArgs","ErrTooManyArgs","ErrInArgTypeMismatch","ErrOutArgTypeMismatch","ErrInternalError","ErrAppError"],type:"Errno"}],vars:[]}