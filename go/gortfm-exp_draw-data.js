var gortfmData = {index:"index.html",html:"<p>\nPackage draw provides basic graphics and drawing primitives,\nin the style of the Plan 9 graphics library\n(see <a href=\"http://plan9.bell-labs.com/magic/man2html/2/draw\">http://plan9.bell-labs.com/magic/man2html/2/draw</a>)\nand the X Render extension.\n</p>\n",name:"draw",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ConfigEvent!\">ConfigEvent</a></h2>\n<pre>type ConfigEvent struct {\n\tConfig image.Config\n}</pre>\n<p>\nA ConfigEvent is sent each time the window&#39;s color model or size changes.\nThe client should respond by calling Window.Screen to obtain a new image.\n</p>\n\n",name:"ConfigEvent","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ErrEvent!\">ErrEvent</a></h2>\n<pre>type ErrEvent struct {\n\tErr os.Error\n}</pre>\n<p>\nAn ErrEvent is sent when an error occurs.\n</p>\n\n",name:"ErrEvent","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Image!\">Image</a></h2>\n<pre>type Image interface {\n\timage.Image\n\tSet(x, y int, c image.Color)\n}</pre>\n<p>\nA draw.Image is an image.Image with a Set method to change a single pixel.\n</p>\n\n",name:"Image","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:KeyEvent!\">KeyEvent</a></h2>\n<pre>type KeyEvent struct {\n\t// The value k represents key k being pressed.\n\t// The value -k represents key k being released.\n\t// The specific set of key values is not specified,\n\t// but ordinary characters represent themselves.\n\tKey int\n}</pre>\n<p>\nA KeyEvent is sent for a key press or release.\n</p>\n\n",name:"KeyEvent","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:MouseEvent!\">MouseEvent</a></h2>\n<pre>type MouseEvent struct {\n\t// Buttons is a bit mask of buttons: 1&lt;&lt;0 is left, 1&lt;&lt;1 middle, 1&lt;&lt;2 right.\n\t// It represents button state and not necessarily the state delta: bit 0\n\t// being on means that the left mouse button is down, but does not imply\n\t// that the same button was up in the previous MouseEvent.\n\tButtons int\n\t// Loc is the location of the cursor.\n\tLoc image.Point\n\t// Nsec is the event&#39;s timestamp.\n\tNsec int64\n}</pre>\n<p>\nA MouseEvent is sent for a button press or release or for a mouse movement.\n</p>\n\n",name:"MouseEvent","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Op!\">Op</a></h2>\n<pre>type Op int</pre>\n<p>\nA Porter-Duff compositing operator.\n</p>\n\n",name:"Op","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Window!\">Window</a></h2>\n<pre>type Window interface {\n\t// Screen returns an editable Image for the window.\n\tScreen() Image\n\t// FlushImage flushes changes made to Screen() back to screen.\n\tFlushImage()\n\t// EventChan returns a channel carrying UI events such as key presses,\n\t// mouse movements and window resizes.\n\tEventChan() &lt;-chan interface{}\n\t// Close closes the window.\n\tClose() os.Error\n}</pre>\n<p>\nA Window represents a single graphics window.\n</p>\n\n",name:"Window","methods":[]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Draw!\">Draw</a></h2>\n<code>func Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point)</code>\n<p>\nDraw calls DrawMask with a nil mask and an Over op.\n</p>\n\n",name:"Draw"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:DrawMask!\">DrawMask</a></h2>\n<code>func DrawMask(dst Image, r image.Rectangle, src image.Image, sp image.Point, mask image.Image, mp image.Point, op Op)</code>\n<p>\nDrawMask aligns r.Min in dst with sp in src and mp in mask and then replaces the rectangle r\nin dst with the result of a Porter-Duff composition. A nil mask is treated as opaque.\n</p>\n\n",name:"DrawMask"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Op!\">Op</a></h2>\n<pre>const (\n\t// Over specifies ``(src in mask) over dst&#39;&#39;.\n\tOver Op = iota\n\t// Src specifies ``src in mask&#39;&#39;.\n\tSrc\n)</pre>\n\n",names:["Over","Src"],type:"Op"}],vars:[]}