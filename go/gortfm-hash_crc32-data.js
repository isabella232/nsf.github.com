var gortfmData = {index:"index.html",html:"<p>\nThis package implements the 32-bit cyclic redundancy check, or CRC-32, checksum.\nSee <a href=\"http://en.wikipedia.org/wiki/Cyclic_redundancy_check\">http://en.wikipedia.org/wiki/Cyclic_redundancy_check</a> for information.\n</p>\n",name:"crc32",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Table!\">Table</a></h2>\n<pre>type Table [256]uint32</pre>\n<p>\nTable is a 256-word table representing the polynomial for efficient processing.\n</p>\n\n",name:"Table","methods":[]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Checksum!\">Checksum</a></h2>\n<code>func Checksum(data []byte, tab *Table) uint32</code>\n<p>\nChecksum returns the CRC-32 checksum of data\nusing the polynomial represented by the Table.\n</p>\n\n",name:"Checksum"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ChecksumIEEE!\">ChecksumIEEE</a></h2>\n<code>func ChecksumIEEE(data []byte) uint32</code>\n<p>\nChecksumIEEE returns the CRC-32 checksum of data\nusing the IEEE polynomial.\n</p>\n\n",name:"ChecksumIEEE"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:MakeTable!\">MakeTable</a></h2>\n<code>func MakeTable(poly uint32) *Table</code>\n<p>\nMakeTable returns the Table constructed from the specified polynomial.\n</p>\n\n",name:"MakeTable"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:New!\">New</a></h2>\n<code>func New(tab *Table) hash.Hash32</code>\n<p>\nNew creates a new hash.Hash32 computing the CRC-32 checksum\nusing the polynomial represented by the Table.\n</p>\n\n",name:"New"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewIEEE!\">NewIEEE</a></h2>\n<code>func NewIEEE() hash.Hash32</code>\n<p>\nNewIEEE creates a new hash.Hash32 computing the CRC-32 checksum\nusing the IEEE polynomial.\n</p>\n\n",name:"NewIEEE"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Update!\">Update</a></h2>\n<code>func Update(crc uint32, tab *Table, p []byte) uint32</code>\n<p>\nUpdate returns the result of adding the bytes in p to the crc.\n</p>\n\n",name:"Update"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Size!\">Size</a></h2>\n<pre>const Size = 4</pre>\n<p>\nThe size of a CRC-32 checksum in bytes.\n</p>\n\n",names:["Size"],type:""},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:IEEE!\"><em>group</em></a></h2>\n<pre>const (\n\t// Far and away the most common CRC-32 polynomial.\n\t// Used by ethernet (IEEE 802.3), v.42, fddi, gzip, zip, png, mpeg-2, ...\n\tIEEE = 0xedb88320\n\n\t// Castagnoli&#39;s polynomial, used in iSCSI.\n\t// Has better error detection characteristics than IEEE.\n\t// http://dx.doi.org/10.1109/26.231911\n\tCastagnoli = 0x82f63b78\n\n\t// Koopman&#39;s polynomial.\n\t// Also has better error detection characteristics than IEEE.\n\t// http://dx.doi.org/10.1109/DSN.2002.1028931\n\tKoopman = 0xeb31d82e\n)</pre>\n<p>\nPredefined polynomials.\n</p>\n\n",names:["IEEE","Castagnoli","Koopman"],type:""}],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:IEEETable!\">IEEETable</a></h2>\n<pre>var IEEETable = MakeTable(IEEE)</pre>\n<p>\nIEEETable is the table for the IEEE polynomial.\n</p>\n\n",names:["IEEETable"],type:""}]}