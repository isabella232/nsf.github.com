var gortfmData = {index:"index.html",html:"<p>\nPackage git85 implements the radix 85 data encoding\nused in the Git version control system.\n</p>\n",name:"git85",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:CorruptInputError!\">CorruptInputError</a></h2>\n<pre>type CorruptInputError int64</pre>\n\n",name:"CorruptInputError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:CorruptInputError\">func (CorruptInputError)</a> <a href=\"?m:CorruptInputError.String!\">String</a></h2>\n<code>func (e CorruptInputError) String() string</code>\n\n",name:"String"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Decode!\">Decode</a></h2>\n<code>func Decode(dst, src []byte) (n int, err os.Error)</code>\n<p>\nDecode decodes src into at most MaxDecodedLen(len(src))\nbytes, returning the actual number of bytes written to dst.\n</p>\n<p>\nIf Decode encounters invalid input, it returns a CorruptInputError.\n</p>\n\n",name:"Decode"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Encode!\">Encode</a></h2>\n<code>func Encode(dst, src []byte) int</code>\n<p>\nEncode encodes src into EncodedLen(len(src))\nbytes of dst.  As a convenience, it returns the number\nof bytes written to dst, but this value is always EncodedLen(len(src)).\nEncode implements the radix 85 encoding used in the\nGit version control tool.\n</p>\n<p>\nThe encoding splits src into chunks of at most 52 bytes\nand encodes each chunk on its own line.\n</p>\n\n",name:"Encode"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:EncodedLen!\">EncodedLen</a></h2>\n<code>func EncodedLen(n int) int</code>\n<p>\nEncodedLen returns the length of an encoding of n source bytes.\n</p>\n\n",name:"EncodedLen"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:MaxDecodedLen!\">MaxDecodedLen</a></h2>\n<code>func MaxDecodedLen(n int) int</code>\n\n",name:"MaxDecodedLen"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewDecoder!\">NewDecoder</a></h2>\n<code>func NewDecoder(r io.Reader) io.Reader</code>\n<p>\nNewDecoder returns a new Git base85 stream decoder.\n</p>\n\n",name:"NewDecoder"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEncoder!\">NewEncoder</a></h2>\n<code>func NewEncoder(w io.Writer) io.WriteCloser</code>\n<p>\nNewEncoder returns a new Git base85 stream encoder.  Data written to\nthe returned writer will be encoded and then written to w.\nThe Git encoding operates on 52-byte blocks; when finished\nwriting, the caller must Close the returned encoder to flush any\npartially written blocks.\n</p>\n\n",name:"NewEncoder"}],consts:[],vars:[]}