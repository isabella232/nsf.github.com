var gortfmData = {index:"index.html",html:"<p>\nPackage base64 implements base64 encoding as specified by RFC 4648.\n</p>\n",name:"base64",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:CorruptInputError!\">CorruptInputError</a></h2>\n<pre>type CorruptInputError int64</pre>\n\n",name:"CorruptInputError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:CorruptInputError\">func (CorruptInputError)</a> <a href=\"?m:CorruptInputError.String!\">String</a></h2>\n<code>func (e CorruptInputError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Encoding!\">Encoding</a></h2>\n<pre>type Encoding struct {\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nAn Encoding is a radix 64 encoding/decoding scheme, defined by a\n64-character alphabet.  The most common encoding is the &#34;base64&#34;\nencoding defined in RFC 4648 and used in MIME (RFC 2045) and PEM\n(RFC 1421).  RFC 4648 also defines an alternate encoding, which is\nthe standard encoding with - and _ substituted for + and /.\n</p>\n\n",name:"Encoding","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.Decode!\">Decode</a></h2>\n<code>func (enc *Encoding) Decode(dst, src []byte) (n int, err os.Error)</code>\n<p>\nDecode decodes src using the encoding enc.  It writes at most\nDecodedLen(len(src)) bytes to dst and returns the number of bytes\nwritten.  If src contains invalid base64 data, it will return the\nnumber of bytes successfully written and CorruptInputError.\n</p>\n\n",name:"Decode"},{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.DecodedLen!\">DecodedLen</a></h2>\n<code>func (enc *Encoding) DecodedLen(n int) int</code>\n<p>\nDecodedLen returns the maximum length in bytes of the decoded data\ncorresponding to n bytes of base64-encoded data.\n</p>\n\n",name:"DecodedLen"},{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.Encode!\">Encode</a></h2>\n<code>func (enc *Encoding) Encode(dst, src []byte)</code>\n<p>\nEncode encodes src using the encoding enc, writing\nEncodedLen(len(src)) bytes to dst.\n</p>\n<p>\nThe encoding pads the output to a multiple of 4 bytes,\nso Encode is not appropriate for use on individual blocks\nof a large data stream.  Use NewEncoder() instead.\n</p>\n\n",name:"Encode"},{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.EncodedLen!\">EncodedLen</a></h2>\n<code>func (enc *Encoding) EncodedLen(n int) int</code>\n<p>\nEncodedLen returns the length in bytes of the base64 encoding\nof an input buffer of length n.\n</p>\n\n",name:"EncodedLen"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewDecoder!\">NewDecoder</a></h2>\n<code>func NewDecoder(enc *Encoding, r io.Reader) io.Reader</code>\n<p>\nNewDecoder constructs a new base64 stream decoder.\n</p>\n\n",name:"NewDecoder"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEncoder!\">NewEncoder</a></h2>\n<code>func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser</code>\n<p>\nNewEncoder returns a new base64 stream encoder.  Data written to\nthe returned writer will be encoded using enc and then written to w.\nBase64 encodings operate in 4-byte blocks; when finished\nwriting, the caller must Close the returned encoder to flush any\npartially written blocks.\n</p>\n\n",name:"NewEncoder"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEncoding!\">NewEncoding</a></h2>\n<code>func NewEncoding(encoder string) *Encoding</code>\n<p>\nNewEncoding returns a new Encoding defined by the given alphabet,\nwhich must be a 64-byte string.\n</p>\n\n",name:"NewEncoding"}],consts:[],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:StdEncoding!\">StdEncoding</a></h2>\n<pre>var StdEncoding = NewEncoding(encodeStd)</pre>\n<p>\nStdEncoding is the standard base64 encoding, as defined in\nRFC 4648.\n</p>\n\n",names:["StdEncoding"],type:""},{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:URLEncoding!\">URLEncoding</a></h2>\n<pre>var URLEncoding = NewEncoding(encodeURL)</pre>\n<p>\nURLEncoding is the alternate base64 encoding defined in RFC 4648.\nIt is typically used in URLs and file names.\n</p>\n\n",names:["URLEncoding"],type:""}]}