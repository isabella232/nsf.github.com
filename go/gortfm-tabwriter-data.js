var gortfmData = {index:"index.html",html:"<p>\nPackage tabwriter implements a write filter (tabwriter.Writer) that\ntranslates tabbed columns in input into properly aligned text.\n</p>\n<p>\nThe package is using the Elastic Tabstops algorithm described at\n<a href=\"http://nickgravgaard.com/elastictabstops/index.html\">http://nickgravgaard.com/elastictabstops/index.html</a>.\n</p>\n",name:"tabwriter",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Writer!\">Writer</a></h2>\n<pre>type Writer struct {\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nA Writer is a filter that inserts padding around tab-delimited\ncolumns in its input to align them in the output.\n</p>\n<p>\nThe Writer treats incoming bytes as UTF-8 encoded text consisting\nof cells terminated by (horizontal or vertical) tabs or line\nbreaks (newline or formfeed characters). Cells in adjacent lines\nconstitute a column. The Writer inserts padding as needed to\nmake all cells in a column have the same width, effectively\naligning the columns. It assumes that all characters have the\nsame width except for tabs for which a tabwidth must be specified.\nNote that cells are tab-terminated, not tab-separated: trailing\nnon-tab text at the end of a line does not form a column cell.\n</p>\n<p>\nThe Writer assumes that all Unicode code points have the same width;\nthis may not be true in some fonts.\n</p>\n<p>\nIf DiscardEmptyColumns is set, empty columns that are terminated\nentirely by vertical (or &#34;soft&#34;) tabs are discarded. Columns\nterminated by horizontal (or &#34;hard&#34;) tabs are not affected by\nthis flag.\n</p>\n<p>\nIf a Writer is configured to filter HTML, HTML tags and entities\nare simply passed through. The widths of tags and entities are\nassumed to be zero (tags) and one (entities) for formatting purposes.\n</p>\n<p>\nA segment of text may be escaped by bracketing it with Escape\ncharacters. The tabwriter passes escaped text segments through\nunchanged. In particular, it does not interpret any tabs or line\nbreaks within the segment. If the StripEscape flag is set, the\nEscape characters are stripped from the output; otherwise they\nare passed through as well. For the purpose of formatting, the\nwidth of the escaped text is always computed excluding the Escape\ncharacters.\n</p>\n<p>\nThe formfeed character (&#39;\\f&#39;) acts like a newline but it also\nterminates all columns in the current line (effectively calling\nFlush). Cells in the next line start new columns. Unless found\ninside an HTML tag or inside an escaped text segment, formfeed\ncharacters appear as newlines in the output.\n</p>\n<p>\nThe Writer must buffer input internally, because proper spacing\nof one line may depend on the cells in future lines. Clients must\ncall Flush when done calling Write.\n</p>\n\n",name:"Writer","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Writer\">func (*Writer)</a> <a href=\"?m:Writer.Flush!\">Flush</a></h2>\n<code>func (b *Writer) Flush() (err os.Error)</code>\n<p>\nFlush should be called after the last call to Write to ensure\nthat any data buffered in the Writer is written to output. Any\nincomplete escape sequence at the end is simply considered\ncomplete for formatting purposes.\n</p>\n\n",name:"Flush"},{html:"\n<h2><a class=\"black\" href=\"?m:Writer\">func (*Writer)</a> <a href=\"?m:Writer.Init!\">Init</a></h2>\n<code>func (b *Writer) Init(output io.Writer, minwidth, tabwidth, padding int, padchar byte, flags uint) *Writer</code>\n<p>\nA Writer must be initialized with a call to Init. The first parameter (output)\nspecifies the filter output. The remaining parameters control the formatting:\n</p>\n<pre>minwidth\tminimal cell width including any padding\ntabwidth\twidth of tab characters (equivalent number of spaces)\npadding\t\tpadding added to a cell before computing its width\npadchar\t\tASCII char used for padding\n\t\tif padchar == &#39;\\t&#39;, the Writer will assume that the\n\t\twidth of a &#39;\\t&#39; in the formatted output is tabwidth,\n\t\tand cells are left-aligned independent of align_left\n\t\t(for correct-looking results, tabwidth must correspond\n\t\tto the tab width in the viewer displaying the result)\nflags\t\tformatting control\n</pre>\n<p>\nTo format in tab-separated columns with a tab stop of 8:\n</p>\n<pre>b.Init(w, 8, 1, 8, &#39;\\t&#39;, 0);\n</pre>\n<p>\nTo format in space-separated columns with at least 4 spaces between columns:\n</p>\n<pre>b.Init(w, 0, 4, 8, &#39; &#39;, 0);\n</pre>\n\n",name:"Init"},{html:"\n<h2><a class=\"black\" href=\"?m:Writer\">func (*Writer)</a> <a href=\"?m:Writer.Write!\">Write</a></h2>\n<code>func (b *Writer) Write(buf []byte) (n int, err os.Error)</code>\n<p>\nWrite writes buf to the writer b.\nThe only errors returned are ones encountered\nwhile writing to the underlying output stream.\n</p>\n\n",name:"Write"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewWriter!\">NewWriter</a></h2>\n<code>func NewWriter(output io.Writer, minwidth, tabwidth, padding int, padchar byte, flags uint) *Writer</code>\n<p>\nNewWriter allocates and initializes a new tabwriter.Writer.\nThe parameters are the same as for the the Init function.\n</p>\n\n",name:"NewWriter"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:FilterHTML!\"><em>group</em></a></h2>\n<pre>const (\n\t// Ignore html tags and treat entities (starting with &#39;&amp;&#39;\n\t// and ending in &#39;;&#39;) as single characters (width = 1).\n\tFilterHTML uint = 1 &lt;&lt; iota\n\n\t// Strip Escape characters bracketing escaped text segments\n\t// instead of passing them through unchanged with the text.\n\tStripEscape\n\n\t// Force right-alignment of cell content.\n\t// Default is left-alignment.\n\tAlignRight\n\n\t// Handle empty columns as if they were not present in\n\t// the input in the first place.\n\tDiscardEmptyColumns\n\n\t// Always use tabs for indentation columns (i.e., padding of\n\t// leading empty cells on the left) independent of padchar.\n\tTabIndent\n\n\t// Print a vertical bar (&#39;|&#39;) between columns (after formatting).\n\t// Discarded colums appear as zero-width columns (&#34;||&#34;).\n\tDebug\n)</pre>\n<p>\nFormatting can be controlled with these flags.\n</p>\n\n",names:["FilterHTML","StripEscape","AlignRight","DiscardEmptyColumns","TabIndent","Debug"],type:""},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Escape!\">Escape</a></h2>\n<pre>const Escape = &#39;\\xff&#39;</pre>\n<p>\nTo escape a text segment, bracket it with Escape characters.\nFor instance, the tab in this string &#34;Ignore this tab: \\xff\\t\\xff&#34;\ndoes not terminate a cell and constitutes a single character of\nwidth one for formatting purposes.\n</p>\n<p>\nThe value 0xff was chosen because it cannot appear in a valid UTF-8 sequence.\n</p>\n\n",names:["Escape"],type:""}],vars:[]}