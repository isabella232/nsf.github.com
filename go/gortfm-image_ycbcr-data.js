var gortfmData = {index:"index.html",html:"<p>\nPackage ycbcr provides images from the Y&#39;CbCr color model.\n</p>\n<p>\nJPEG, VP8, the MPEG family and other codecs use this color model. Such\ncodecs often use the terms YUV and Y&#39;CbCr interchangeably, but strictly\nspeaking, the term YUV applies only to analog video signals.\n</p>\n<p>\nConversion between RGB and Y&#39;CbCr is lossy and there are multiple, slightly\ndifferent formulae for converting between the two. This package follows\nthe JFIF specification at <a href=\"http://www.w3.org/Graphics/JPEG/jfif3.pdf\">http://www.w3.org/Graphics/JPEG/jfif3.pdf</a>.\n</p>\n",name:"ycbcr",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SubsampleRatio!\">SubsampleRatio</a></h2>\n<pre>type SubsampleRatio int</pre>\n<p>\nSubsampleRatio is the chroma subsample ratio used in a YCbCr image.\n</p>\n\n",name:"SubsampleRatio","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:YCbCr!\">YCbCr</a></h2>\n<pre>type YCbCr struct {\n\tY              []uint8\n\tCb             []uint8\n\tCr             []uint8\n\tYStride        int\n\tCStride        int\n\tSubsampleRatio SubsampleRatio\n\tRect           image.Rectangle\n}</pre>\n<p>\nYCbCr is an in-memory image of YCbCr colors. There is one Y sample per pixel,\nbut each Cb and Cr sample can span one or more pixels.\nYStride is the Y slice index delta between vertically adjacent pixels.\nCStride is the Cb and Cr slice index delta between vertically adjacent pixels\nthat map to separate chroma samples.\nIt is not an absolute requirement, but YStride and len(Y) are typically\nmultiples of 8, and:\n</p>\n<pre>For 4:4:4, CStride == YStride/1 &amp;&amp; len(Cb) == len(Cr) == len(Y)/1.\nFor 4:2:2, CStride == YStride/2 &amp;&amp; len(Cb) == len(Cr) == len(Y)/2.\nFor 4:2:0, CStride == YStride/2 &amp;&amp; len(Cb) == len(Cr) == len(Y)/4.\n</pre>\n\n",name:"YCbCr","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:YCbCr\">func (*YCbCr)</a> <a href=\"?m:YCbCr.At!\">At</a></h2>\n<code>func (p *YCbCr) At(x, y int) image.Color</code>\n\n",name:"At"},{html:"\n<h2><a class=\"black\" href=\"?m:YCbCr\">func (*YCbCr)</a> <a href=\"?m:YCbCr.Bounds!\">Bounds</a></h2>\n<code>func (p *YCbCr) Bounds() image.Rectangle</code>\n\n",name:"Bounds"},{html:"\n<h2><a class=\"black\" href=\"?m:YCbCr\">func (*YCbCr)</a> <a href=\"?m:YCbCr.ColorModel!\">ColorModel</a></h2>\n<code>func (p *YCbCr) ColorModel() image.ColorModel</code>\n\n",name:"ColorModel"},{html:"\n<h2><a class=\"black\" href=\"?m:YCbCr\">func (*YCbCr)</a> <a href=\"?m:YCbCr.Opaque!\">Opaque</a></h2>\n<code>func (p *YCbCr) Opaque() bool</code>\n\n",name:"Opaque"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:YCbCrColor!\">YCbCrColor</a></h2>\n<pre>type YCbCrColor struct {\n\tY, Cb, Cr uint8\n}</pre>\n<p>\nYCbCrColor represents a fully opaque 24-bit Y&#39;CbCr color, having 8 bits for\neach of one luma and two chroma components.\n</p>\n\n",name:"YCbCrColor","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:YCbCrColor\">func (YCbCrColor)</a> <a href=\"?m:YCbCrColor.RGBA!\">RGBA</a></h2>\n<code>func (c YCbCrColor) RGBA() (uint32, uint32, uint32, uint32)</code>\n\n",name:"RGBA"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:RGBToYCbCr!\">RGBToYCbCr</a></h2>\n<code>func RGBToYCbCr(r, g, b uint8) (uint8, uint8, uint8)</code>\n<p>\nRGBToYCbCr converts an RGB triple to a YCbCr triple. All components lie\nwithin the range [0, 255].\n</p>\n\n",name:"RGBToYCbCr"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:YCbCrToRGB!\">YCbCrToRGB</a></h2>\n<code>func YCbCrToRGB(y, cb, cr uint8) (uint8, uint8, uint8)</code>\n<p>\nYCbCrToRGB converts a YCbCr triple to an RGB triple. All components lie\nwithin the range [0, 255].\n</p>\n\n",name:"YCbCrToRGB"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SubsampleRatio!\">SubsampleRatio</a></h2>\n<pre>const (\n\tSubsampleRatio444 SubsampleRatio = iota\n\tSubsampleRatio422\n\tSubsampleRatio420\n)</pre>\n\n",names:["SubsampleRatio444","SubsampleRatio422","SubsampleRatio420"],type:"SubsampleRatio"}],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:YCbCrColorModel!\">YCbCrColorModel</a></h2>\n<pre>var YCbCrColorModel image.ColorModel = image.ColorModelFunc(toYCbCrColor)</pre>\n<p>\nYCbCrColorModel is the color model for YCbCrColor.\n</p>\n\n",names:["YCbCrColorModel"],type:""}]}