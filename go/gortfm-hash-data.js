var gortfmData = {index:"index.html",html:"",name:"hash",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Hash!\">Hash</a></h2>\n<pre>type Hash interface {\n\t// Write adds more data to the running hash.\n\t// It never returns an error.\n\tio.Writer\n\n\t// Sum returns the current hash, without changing the\n\t// underlying hash state.\n\tSum() []byte\n\n\t// Reset resets the hash to one with zero bytes written.\n\tReset()\n\n\t// Size returns the number of bytes Sum will return.\n\tSize() int\n}</pre>\n<p>\nHash is the common interface implemented by all hash functions.\n</p>\n\n",name:"Hash","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Hash32!\">Hash32</a></h2>\n<pre>type Hash32 interface {\n\tHash\n\tSum32() uint32\n}</pre>\n<p>\nHash32 is the common interface implemented by all 32-bit hash functions.\n</p>\n\n",name:"Hash32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Hash64!\">Hash64</a></h2>\n<pre>type Hash64 interface {\n\tHash\n\tSum64() uint64\n}</pre>\n<p>\nHash64 is the common interface implemented by all 64-bit hash functions.\n</p>\n\n",name:"Hash64","methods":[]}],funcs:[],consts:[],vars:[]}