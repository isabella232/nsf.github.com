var gortfmData = {index:"index.html",html:"<p>\nThe sort package provides primitives for sorting arrays\nand user-defined collections.\n</p>\n",name:"sort",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Float64Array!\">Float64Array</a></h2>\n<pre>type Float64Array []float64</pre>\n<p>\nFloat64Array attaches the methods of Interface to []float64, sorting in increasing order.\n</p>\n\n",name:"Float64Array","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Float64Array\">func (Float64Array)</a> <a href=\"?m:Float64Array.Len!\">Len</a></h2>\n<code>func (p Float64Array) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:Float64Array\">func (Float64Array)</a> <a href=\"?m:Float64Array.Less!\">Less</a></h2>\n<code>func (p Float64Array) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:Float64Array\">func (Float64Array)</a> <a href=\"?m:Float64Array.Search!\">Search</a></h2>\n<code>func (p Float64Array) Search(x float64) int</code>\n<p>\nSearch returns the result of applying SearchFloat64s to the receiver and x.\n</p>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?m:Float64Array\">func (Float64Array)</a> <a href=\"?m:Float64Array.Sort!\">Sort</a></h2>\n<code>func (p Float64Array) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:Float64Array\">func (Float64Array)</a> <a href=\"?m:Float64Array.Swap!\">Swap</a></h2>\n<code>func (p Float64Array) Swap(i, j int)</code>\n\n",name:"Swap"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:IntArray!\">IntArray</a></h2>\n<pre>type IntArray []int</pre>\n<p>\nIntArray attaches the methods of Interface to []int, sorting in increasing order.\n</p>\n\n",name:"IntArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Len!\">Len</a></h2>\n<code>func (p IntArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Less!\">Less</a></h2>\n<code>func (p IntArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Search!\">Search</a></h2>\n<code>func (p IntArray) Search(x int) int</code>\n<p>\nSearch returns the result of applying SearchInts to the receiver and x.\n</p>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Sort!\">Sort</a></h2>\n<code>func (p IntArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Swap!\">Swap</a></h2>\n<code>func (p IntArray) Swap(i, j int)</code>\n\n",name:"Swap"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Interface!\">Interface</a></h2>\n<pre>type Interface interface {\n\t// Len is the number of elements in the collection.\n\tLen() int\n\t// Less returns whether the element with index i should sort\n\t// before the element with index j.\n\tLess(i, j int) bool\n\t// Swap swaps the elements with indexes i and j.\n\tSwap(i, j int)\n}</pre>\n<p>\nA type, typically a collection, that satisfies sort.Interface can be\nsorted by the routines in this package.  The methods require that the\nelements of the collection be enumerated by an integer index.\n</p>\n\n",name:"Interface","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:StringArray!\">StringArray</a></h2>\n<pre>type StringArray []string</pre>\n<p>\nStringArray attaches the methods of Interface to []string, sorting in increasing order.\n</p>\n\n",name:"StringArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Len!\">Len</a></h2>\n<code>func (p StringArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Less!\">Less</a></h2>\n<code>func (p StringArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Search!\">Search</a></h2>\n<code>func (p StringArray) Search(x string) int</code>\n<p>\nSearch returns the result of applying SearchStrings to the receiver and x.\n</p>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Sort!\">Sort</a></h2>\n<code>func (p StringArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Swap!\">Swap</a></h2>\n<code>func (p StringArray) Swap(i, j int)</code>\n\n",name:"Swap"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64sAreSorted!\">Float64sAreSorted</a></h2>\n<code>func Float64sAreSorted(a []float64) bool</code>\n<p>\nFloat64sAreSorted tests whether an array of float64s is sorted in increasing order.\n</p>\n\n",name:"Float64sAreSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IntsAreSorted!\">IntsAreSorted</a></h2>\n<code>func IntsAreSorted(a []int) bool</code>\n<p>\nIntsAreSorted tests whether an array of ints is sorted in increasing order.\n</p>\n\n",name:"IntsAreSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IsSorted!\">IsSorted</a></h2>\n<code>func IsSorted(data Interface) bool</code>\n\n",name:"IsSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Search!\">Search</a></h2>\n<code>func Search(n int, f func(int) bool) int</code>\n<p>\nSearch uses binary search to find and return the smallest index i\nin [0, n) at which f(i) is true, assuming that on the range [0, n),\nf(i) == true implies f(i+1) == true.  That is, Search requires that\nf is false for some (possibly empty) prefix of the input range [0, n)\nand then true for the (possibly empty) remainder; Search returns\nthe first true index.  If there is no such index, Search returns n.\nSearch calls f(i) only for i in the range [0, n).\n</p>\n<p>\nA common use of Search is to find the index i for a value x in\na sorted, indexable data structure like an array or slice.\nIn this case, the argument f, typically a closure, captures the value\nto be searched for, and how the data structure is indexed and\nordered.\n</p>\n<p>\nFor instance, given a slice data sorted in ascending order,\nthe call Search(len(data), func(i int) bool { return data[i] &gt;= 23 })\nreturns the smallest index i such that data[i] &gt;= 23.  If the caller\nwants to find whether 23 is in the slice, it must test data[i] == 23\nseparately.\n</p>\n<p>\nSearching data sorted in descending order would use the &lt;=\noperator instead of the &gt;= operator.\n</p>\n<p>\nTo complete the example above, the following code tries to find the value\nx in an integer slice data sorted in ascending order:\n</p>\n<pre>x := 23\ni := sort.Search(len(data), func(i int) bool { return data[i] &gt;= x })\nif i &lt; len(data) &amp;&amp; data[i] == x {\n\t// x is present at data[i]\n} else {\n\t// x is not present in data,\n\t// but i is the index where it would be inserted.\n}\n</pre>\n<p>\nAs a more whimsical example, this program guesses your number:\n</p>\n<pre>func GuessingGame() {\n\tvar s string\n\tfmt.Printf(&#34;Pick an integer from 0 to 100.\\n&#34;)\n\tanswer := sort.Search(100, func(i int) bool {\n\t\tfmt.Printf(&#34;Is your number &lt;= %d? &#34;, i)\n\t\tfmt.Scanf(&#34;%s&#34;, &amp;s)\n\t\treturn s != &#34;&#34; &amp;&amp; s[0] == &#39;y&#39;\n\t})\n\tfmt.Printf(&#34;Your number is %d.\\n&#34;, answer)\n}\n</pre>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SearchFloat64s!\">SearchFloat64s</a></h2>\n<code>func SearchFloat64s(a []float64, x float64) int</code>\n<p>\nSearchFloat64s searches for x in a sorted slice of float64s and returns the index\nas specified by Search. The array must be sorted in ascending order.\n</p>\n\n",name:"SearchFloat64s"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SearchInts!\">SearchInts</a></h2>\n<code>func SearchInts(a []int, x int) int</code>\n<p>\nSearchInts searches for x in a sorted slice of ints and returns the index\nas specified by Search. The array must be sorted in ascending order.\n</p>\n\n",name:"SearchInts"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SearchStrings!\">SearchStrings</a></h2>\n<code>func SearchStrings(a []string, x string) int</code>\n<p>\nSearchStrings searches for x in a sorted slice of strings and returns the index\nas specified by Search. The array must be sorted in ascending order.\n</p>\n\n",name:"SearchStrings"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sort!\">Sort</a></h2>\n<code>func Sort(data Interface)</code>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortFloat64s!\">SortFloat64s</a></h2>\n<code>func SortFloat64s(a []float64)</code>\n<p>\nSortFloat64s sorts an array of float64s in increasing order.\n</p>\n\n",name:"SortFloat64s"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortInts!\">SortInts</a></h2>\n<code>func SortInts(a []int)</code>\n<p>\nSortInts sorts an array of ints in increasing order.\n</p>\n\n",name:"SortInts"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortStrings!\">SortStrings</a></h2>\n<code>func SortStrings(a []string)</code>\n<p>\nSortStrings sorts an array of strings in increasing order.\n</p>\n\n",name:"SortStrings"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:StringsAreSorted!\">StringsAreSorted</a></h2>\n<code>func StringsAreSorted(a []string) bool</code>\n<p>\nStringsAreSorted tests whether an array of strings is sorted in increasing order.\n</p>\n\n",name:"StringsAreSorted"}],consts:[],vars:[]}