var gortfmData = {index:"index.html",html:"<p>\nThe sort package provides primitives for sorting arrays\nand user-defined collections.\n</p>\n",name:"sort",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FloatArray!\">FloatArray</a></h2>\n<pre>type FloatArray []float</pre>\n<p>\nFloatArray attaches the methods of Interface to []float, sorting in increasing order.\n</p>\n\n",name:"FloatArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Len!\">Len</a></h2>\n<code>func (p FloatArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Less!\">Less</a></h2>\n<code>func (p FloatArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Search!\">Search</a></h2>\n<code>func (p FloatArray) Search(x float) int</code>\n<p>\nSearch returns the result of applying SearchFloats to the receiver and x.\n</p>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Sort!\">Sort</a></h2>\n<code>func (p FloatArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Swap!\">Swap</a></h2>\n<code>func (p FloatArray) Swap(i, j int)</code>\n\n",name:"Swap"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:IntArray!\">IntArray</a></h2>\n<pre>type IntArray []int</pre>\n<p>\nIntArray attaches the methods of Interface to []int, sorting in increasing order.\n</p>\n\n",name:"IntArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Len!\">Len</a></h2>\n<code>func (p IntArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Less!\">Less</a></h2>\n<code>func (p IntArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Search!\">Search</a></h2>\n<code>func (p IntArray) Search(x int) int</code>\n<p>\nSearch returns the result of applying SearchInts to the receiver and x.\n</p>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Sort!\">Sort</a></h2>\n<code>func (p IntArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Swap!\">Swap</a></h2>\n<code>func (p IntArray) Swap(i, j int)</code>\n\n",name:"Swap"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Interface!\">Interface</a></h2>\n<pre>type Interface interface {\n\t// Len is the number of elements in the collection.\n\tLen() int\n\t// Less returns whether the element with index i should sort\n\t// before the element with index j.\n\tLess(i, j int) bool\n\t// Swap swaps the elements with indexes i and j.\n\tSwap(i, j int)\n}</pre>\n<p>\nA type, typically a collection, that satisfies sort.Interface can be\nsorted by the routines in this package.  The methods require that the\nelements of the collection be enumerated by an integer index.\n</p>\n\n",name:"Interface","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:StringArray!\">StringArray</a></h2>\n<pre>type StringArray []string</pre>\n<p>\nStringArray attaches the methods of Interface to []string, sorting in increasing order.\n</p>\n\n",name:"StringArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Len!\">Len</a></h2>\n<code>func (p StringArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Less!\">Less</a></h2>\n<code>func (p StringArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Search!\">Search</a></h2>\n<code>func (p StringArray) Search(x string) int</code>\n<p>\nSearch returns the result of applying SearchStrings to the receiver and x.\n</p>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Sort!\">Sort</a></h2>\n<code>func (p StringArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Swap!\">Swap</a></h2>\n<code>func (p StringArray) Swap(i, j int)</code>\n\n",name:"Swap"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:FloatsAreSorted!\">FloatsAreSorted</a></h2>\n<code>func FloatsAreSorted(a []float) bool</code>\n<p>\nFloatsAreSorted tests whether an array of floats is sorted in increasing order.\n</p>\n\n",name:"FloatsAreSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IntsAreSorted!\">IntsAreSorted</a></h2>\n<code>func IntsAreSorted(a []int) bool</code>\n<p>\nIntsAreSorted tests whether an array of ints is sorted in increasing order.\n</p>\n\n",name:"IntsAreSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IsSorted!\">IsSorted</a></h2>\n<code>func IsSorted(data Interface) bool</code>\n\n",name:"IsSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Search!\">Search</a></h2>\n<code>func Search(n int, f func(int) bool) int</code>\n<p>\nSearch uses binary search to find the index i for a value x in an indexable\nand sorted data structure of n elements.  The argument function f captures\nthe value to be searched for, how the elements are indexed, and how they are\nsorted.  It will often be passed as a closure.  For instance, given a slice\nof integers, []data, sorted in ascending order, the function\n</p>\n<pre>func(i int) bool { return data[i] &lt;= 23 }\n</pre>\n<p>\ncan be used to search for the value 23 in data.  The relationship expressed\nby the function must be &#34;less or equal&#34; if the elements are sorted in ascending\norder or &#34;greater or equal&#34; if they are sorted in descending order.\nThe function f will be called with values of i in the range 0 to n-1.\n</p>\n<p>\nFor brevity, this discussion assumes ascending sort order. For descending\norder, replace &lt;= with &gt;=, and swap &#39;smaller&#39; with &#39;larger&#39;.\n</p>\n<p>\nIf data[0] &lt;= x and x &lt;= data[n-1], Search returns the index i with:\n</p>\n<pre>data[i] &lt;= x &amp;&amp; x &lt;= data[i+1]\n</pre>\n<p>\nwhere data[n] is assumed to be larger than any x.  Thus, i is the index of x\nif it is present in the data.  It is the responsibility of the caller to\nverify the actual presence by testing if data[i] == x.\n</p>\n<p>\nIf n == 0 or if x is smaller than any element in data (f is always false),\nthe result is 0.  If x is larger than any element in data (f is always true),\nthe result is n-1.\n</p>\n<p>\nTo complete the example above, the following code tries to find the element\nelem in an integer slice data sorted in ascending order:\n</p>\n<pre>elem := 23\ni := sort.Search(len(data), func(i int) bool { return data[i] &lt;= elem })\nif len(data) &gt; 0 &amp;&amp; data[i] == elem {\n\t// elem is present at data[i]\n} else {\n\t// elem is not present in data\n}\n</pre>\n\n",name:"Search"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SearchFloats!\">SearchFloats</a></h2>\n<code>func SearchFloats(a []float, x float) int</code>\n<p>\nSearchFloats searches x in a sorted slice of floats and returns the index\nas specified by Search. The array must be sorted in ascending order.\n</p>\n\n",name:"SearchFloats"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SearchInts!\">SearchInts</a></h2>\n<code>func SearchInts(a []int, x int) int</code>\n<p>\nSearchInts searches x in a sorted slice of ints and returns the index\nas specified by Search. The array must be sorted in ascending order.\n</p>\n\n",name:"SearchInts"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SearchStrings!\">SearchStrings</a></h2>\n<code>func SearchStrings(a []string, x string) int</code>\n<p>\nSearchStrings searches x in a sorted slice of strings and returns the index\nas specified by Search. The array must be sorted in ascending order.\n</p>\n\n",name:"SearchStrings"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sort!\">Sort</a></h2>\n<code>func Sort(data Interface)</code>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortFloats!\">SortFloats</a></h2>\n<code>func SortFloats(a []float)</code>\n<p>\nSortFloats sorts an array of floats in increasing order.\n</p>\n\n",name:"SortFloats"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortInts!\">SortInts</a></h2>\n<code>func SortInts(a []int)</code>\n<p>\nSortInts sorts an array of ints in increasing order.\n</p>\n\n",name:"SortInts"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortStrings!\">SortStrings</a></h2>\n<code>func SortStrings(a []string)</code>\n<p>\nSortStrings sorts an array of strings in increasing order.\n</p>\n\n",name:"SortStrings"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:StringsAreSorted!\">StringsAreSorted</a></h2>\n<code>func StringsAreSorted(a []string) bool</code>\n<p>\nStringsAreSorted tests whether an array of strings is sorted in increasing order.\n</p>\n\n",name:"StringsAreSorted"}],consts:[],vars:[]}