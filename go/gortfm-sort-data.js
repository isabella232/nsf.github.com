var gortfmData = {index:"index.html",html:"<p>\nThe sort package provides primitives for sorting arrays\nand user-defined collections.\n</p>\n",name:"sort",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FloatArray!\">FloatArray</a></h2>\n<pre>type FloatArray []float</pre>\n<p>\nFloatArray attaches the methods of Interface to []float, sorting in increasing order.\n</p>\n\n",name:"FloatArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Len!\">Len</a></h2>\n<code>func (p FloatArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Less!\">Less</a></h2>\n<code>func (p FloatArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Sort!\">Sort</a></h2>\n<code>func (p FloatArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:FloatArray\">func (FloatArray)</a> <a href=\"?m:FloatArray.Swap!\">Swap</a></h2>\n<code>func (p FloatArray) Swap(i, j int)</code>\n\n",name:"Swap"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:IntArray!\">IntArray</a></h2>\n<pre>type IntArray []int</pre>\n<p>\nIntArray attaches the methods of Interface to []int, sorting in increasing order.\n</p>\n\n",name:"IntArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Len!\">Len</a></h2>\n<code>func (p IntArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Less!\">Less</a></h2>\n<code>func (p IntArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Sort!\">Sort</a></h2>\n<code>func (p IntArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:IntArray\">func (IntArray)</a> <a href=\"?m:IntArray.Swap!\">Swap</a></h2>\n<code>func (p IntArray) Swap(i, j int)</code>\n\n",name:"Swap"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Interface!\">Interface</a></h2>\n<pre>type Interface interface {\n\t// Len is the number of elements in the collection.\n\tLen() int\n\t// Less returns whether the element with index i should sort\n\t// before the element with index j.\n\tLess(i, j int) bool\n\t// Swap swaps the elements with indexes i and j.\n\tSwap(i, j int)\n}</pre>\n<p>\nA type, typically a collection, that satisfies sort.Interface can be\nsorted by the routines in this package.  The methods require that the\nelements of the collection be enumerated by an integer index.\n</p>\n\n",name:"Interface","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:StringArray!\">StringArray</a></h2>\n<pre>type StringArray []string</pre>\n<p>\nStringArray attaches the methods of Interface to []string, sorting in increasing order.\n</p>\n\n",name:"StringArray","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Len!\">Len</a></h2>\n<code>func (p StringArray) Len() int</code>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Less!\">Less</a></h2>\n<code>func (p StringArray) Less(i, j int) bool</code>\n\n",name:"Less"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Sort!\">Sort</a></h2>\n<code>func (p StringArray) Sort()</code>\n<p>\nSort is a convenience method.\n</p>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?m:StringArray\">func (StringArray)</a> <a href=\"?m:StringArray.Swap!\">Swap</a></h2>\n<code>func (p StringArray) Swap(i, j int)</code>\n\n",name:"Swap"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:FloatsAreSorted!\">FloatsAreSorted</a></h2>\n<code>func FloatsAreSorted(a []float) bool</code>\n<p>\nFloatsAreSorted tests whether an array of floats is sorted in increasing order.\n</p>\n\n",name:"FloatsAreSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IntsAreSorted!\">IntsAreSorted</a></h2>\n<code>func IntsAreSorted(a []int) bool</code>\n<p>\nIntsAreSorted tests whether an array of ints is sorted in increasing order.\n</p>\n\n",name:"IntsAreSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:IsSorted!\">IsSorted</a></h2>\n<code>func IsSorted(data Interface) bool</code>\n\n",name:"IsSorted"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sort!\">Sort</a></h2>\n<code>func Sort(data Interface)</code>\n\n",name:"Sort"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortFloats!\">SortFloats</a></h2>\n<code>func SortFloats(a []float)</code>\n<p>\nSortFloats sorts an array of floats in increasing order.\n</p>\n\n",name:"SortFloats"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortInts!\">SortInts</a></h2>\n<code>func SortInts(a []int)</code>\n<p>\nSortInts sorts an array of ints in increasing order.\n</p>\n\n",name:"SortInts"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:SortStrings!\">SortStrings</a></h2>\n<code>func SortStrings(a []string)</code>\n<p>\nSortStrings sorts an array of strings in increasing order.\n</p>\n\n",name:"SortStrings"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:StringsAreSorted!\">StringsAreSorted</a></h2>\n<code>func StringsAreSorted(a []string) bool</code>\n<p>\nStringsAreSorted tests whether an array of strings is sorted in increasing order.\n</p>\n\n",name:"StringsAreSorted"}],consts:[],vars:[]}