var gortfmData = {index:"index.html",html:"<p>\nPackage elf implements access to ELF object files.\n</p>\n",name:"elf",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Class!\">Class</a></h2>\n<pre>type Class byte</pre>\n<p>\nClass is found in Header.Ident[EI_CLASS] and Header.Class.\n</p>\n\n",name:"Class","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Class\">func (Class)</a> <a href=\"?m:Class.GoString!\">GoString</a></h2>\n<code>func (i Class) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:Class\">func (Class)</a> <a href=\"?m:Class.String!\">String</a></h2>\n<code>func (i Class) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Data!\">Data</a></h2>\n<pre>type Data byte</pre>\n<p>\nData is found in Header.Ident[EI_DATA] and Header.Data.\n</p>\n\n",name:"Data","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Data\">func (Data)</a> <a href=\"?m:Data.GoString!\">GoString</a></h2>\n<code>func (i Data) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:Data\">func (Data)</a> <a href=\"?m:Data.String!\">String</a></h2>\n<code>func (i Data) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Dyn32!\">Dyn32</a></h2>\n<pre>type Dyn32 struct {\n\tTag int32  /* Entry type. */\n\tVal uint32 /* Integer/Address value. */\n}</pre>\n<p>\nELF32 Dynamic structure.  The &#34;.dynamic&#34; section contains an array of them.\n</p>\n\n",name:"Dyn32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Dyn64!\">Dyn64</a></h2>\n<pre>type Dyn64 struct {\n\tTag int64  /* Entry type. */\n\tVal uint64 /* Integer/address value */\n}</pre>\n<p>\nELF64 Dynamic structure.  The &#34;.dynamic&#34; section contains an array of them.\n</p>\n\n",name:"Dyn64","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:DynFlag!\">DynFlag</a></h2>\n<pre>type DynFlag int</pre>\n<p>\nDT_FLAGS values.\n</p>\n\n",name:"DynFlag","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:DynFlag\">func (DynFlag)</a> <a href=\"?m:DynFlag.GoString!\">GoString</a></h2>\n<code>func (i DynFlag) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:DynFlag\">func (DynFlag)</a> <a href=\"?m:DynFlag.String!\">String</a></h2>\n<code>func (i DynFlag) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:DynTag!\">DynTag</a></h2>\n<pre>type DynTag int</pre>\n<p>\nDyn.Tag\n</p>\n\n",name:"DynTag","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:DynTag\">func (DynTag)</a> <a href=\"?m:DynTag.GoString!\">GoString</a></h2>\n<code>func (i DynTag) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:DynTag\">func (DynTag)</a> <a href=\"?m:DynTag.String!\">String</a></h2>\n<code>func (i DynTag) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:File!\">File</a></h2>\n<pre>type File struct {\n\tFileHeader\n\tSections []*Section\n\tProgs    []*Prog\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nA File represents an open ELF file.\n</p>\n\n",name:"File","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Close!\">Close</a></h2>\n<code>func (f *File) Close() os.Error</code>\n<p>\nClose closes the File.\nIf the File was created using NewFile directly instead of Open,\nClose has no effect.\n</p>\n\n",name:"Close"},{html:"\n<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.DWARF!\">DWARF</a></h2>\n<code>func (f *File) DWARF() (*dwarf.Data, os.Error)</code>\n\n",name:"DWARF"},{html:"\n<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.ImportedLibraries!\">ImportedLibraries</a></h2>\n<code>func (f *File) ImportedLibraries() ([]string, os.Error)</code>\n<p>\nImportedLibraries returns the names of all libraries\nreferred to by the binary f that are expected to be\nlinked with the binary at dynamic link time.\n</p>\n\n",name:"ImportedLibraries"},{html:"\n<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.ImportedSymbols!\">ImportedSymbols</a></h2>\n<code>func (f *File) ImportedSymbols() ([]ImportedSymbol, os.Error)</code>\n<p>\nImportedSymbols returns the names of all symbols\nreferred to by the binary f that are expected to be\nsatisfied by other libraries at dynamic load time.\nIt does not return weak symbols.\n</p>\n\n",name:"ImportedSymbols"},{html:"\n<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.Section!\">Section</a></h2>\n<code>func (f *File) Section(name string) *Section</code>\n<p>\nSection returns a section with the given name, or nil if no such\nsection exists.\n</p>\n\n",name:"Section"},{html:"\n<h2><a class=\"black\" href=\"?m:File\">func (*File)</a> <a href=\"?m:File.SectionByType!\">SectionByType</a></h2>\n<code>func (f *File) SectionByType(typ SectionType) *Section</code>\n<p>\nSectionByType returns the first section in f with the\ngiven type, or nil if there is no such section.\n</p>\n\n",name:"SectionByType"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FileHeader!\">FileHeader</a></h2>\n<pre>type FileHeader struct {\n\tClass      Class\n\tData       Data\n\tVersion    Version\n\tOSABI      OSABI\n\tABIVersion uint8\n\tByteOrder  binary.ByteOrder\n\tType       Type\n\tMachine    Machine\n}</pre>\n<p>\nA FileHeader represents an ELF file header.\n</p>\n\n",name:"FileHeader","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FormatError!\">FormatError</a></h2>\n<pre>type FormatError struct {\n\t// contains filtered or unexported fields\n}</pre>\n\n",name:"FormatError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:FormatError\">func (*FormatError)</a> <a href=\"?m:FormatError.String!\">String</a></h2>\n<code>func (e *FormatError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Header32!\">Header32</a></h2>\n<pre>type Header32 struct {\n\tIdent     [EI_NIDENT]byte /* File identification. */\n\tType      uint16          /* File type. */\n\tMachine   uint16          /* Machine architecture. */\n\tVersion   uint32          /* ELF format version. */\n\tEntry     uint32          /* Entry point. */\n\tPhoff     uint32          /* Program header file offset. */\n\tShoff     uint32          /* Section header file offset. */\n\tFlags     uint32          /* Architecture-specific flags. */\n\tEhsize    uint16          /* Size of ELF header in bytes. */\n\tPhentsize uint16          /* Size of program header entry. */\n\tPhnum     uint16          /* Number of program header entries. */\n\tShentsize uint16          /* Size of section header entry. */\n\tShnum     uint16          /* Number of section header entries. */\n\tShstrndx  uint16          /* Section name strings section. */\n}</pre>\n<p>\nELF32 File header.\n</p>\n\n",name:"Header32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Header64!\">Header64</a></h2>\n<pre>type Header64 struct {\n\tIdent     [EI_NIDENT]byte /* File identification. */\n\tType      uint16          /* File type. */\n\tMachine   uint16          /* Machine architecture. */\n\tVersion   uint32          /* ELF format version. */\n\tEntry     uint64          /* Entry point. */\n\tPhoff     uint64          /* Program header file offset. */\n\tShoff     uint64          /* Section header file offset. */\n\tFlags     uint32          /* Architecture-specific flags. */\n\tEhsize    uint16          /* Size of ELF header in bytes. */\n\tPhentsize uint16          /* Size of program header entry. */\n\tPhnum     uint16          /* Number of program header entries. */\n\tShentsize uint16          /* Size of section header entry. */\n\tShnum     uint16          /* Number of section header entries. */\n\tShstrndx  uint16          /* Section name strings section. */\n}</pre>\n<p>\nELF64 file header.\n</p>\n\n",name:"Header64","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ImportedSymbol!\">ImportedSymbol</a></h2>\n<pre>type ImportedSymbol struct {\n\tName    string\n\tVersion string\n\tLibrary string\n}</pre>\n\n",name:"ImportedSymbol","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Machine!\">Machine</a></h2>\n<pre>type Machine uint16</pre>\n<p>\nMachine is found in Header.Machine.\n</p>\n\n",name:"Machine","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Machine\">func (Machine)</a> <a href=\"?m:Machine.GoString!\">GoString</a></h2>\n<code>func (i Machine) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:Machine\">func (Machine)</a> <a href=\"?m:Machine.String!\">String</a></h2>\n<code>func (i Machine) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:NType!\">NType</a></h2>\n<pre>type NType int</pre>\n<p>\nNType values; used in core files.\n</p>\n\n",name:"NType","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:NType\">func (NType)</a> <a href=\"?m:NType.GoString!\">GoString</a></h2>\n<code>func (i NType) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:NType\">func (NType)</a> <a href=\"?m:NType.String!\">String</a></h2>\n<code>func (i NType) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:OSABI!\">OSABI</a></h2>\n<pre>type OSABI byte</pre>\n<p>\nOSABI is found in Header.Ident[EI_OSABI] and Header.OSABI.\n</p>\n\n",name:"OSABI","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:OSABI\">func (OSABI)</a> <a href=\"?m:OSABI.GoString!\">GoString</a></h2>\n<code>func (i OSABI) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:OSABI\">func (OSABI)</a> <a href=\"?m:OSABI.String!\">String</a></h2>\n<code>func (i OSABI) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Prog!\">Prog</a></h2>\n<pre>type Prog struct {\n\tProgHeader\n\n\t// Embed ReaderAt for ReadAt method.\n\t// Do not embed SectionReader directly\n\t// to avoid having Read and Seek.\n\t// If a client wants Read and Seek it must use\n\t// Open() to avoid fighting over the seek offset\n\t// with other clients.\n\tio.ReaderAt\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nA Prog represents a single ELF program header in an ELF binary.\n</p>\n\n",name:"Prog","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Prog\">func (*Prog)</a> <a href=\"?m:Prog.Open!\">Open</a></h2>\n<code>func (p *Prog) Open() io.ReadSeeker</code>\n<p>\nOpen returns a new ReadSeeker reading the ELF program body.\n</p>\n\n",name:"Open"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Prog32!\">Prog32</a></h2>\n<pre>type Prog32 struct {\n\tType   uint32 /* Entry type. */\n\tOff    uint32 /* File offset of contents. */\n\tVaddr  uint32 /* Virtual address in memory image. */\n\tPaddr  uint32 /* Physical address (not used). */\n\tFilesz uint32 /* Size of contents in file. */\n\tMemsz  uint32 /* Size of contents in memory. */\n\tFlags  uint32 /* Access permission flags. */\n\tAlign  uint32 /* Alignment in memory and file. */\n}</pre>\n<p>\nELF32 Program header.\n</p>\n\n",name:"Prog32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Prog64!\">Prog64</a></h2>\n<pre>type Prog64 struct {\n\tType   uint32 /* Entry type. */\n\tFlags  uint32 /* Access permission flags. */\n\tOff    uint64 /* File offset of contents. */\n\tVaddr  uint64 /* Virtual address in memory image. */\n\tPaddr  uint64 /* Physical address (not used). */\n\tFilesz uint64 /* Size of contents in file. */\n\tMemsz  uint64 /* Size of contents in memory. */\n\tAlign  uint64 /* Alignment in memory and file. */\n}</pre>\n<p>\nELF64 Program header.\n</p>\n\n",name:"Prog64","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ProgFlag!\">ProgFlag</a></h2>\n<pre>type ProgFlag uint32</pre>\n<p>\nProg.Flag\n</p>\n\n",name:"ProgFlag","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:ProgFlag\">func (ProgFlag)</a> <a href=\"?m:ProgFlag.GoString!\">GoString</a></h2>\n<code>func (i ProgFlag) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:ProgFlag\">func (ProgFlag)</a> <a href=\"?m:ProgFlag.String!\">String</a></h2>\n<code>func (i ProgFlag) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ProgHeader!\">ProgHeader</a></h2>\n<pre>type ProgHeader struct {\n\tType   ProgType\n\tFlags  ProgFlag\n\tVaddr  uint64\n\tPaddr  uint64\n\tFilesz uint64\n\tMemsz  uint64\n\tAlign  uint64\n}</pre>\n<p>\nA ProgHeader represents a single ELF program header.\n</p>\n\n",name:"ProgHeader","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ProgType!\">ProgType</a></h2>\n<pre>type ProgType int</pre>\n<p>\nProg.Type\n</p>\n\n",name:"ProgType","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:ProgType\">func (ProgType)</a> <a href=\"?m:ProgType.GoString!\">GoString</a></h2>\n<code>func (i ProgType) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:ProgType\">func (ProgType)</a> <a href=\"?m:ProgType.String!\">String</a></h2>\n<code>func (i ProgType) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_386!\">R_386</a></h2>\n<pre>type R_386 int</pre>\n<p>\nRelocation types for 386.\n</p>\n\n",name:"R_386","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:R_386\">func (R_386)</a> <a href=\"?m:R_386.GoString!\">GoString</a></h2>\n<code>func (i R_386) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:R_386\">func (R_386)</a> <a href=\"?m:R_386.String!\">String</a></h2>\n<code>func (i R_386) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_ALPHA!\">R_ALPHA</a></h2>\n<pre>type R_ALPHA int</pre>\n<p>\nRelocation types for Alpha.\n</p>\n\n",name:"R_ALPHA","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:R_ALPHA\">func (R_ALPHA)</a> <a href=\"?m:R_ALPHA.GoString!\">GoString</a></h2>\n<code>func (i R_ALPHA) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:R_ALPHA\">func (R_ALPHA)</a> <a href=\"?m:R_ALPHA.String!\">String</a></h2>\n<code>func (i R_ALPHA) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_ARM!\">R_ARM</a></h2>\n<pre>type R_ARM int</pre>\n<p>\nRelocation types for ARM.\n</p>\n\n",name:"R_ARM","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:R_ARM\">func (R_ARM)</a> <a href=\"?m:R_ARM.GoString!\">GoString</a></h2>\n<code>func (i R_ARM) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:R_ARM\">func (R_ARM)</a> <a href=\"?m:R_ARM.String!\">String</a></h2>\n<code>func (i R_ARM) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_PPC!\">R_PPC</a></h2>\n<pre>type R_PPC int</pre>\n<p>\nRelocation types for PowerPC.\n</p>\n\n",name:"R_PPC","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:R_PPC\">func (R_PPC)</a> <a href=\"?m:R_PPC.GoString!\">GoString</a></h2>\n<code>func (i R_PPC) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:R_PPC\">func (R_PPC)</a> <a href=\"?m:R_PPC.String!\">String</a></h2>\n<code>func (i R_PPC) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_SPARC!\">R_SPARC</a></h2>\n<pre>type R_SPARC int</pre>\n<p>\nRelocation types for SPARC.\n</p>\n\n",name:"R_SPARC","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:R_SPARC\">func (R_SPARC)</a> <a href=\"?m:R_SPARC.GoString!\">GoString</a></h2>\n<code>func (i R_SPARC) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:R_SPARC\">func (R_SPARC)</a> <a href=\"?m:R_SPARC.String!\">String</a></h2>\n<code>func (i R_SPARC) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:R_X86_64!\">R_X86_64</a></h2>\n<pre>type R_X86_64 int</pre>\n<p>\nRelocation types for x86-64.\n</p>\n\n",name:"R_X86_64","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:R_X86_64\">func (R_X86_64)</a> <a href=\"?m:R_X86_64.GoString!\">GoString</a></h2>\n<code>func (i R_X86_64) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:R_X86_64\">func (R_X86_64)</a> <a href=\"?m:R_X86_64.String!\">String</a></h2>\n<code>func (i R_X86_64) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rel32!\">Rel32</a></h2>\n<pre>type Rel32 struct {\n\tOff  uint32 /* Location to be relocated. */\n\tInfo uint32 /* Relocation type and symbol index. */\n}</pre>\n<p>\nELF32 Relocations that don&#39;t need an addend field.\n</p>\n\n",name:"Rel32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rel64!\">Rel64</a></h2>\n<pre>type Rel64 struct {\n\tOff  uint64 /* Location to be relocated. */\n\tInfo uint64 /* Relocation type and symbol index. */\n}</pre>\n<p>\nELF64 relocations that don&#39;t need an addend field.\n</p>\n\n",name:"Rel64","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rela32!\">Rela32</a></h2>\n<pre>type Rela32 struct {\n\tOff    uint32 /* Location to be relocated. */\n\tInfo   uint32 /* Relocation type and symbol index. */\n\tAddend int32  /* Addend. */\n}</pre>\n<p>\nELF32 Relocations that need an addend field.\n</p>\n\n",name:"Rela32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rela64!\">Rela64</a></h2>\n<pre>type Rela64 struct {\n\tOff    uint64 /* Location to be relocated. */\n\tInfo   uint64 /* Relocation type and symbol index. */\n\tAddend int64  /* Addend. */\n}</pre>\n<p>\nELF64 relocations that need an addend field.\n</p>\n\n",name:"Rela64","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section!\">Section</a></h2>\n<pre>type Section struct {\n\tSectionHeader\n\n\t// Embed ReaderAt for ReadAt method.\n\t// Do not embed SectionReader directly\n\t// to avoid having Read and Seek.\n\t// If a client wants Read and Seek it must use\n\t// Open() to avoid fighting over the seek offset\n\t// with other clients.\n\tio.ReaderAt\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nA Section represents a single section in an ELF file.\n</p>\n\n",name:"Section","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Section\">func (*Section)</a> <a href=\"?m:Section.Data!\">Data</a></h2>\n<code>func (s *Section) Data() ([]byte, os.Error)</code>\n<p>\nData reads and returns the contents of the ELF section.\n</p>\n\n",name:"Data"},{html:"\n<h2><a class=\"black\" href=\"?m:Section\">func (*Section)</a> <a href=\"?m:Section.Open!\">Open</a></h2>\n<code>func (s *Section) Open() io.ReadSeeker</code>\n<p>\nOpen returns a new ReadSeeker reading the ELF section.\n</p>\n\n",name:"Open"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section32!\">Section32</a></h2>\n<pre>type Section32 struct {\n\tName      uint32 /* Section name (index into the section header string table). */\n\tType      uint32 /* Section type. */\n\tFlags     uint32 /* Section flags. */\n\tAddr      uint32 /* Address in memory image. */\n\tOff       uint32 /* Offset in file. */\n\tSize      uint32 /* Size in bytes. */\n\tLink      uint32 /* Index of a related section. */\n\tInfo      uint32 /* Depends on section type. */\n\tAddralign uint32 /* Alignment in bytes. */\n\tEntsize   uint32 /* Size of each entry in section. */\n}</pre>\n<p>\nELF32 Section header.\n</p>\n\n",name:"Section32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Section64!\">Section64</a></h2>\n<pre>type Section64 struct {\n\tName      uint32 /* Section name (index into the section header string table). */\n\tType      uint32 /* Section type. */\n\tFlags     uint64 /* Section flags. */\n\tAddr      uint64 /* Address in memory image. */\n\tOff       uint64 /* Offset in file. */\n\tSize      uint64 /* Size in bytes. */\n\tLink      uint32 /* Index of a related section. */\n\tInfo      uint32 /* Depends on section type. */\n\tAddralign uint64 /* Alignment in bytes. */\n\tEntsize   uint64 /* Size of each entry in section. */\n}</pre>\n<p>\nELF64 Section header.\n</p>\n\n",name:"Section64","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionFlag!\">SectionFlag</a></h2>\n<pre>type SectionFlag uint32</pre>\n<p>\nSection flags.\n</p>\n\n",name:"SectionFlag","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SectionFlag\">func (SectionFlag)</a> <a href=\"?m:SectionFlag.GoString!\">GoString</a></h2>\n<code>func (i SectionFlag) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:SectionFlag\">func (SectionFlag)</a> <a href=\"?m:SectionFlag.String!\">String</a></h2>\n<code>func (i SectionFlag) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionHeader!\">SectionHeader</a></h2>\n<pre>type SectionHeader struct {\n\tName      string\n\tType      SectionType\n\tFlags     SectionFlag\n\tAddr      uint64\n\tOffset    uint64\n\tSize      uint64\n\tLink      uint32\n\tInfo      uint32\n\tAddralign uint64\n\tEntsize   uint64\n}</pre>\n<p>\nA SectionHeader represents a single ELF section header.\n</p>\n\n",name:"SectionHeader","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionIndex!\">SectionIndex</a></h2>\n<pre>type SectionIndex int</pre>\n<p>\nSpecial section indices.\n</p>\n\n",name:"SectionIndex","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SectionIndex\">func (SectionIndex)</a> <a href=\"?m:SectionIndex.GoString!\">GoString</a></h2>\n<code>func (i SectionIndex) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:SectionIndex\">func (SectionIndex)</a> <a href=\"?m:SectionIndex.String!\">String</a></h2>\n<code>func (i SectionIndex) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SectionType!\">SectionType</a></h2>\n<pre>type SectionType uint32</pre>\n<p>\nSection type.\n</p>\n\n",name:"SectionType","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SectionType\">func (SectionType)</a> <a href=\"?m:SectionType.GoString!\">GoString</a></h2>\n<code>func (i SectionType) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:SectionType\">func (SectionType)</a> <a href=\"?m:SectionType.String!\">String</a></h2>\n<code>func (i SectionType) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Sym32!\">Sym32</a></h2>\n<pre>type Sym32 struct {\n\tName  uint32\n\tValue uint32\n\tSize  uint32\n\tInfo  uint8\n\tOther uint8\n\tShndx uint16\n}</pre>\n<p>\nELF32 Symbol.\n</p>\n\n",name:"Sym32","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Sym64!\">Sym64</a></h2>\n<pre>type Sym64 struct {\n\tName  uint32 /* String table index of name. */\n\tInfo  uint8  /* Type and binding information. */\n\tOther uint8  /* Reserved (not used). */\n\tShndx uint16 /* Section index of symbol. */\n\tValue uint64 /* Symbol value. */\n\tSize  uint64 /* Size of associated object. */\n}</pre>\n<p>\nELF64 symbol table entries.\n</p>\n\n",name:"Sym64","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SymBind!\">SymBind</a></h2>\n<pre>type SymBind int</pre>\n<p>\nSymbol Binding - ELFNN_ST_BIND - st_info\n</p>\n\n",name:"SymBind","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SymBind\">func (SymBind)</a> <a href=\"?m:SymBind.GoString!\">GoString</a></h2>\n<code>func (i SymBind) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:SymBind\">func (SymBind)</a> <a href=\"?m:SymBind.String!\">String</a></h2>\n<code>func (i SymBind) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SymType!\">SymType</a></h2>\n<pre>type SymType int</pre>\n<p>\nSymbol type - ELFNN_ST_TYPE - st_info\n</p>\n\n",name:"SymType","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SymType\">func (SymType)</a> <a href=\"?m:SymType.GoString!\">GoString</a></h2>\n<code>func (i SymType) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:SymType\">func (SymType)</a> <a href=\"?m:SymType.String!\">String</a></h2>\n<code>func (i SymType) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SymVis!\">SymVis</a></h2>\n<pre>type SymVis int</pre>\n<p>\nSymbol visibility - ELFNN_ST_VISIBILITY - st_other\n</p>\n\n",name:"SymVis","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SymVis\">func (SymVis)</a> <a href=\"?m:SymVis.GoString!\">GoString</a></h2>\n<code>func (i SymVis) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:SymVis\">func (SymVis)</a> <a href=\"?m:SymVis.String!\">String</a></h2>\n<code>func (i SymVis) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Symbol!\">Symbol</a></h2>\n<pre>type Symbol struct {\n\tName        string\n\tInfo, Other byte\n\tSection     SectionIndex\n\tValue, Size uint64\n}</pre>\n<p>\nA Symbol represents an entry in an ELF symbol table section.\n</p>\n\n",name:"Symbol","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Type!\">Type</a></h2>\n<pre>type Type uint16</pre>\n<p>\nType is found in Header.Type.\n</p>\n\n",name:"Type","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Type\">func (Type)</a> <a href=\"?m:Type.GoString!\">GoString</a></h2>\n<code>func (i Type) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:Type\">func (Type)</a> <a href=\"?m:Type.String!\">String</a></h2>\n<code>func (i Type) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Version!\">Version</a></h2>\n<pre>type Version byte</pre>\n<p>\nVersion is found in Header.Ident[EI_VERSION] and Header.Version.\n</p>\n\n",name:"Version","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Version\">func (Version)</a> <a href=\"?m:Version.GoString!\">GoString</a></h2>\n<code>func (i Version) GoString() string</code>\n\n",name:"GoString"},{html:"\n<h2><a class=\"black\" href=\"?m:Version\">func (Version)</a> <a href=\"?m:Version.String!\">String</a></h2>\n<code>func (i Version) String() string</code>\n\n",name:"String"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewFile!\">NewFile</a></h2>\n<code>func NewFile(r io.ReaderAt) (*File, os.Error)</code>\n<p>\nNewFile creates a new File for accessing an ELF binary in an underlying reader.\nThe ELF binary is expected to start at position 0 in the ReaderAt.\n</p>\n\n",name:"NewFile"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Open!\">Open</a></h2>\n<code>func Open(name string) (*File, os.Error)</code>\n<p>\nOpen opens the named file using os.Open and prepares it for use as an ELF binary.\n</p>\n\n",name:"Open"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_INFO!\">R_INFO</a></h2>\n<code>func R_INFO(sym, typ uint32) uint64</code>\n\n",name:"R_INFO"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_INFO32!\">R_INFO32</a></h2>\n<code>func R_INFO32(sym, typ uint32) uint32</code>\n\n",name:"R_INFO32"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_SYM32!\">R_SYM32</a></h2>\n<code>func R_SYM32(info uint32) uint32</code>\n\n",name:"R_SYM32"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_SYM64!\">R_SYM64</a></h2>\n<code>func R_SYM64(info uint64) uint32</code>\n\n",name:"R_SYM64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_TYPE32!\">R_TYPE32</a></h2>\n<code>func R_TYPE32(info uint32) uint32</code>\n\n",name:"R_TYPE32"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:R_TYPE64!\">R_TYPE64</a></h2>\n<code>func R_TYPE64(info uint64) uint32</code>\n\n",name:"R_TYPE64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ST_BIND!\">ST_BIND</a></h2>\n<code>func ST_BIND(info uint8) SymBind</code>\n\n",name:"ST_BIND"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ST_INFO!\">ST_INFO</a></h2>\n<code>func ST_INFO(bind SymBind, typ SymType) uint8</code>\n\n",name:"ST_INFO"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ST_TYPE!\">ST_TYPE</a></h2>\n<code>func ST_TYPE(info uint8) SymType</code>\n\n",name:"ST_TYPE"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ST_VISIBILITY!\">ST_VISIBILITY</a></h2>\n<code>func ST_VISIBILITY(other uint8) SymVis</code>\n\n",name:"ST_VISIBILITY"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:EI_CLASS!\"><em>group</em></a></h2>\n<pre>const (\n\tEI_CLASS      = 4  /* Class of machine. */\n\tEI_DATA       = 5  /* Data format. */\n\tEI_VERSION    = 6  /* ELF format version. */\n\tEI_OSABI      = 7  /* Operating system / ABI identification */\n\tEI_ABIVERSION = 8  /* ABI version */\n\tEI_PAD        = 9  /* Start of padding (per SVR4 ABI). */\n\tEI_NIDENT     = 16 /* Size of e_ident array. */\n)</pre>\n<p>\nIndexes into the Header.Ident array.\n</p>\n\n",names:["EI_CLASS","EI_DATA","EI_VERSION","EI_OSABI","EI_ABIVERSION","EI_PAD","EI_NIDENT"],type:""},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ELFMAG!\">ELFMAG</a></h2>\n<pre>const ELFMAG = &#34;\\177ELF&#34;</pre>\n<p>\nInitial magic number for ELF files.\n</p>\n\n",names:["ELFMAG"],type:""},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Version!\">Version</a></h2>\n<pre>const (\n\tEV_NONE    Version = 0\n\tEV_CURRENT Version = 1\n)</pre>\n\n",names:["EV_NONE","EV_CURRENT"],type:"Version"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Class!\">Class</a></h2>\n<pre>const (\n\tELFCLASSNONE Class = 0 /* Unknown class. */\n\tELFCLASS32   Class = 1 /* 32-bit architecture. */\n\tELFCLASS64   Class = 2 /* 64-bit architecture. */\n)</pre>\n\n",names:["ELFCLASSNONE","ELFCLASS32","ELFCLASS64"],type:"Class"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Data!\">Data</a></h2>\n<pre>const (\n\tELFDATANONE Data = 0 /* Unknown data format. */\n\tELFDATA2LSB Data = 1 /* 2&#39;s complement little-endian. */\n\tELFDATA2MSB Data = 2 /* 2&#39;s complement big-endian. */\n)</pre>\n\n",names:["ELFDATANONE","ELFDATA2LSB","ELFDATA2MSB"],type:"Data"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:OSABI!\">OSABI</a></h2>\n<pre>const (\n\tELFOSABI_NONE       OSABI = 0   /* UNIX System V ABI */\n\tELFOSABI_HPUX       OSABI = 1   /* HP-UX operating system */\n\tELFOSABI_NETBSD     OSABI = 2   /* NetBSD */\n\tELFOSABI_LINUX      OSABI = 3   /* GNU/Linux */\n\tELFOSABI_HURD       OSABI = 4   /* GNU/Hurd */\n\tELFOSABI_86OPEN     OSABI = 5   /* 86Open common IA32 ABI */\n\tELFOSABI_SOLARIS    OSABI = 6   /* Solaris */\n\tELFOSABI_AIX        OSABI = 7   /* AIX */\n\tELFOSABI_IRIX       OSABI = 8   /* IRIX */\n\tELFOSABI_FREEBSD    OSABI = 9   /* FreeBSD */\n\tELFOSABI_TRU64      OSABI = 10  /* TRU64 UNIX */\n\tELFOSABI_MODESTO    OSABI = 11  /* Novell Modesto */\n\tELFOSABI_OPENBSD    OSABI = 12  /* OpenBSD */\n\tELFOSABI_OPENVMS    OSABI = 13  /* Open VMS */\n\tELFOSABI_NSK        OSABI = 14  /* HP Non-Stop Kernel */\n\tELFOSABI_ARM        OSABI = 97  /* ARM */\n\tELFOSABI_STANDALONE OSABI = 255 /* Standalone (embedded) application */\n)</pre>\n\n",names:["ELFOSABI_NONE","ELFOSABI_HPUX","ELFOSABI_NETBSD","ELFOSABI_LINUX","ELFOSABI_HURD","ELFOSABI_86OPEN","ELFOSABI_SOLARIS","ELFOSABI_AIX","ELFOSABI_IRIX","ELFOSABI_FREEBSD","ELFOSABI_TRU64","ELFOSABI_MODESTO","ELFOSABI_OPENBSD","ELFOSABI_OPENVMS","ELFOSABI_NSK","ELFOSABI_ARM","ELFOSABI_STANDALONE"],type:"OSABI"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Type!\">Type</a></h2>\n<pre>const (\n\tET_NONE   Type = 0      /* Unknown type. */\n\tET_REL    Type = 1      /* Relocatable. */\n\tET_EXEC   Type = 2      /* Executable. */\n\tET_DYN    Type = 3      /* Shared object. */\n\tET_CORE   Type = 4      /* Core file. */\n\tET_LOOS   Type = 0xfe00 /* First operating system specific. */\n\tET_HIOS   Type = 0xfeff /* Last operating system-specific. */\n\tET_LOPROC Type = 0xff00 /* First processor-specific. */\n\tET_HIPROC Type = 0xffff /* Last processor-specific. */\n)</pre>\n\n",names:["ET_NONE","ET_REL","ET_EXEC","ET_DYN","ET_CORE","ET_LOOS","ET_HIOS","ET_LOPROC","ET_HIPROC"],type:"Type"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Machine!\">Machine</a></h2>\n<pre>const (\n\tEM_NONE        Machine = 0  /* Unknown machine. */\n\tEM_M32         Machine = 1  /* AT&amp;T WE32100. */\n\tEM_SPARC       Machine = 2  /* Sun SPARC. */\n\tEM_386         Machine = 3  /* Intel i386. */\n\tEM_68K         Machine = 4  /* Motorola 68000. */\n\tEM_88K         Machine = 5  /* Motorola 88000. */\n\tEM_860         Machine = 7  /* Intel i860. */\n\tEM_MIPS        Machine = 8  /* MIPS R3000 Big-Endian only. */\n\tEM_S370        Machine = 9  /* IBM System/370. */\n\tEM_MIPS_RS3_LE Machine = 10 /* MIPS R3000 Little-Endian. */\n\tEM_PARISC      Machine = 15 /* HP PA-RISC. */\n\tEM_VPP500      Machine = 17 /* Fujitsu VPP500. */\n\tEM_SPARC32PLUS Machine = 18 /* SPARC v8plus. */\n\tEM_960         Machine = 19 /* Intel 80960. */\n\tEM_PPC         Machine = 20 /* PowerPC 32-bit. */\n\tEM_PPC64       Machine = 21 /* PowerPC 64-bit. */\n\tEM_S390        Machine = 22 /* IBM System/390. */\n\tEM_V800        Machine = 36 /* NEC V800. */\n\tEM_FR20        Machine = 37 /* Fujitsu FR20. */\n\tEM_RH32        Machine = 38 /* TRW RH-32. */\n\tEM_RCE         Machine = 39 /* Motorola RCE. */\n\tEM_ARM         Machine = 40 /* ARM. */\n\tEM_SH          Machine = 42 /* Hitachi SH. */\n\tEM_SPARCV9     Machine = 43 /* SPARC v9 64-bit. */\n\tEM_TRICORE     Machine = 44 /* Siemens TriCore embedded processor. */\n\tEM_ARC         Machine = 45 /* Argonaut RISC Core. */\n\tEM_H8_300      Machine = 46 /* Hitachi H8/300. */\n\tEM_H8_300H     Machine = 47 /* Hitachi H8/300H. */\n\tEM_H8S         Machine = 48 /* Hitachi H8S. */\n\tEM_H8_500      Machine = 49 /* Hitachi H8/500. */\n\tEM_IA_64       Machine = 50 /* Intel IA-64 Processor. */\n\tEM_MIPS_X      Machine = 51 /* Stanford MIPS-X. */\n\tEM_COLDFIRE    Machine = 52 /* Motorola ColdFire. */\n\tEM_68HC12      Machine = 53 /* Motorola M68HC12. */\n\tEM_MMA         Machine = 54 /* Fujitsu MMA. */\n\tEM_PCP         Machine = 55 /* Siemens PCP. */\n\tEM_NCPU        Machine = 56 /* Sony nCPU. */\n\tEM_NDR1        Machine = 57 /* Denso NDR1 microprocessor. */\n\tEM_STARCORE    Machine = 58 /* Motorola Star*Core processor. */\n\tEM_ME16        Machine = 59 /* Toyota ME16 processor. */\n\tEM_ST100       Machine = 60 /* STMicroelectronics ST100 processor. */\n\tEM_TINYJ       Machine = 61 /* Advanced Logic Corp. TinyJ processor. */\n\tEM_X86_64      Machine = 62 /* Advanced Micro Devices x86-64 */\n\n\t/* Non-standard or deprecated. */\n\tEM_486         Machine = 6      /* Intel i486. */\n\tEM_MIPS_RS4_BE Machine = 10     /* MIPS R4000 Big-Endian */\n\tEM_ALPHA_STD   Machine = 41     /* Digital Alpha (standard value). */\n\tEM_ALPHA       Machine = 0x9026 /* Alpha (written in the absence of an ABI) */\n)</pre>\n\n",names:["EM_NONE","EM_M32","EM_SPARC","EM_386","EM_68K","EM_88K","EM_860","EM_MIPS","EM_S370","EM_MIPS_RS3_LE","EM_PARISC","EM_VPP500","EM_SPARC32PLUS","EM_960","EM_PPC","EM_PPC64","EM_S390","EM_V800","EM_FR20","EM_RH32","EM_RCE","EM_ARM","EM_SH","EM_SPARCV9","EM_TRICORE","EM_ARC","EM_H8_300","EM_H8_300H","EM_H8S","EM_H8_500","EM_IA_64","EM_MIPS_X","EM_COLDFIRE","EM_68HC12","EM_MMA","EM_PCP","EM_NCPU","EM_NDR1","EM_STARCORE","EM_ME16","EM_ST100","EM_TINYJ","EM_X86_64","EM_486","EM_MIPS_RS4_BE","EM_ALPHA_STD","EM_ALPHA"],type:"Machine"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SectionIndex!\">SectionIndex</a></h2>\n<pre>const (\n\tSHN_UNDEF     SectionIndex = 0      /* Undefined, missing, irrelevant. */\n\tSHN_LORESERVE SectionIndex = 0xff00 /* First of reserved range. */\n\tSHN_LOPROC    SectionIndex = 0xff00 /* First processor-specific. */\n\tSHN_HIPROC    SectionIndex = 0xff1f /* Last processor-specific. */\n\tSHN_LOOS      SectionIndex = 0xff20 /* First operating system-specific. */\n\tSHN_HIOS      SectionIndex = 0xff3f /* Last operating system-specific. */\n\tSHN_ABS       SectionIndex = 0xfff1 /* Absolute values. */\n\tSHN_COMMON    SectionIndex = 0xfff2 /* Common data. */\n\tSHN_XINDEX    SectionIndex = 0xffff /* Escape -- index stored elsewhere. */\n\tSHN_HIRESERVE SectionIndex = 0xffff /* Last of reserved range. */\n)</pre>\n\n",names:["SHN_UNDEF","SHN_LORESERVE","SHN_LOPROC","SHN_HIPROC","SHN_LOOS","SHN_HIOS","SHN_ABS","SHN_COMMON","SHN_XINDEX","SHN_HIRESERVE"],type:"SectionIndex"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SectionType!\">SectionType</a></h2>\n<pre>const (\n\tSHT_NULL           SectionType = 0          /* inactive */\n\tSHT_PROGBITS       SectionType = 1          /* program defined information */\n\tSHT_SYMTAB         SectionType = 2          /* symbol table section */\n\tSHT_STRTAB         SectionType = 3          /* string table section */\n\tSHT_RELA           SectionType = 4          /* relocation section with addends */\n\tSHT_HASH           SectionType = 5          /* symbol hash table section */\n\tSHT_DYNAMIC        SectionType = 6          /* dynamic section */\n\tSHT_NOTE           SectionType = 7          /* note section */\n\tSHT_NOBITS         SectionType = 8          /* no space section */\n\tSHT_REL            SectionType = 9          /* relocation section - no addends */\n\tSHT_SHLIB          SectionType = 10         /* reserved - purpose unknown */\n\tSHT_DYNSYM         SectionType = 11         /* dynamic symbol table section */\n\tSHT_INIT_ARRAY     SectionType = 14         /* Initialization function pointers. */\n\tSHT_FINI_ARRAY     SectionType = 15         /* Termination function pointers. */\n\tSHT_PREINIT_ARRAY  SectionType = 16         /* Pre-initialization function ptrs. */\n\tSHT_GROUP          SectionType = 17         /* Section group. */\n\tSHT_SYMTAB_SHNDX   SectionType = 18         /* Section indexes (see SHN_XINDEX). */\n\tSHT_LOOS           SectionType = 0x60000000 /* First of OS specific semantics */\n\tSHT_GNU_ATTRIBUTES SectionType = 0x6ffffff5 /* GNU object attributes */\n\tSHT_GNU_HASH       SectionType = 0x6ffffff6 /* GNU hash table */\n\tSHT_GNU_LIBLIST    SectionType = 0x6ffffff7 /* GNU prelink library list */\n\tSHT_GNU_VERDEF     SectionType = 0x6ffffffd /* GNU version definition section */\n\tSHT_GNU_VERNEED    SectionType = 0x6ffffffe /* GNU version needs section */\n\tSHT_GNU_VERSYM     SectionType = 0x6fffffff /* GNU version symbol table */\n\tSHT_HIOS           SectionType = 0x6fffffff /* Last of OS specific semantics */\n\tSHT_LOPROC         SectionType = 0x70000000 /* reserved range for processor */\n\tSHT_HIPROC         SectionType = 0x7fffffff /* specific section header types */\n\tSHT_LOUSER         SectionType = 0x80000000 /* reserved range for application */\n\tSHT_HIUSER         SectionType = 0xffffffff /* specific indexes */\n)</pre>\n\n",names:["SHT_NULL","SHT_PROGBITS","SHT_SYMTAB","SHT_STRTAB","SHT_RELA","SHT_HASH","SHT_DYNAMIC","SHT_NOTE","SHT_NOBITS","SHT_REL","SHT_SHLIB","SHT_DYNSYM","SHT_INIT_ARRAY","SHT_FINI_ARRAY","SHT_PREINIT_ARRAY","SHT_GROUP","SHT_SYMTAB_SHNDX","SHT_LOOS","SHT_GNU_ATTRIBUTES","SHT_GNU_HASH","SHT_GNU_LIBLIST","SHT_GNU_VERDEF","SHT_GNU_VERNEED","SHT_GNU_VERSYM","SHT_HIOS","SHT_LOPROC","SHT_HIPROC","SHT_LOUSER","SHT_HIUSER"],type:"SectionType"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SectionFlag!\">SectionFlag</a></h2>\n<pre>const (\n\tSHF_WRITE            SectionFlag = 0x1        /* Section contains writable data. */\n\tSHF_ALLOC            SectionFlag = 0x2        /* Section occupies memory. */\n\tSHF_EXECINSTR        SectionFlag = 0x4        /* Section contains instructions. */\n\tSHF_MERGE            SectionFlag = 0x10       /* Section may be merged. */\n\tSHF_STRINGS          SectionFlag = 0x20       /* Section contains strings. */\n\tSHF_INFO_LINK        SectionFlag = 0x40       /* sh_info holds section index. */\n\tSHF_LINK_ORDER       SectionFlag = 0x80       /* Special ordering requirements. */\n\tSHF_OS_NONCONFORMING SectionFlag = 0x100      /* OS-specific processing required. */\n\tSHF_GROUP            SectionFlag = 0x200      /* Member of section group. */\n\tSHF_TLS              SectionFlag = 0x400      /* Section contains TLS data. */\n\tSHF_MASKOS           SectionFlag = 0x0ff00000 /* OS-specific semantics. */\n\tSHF_MASKPROC         SectionFlag = 0xf0000000 /* Processor-specific semantics. */\n)</pre>\n\n",names:["SHF_WRITE","SHF_ALLOC","SHF_EXECINSTR","SHF_MERGE","SHF_STRINGS","SHF_INFO_LINK","SHF_LINK_ORDER","SHF_OS_NONCONFORMING","SHF_GROUP","SHF_TLS","SHF_MASKOS","SHF_MASKPROC"],type:"SectionFlag"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ProgType!\">ProgType</a></h2>\n<pre>const (\n\tPT_NULL    ProgType = 0          /* Unused entry. */\n\tPT_LOAD    ProgType = 1          /* Loadable segment. */\n\tPT_DYNAMIC ProgType = 2          /* Dynamic linking information segment. */\n\tPT_INTERP  ProgType = 3          /* Pathname of interpreter. */\n\tPT_NOTE    ProgType = 4          /* Auxiliary information. */\n\tPT_SHLIB   ProgType = 5          /* Reserved (not used). */\n\tPT_PHDR    ProgType = 6          /* Location of program header itself. */\n\tPT_TLS     ProgType = 7          /* Thread local storage segment */\n\tPT_LOOS    ProgType = 0x60000000 /* First OS-specific. */\n\tPT_HIOS    ProgType = 0x6fffffff /* Last OS-specific. */\n\tPT_LOPROC  ProgType = 0x70000000 /* First processor-specific type. */\n\tPT_HIPROC  ProgType = 0x7fffffff /* Last processor-specific type. */\n)</pre>\n\n",names:["PT_NULL","PT_LOAD","PT_DYNAMIC","PT_INTERP","PT_NOTE","PT_SHLIB","PT_PHDR","PT_TLS","PT_LOOS","PT_HIOS","PT_LOPROC","PT_HIPROC"],type:"ProgType"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ProgFlag!\">ProgFlag</a></h2>\n<pre>const (\n\tPF_X        ProgFlag = 0x1        /* Executable. */\n\tPF_W        ProgFlag = 0x2        /* Writable. */\n\tPF_R        ProgFlag = 0x4        /* Readable. */\n\tPF_MASKOS   ProgFlag = 0x0ff00000 /* Operating system-specific. */\n\tPF_MASKPROC ProgFlag = 0xf0000000 /* Processor-specific. */\n)</pre>\n\n",names:["PF_X","PF_W","PF_R","PF_MASKOS","PF_MASKPROC"],type:"ProgFlag"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:DynTag!\">DynTag</a></h2>\n<pre>const (\n\tDT_NULL         DynTag = 0  /* Terminating entry. */\n\tDT_NEEDED       DynTag = 1  /* String table offset of a needed shared library. */\n\tDT_PLTRELSZ     DynTag = 2  /* Total size in bytes of PLT relocations. */\n\tDT_PLTGOT       DynTag = 3  /* Processor-dependent address. */\n\tDT_HASH         DynTag = 4  /* Address of symbol hash table. */\n\tDT_STRTAB       DynTag = 5  /* Address of string table. */\n\tDT_SYMTAB       DynTag = 6  /* Address of symbol table. */\n\tDT_RELA         DynTag = 7  /* Address of ElfNN_Rela relocations. */\n\tDT_RELASZ       DynTag = 8  /* Total size of ElfNN_Rela relocations. */\n\tDT_RELAENT      DynTag = 9  /* Size of each ElfNN_Rela relocation entry. */\n\tDT_STRSZ        DynTag = 10 /* Size of string table. */\n\tDT_SYMENT       DynTag = 11 /* Size of each symbol table entry. */\n\tDT_INIT         DynTag = 12 /* Address of initialization function. */\n\tDT_FINI         DynTag = 13 /* Address of finalization function. */\n\tDT_SONAME       DynTag = 14 /* String table offset of shared object name. */\n\tDT_RPATH        DynTag = 15 /* String table offset of library path. [sup] */\n\tDT_SYMBOLIC     DynTag = 16 /* Indicates &#34;symbolic&#34; linking. [sup] */\n\tDT_REL          DynTag = 17 /* Address of ElfNN_Rel relocations. */\n\tDT_RELSZ        DynTag = 18 /* Total size of ElfNN_Rel relocations. */\n\tDT_RELENT       DynTag = 19 /* Size of each ElfNN_Rel relocation. */\n\tDT_PLTREL       DynTag = 20 /* Type of relocation used for PLT. */\n\tDT_DEBUG        DynTag = 21 /* Reserved (not used). */\n\tDT_TEXTREL      DynTag = 22 /* Indicates there may be relocations in non-writable segments. [sup] */\n\tDT_JMPREL       DynTag = 23 /* Address of PLT relocations. */\n\tDT_BIND_NOW     DynTag = 24 /* [sup] */\n\tDT_INIT_ARRAY   DynTag = 25 /* Address of the array of pointers to initialization functions */\n\tDT_FINI_ARRAY   DynTag = 26 /* Address of the array of pointers to termination functions */\n\tDT_INIT_ARRAYSZ DynTag = 27 /* Size in bytes of the array of initialization functions. */\n\tDT_FINI_ARRAYSZ DynTag = 28 /* Size in bytes of the array of terminationfunctions. */\n\tDT_RUNPATH      DynTag = 29 /* String table offset of a null-terminated library search path string. */\n\tDT_FLAGS        DynTag = 30 /* Object specific flag values. */\n\tDT_ENCODING     DynTag = 32 /* Values greater than or equal to DT_ENCODING\n\t   and less than DT_LOOS follow the rules for\n\t   the interpretation of the d_un union\n\t   as follows: even == &#39;d_ptr&#39;, even == &#39;d_val&#39;\n\t   or none */\n\tDT_PREINIT_ARRAY   DynTag = 32         /* Address of the array of pointers to pre-initialization functions. */\n\tDT_PREINIT_ARRAYSZ DynTag = 33         /* Size in bytes of the array of pre-initialization functions. */\n\tDT_LOOS            DynTag = 0x6000000d /* First OS-specific */\n\tDT_HIOS            DynTag = 0x6ffff000 /* Last OS-specific */\n\tDT_VERSYM          DynTag = 0x6ffffff0\n\tDT_VERNEED         DynTag = 0x6ffffffe\n\tDT_VERNEEDNUM      DynTag = 0x6fffffff\n\tDT_LOPROC          DynTag = 0x70000000 /* First processor-specific type. */\n\tDT_HIPROC          DynTag = 0x7fffffff /* Last processor-specific type. */\n)</pre>\n\n",names:["DT_NULL","DT_NEEDED","DT_PLTRELSZ","DT_PLTGOT","DT_HASH","DT_STRTAB","DT_SYMTAB","DT_RELA","DT_RELASZ","DT_RELAENT","DT_STRSZ","DT_SYMENT","DT_INIT","DT_FINI","DT_SONAME","DT_RPATH","DT_SYMBOLIC","DT_REL","DT_RELSZ","DT_RELENT","DT_PLTREL","DT_DEBUG","DT_TEXTREL","DT_JMPREL","DT_BIND_NOW","DT_INIT_ARRAY","DT_FINI_ARRAY","DT_INIT_ARRAYSZ","DT_FINI_ARRAYSZ","DT_RUNPATH","DT_FLAGS","DT_ENCODING","DT_PREINIT_ARRAY","DT_PREINIT_ARRAYSZ","DT_LOOS","DT_HIOS","DT_VERSYM","DT_VERNEED","DT_VERNEEDNUM","DT_LOPROC","DT_HIPROC"],type:"DynTag"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:DynFlag!\">DynFlag</a></h2>\n<pre>const (\n\tDF_ORIGIN DynFlag = 0x0001 /* Indicates that the object being loaded may\n\t   make reference to the\n\t   $ORIGIN substitution string */\n\tDF_SYMBOLIC DynFlag = 0x0002 /* Indicates &#34;symbolic&#34; linking. */\n\tDF_TEXTREL  DynFlag = 0x0004 /* Indicates there may be relocations in non-writable segments. */\n\tDF_BIND_NOW DynFlag = 0x0008 /* Indicates that the dynamic linker should\n\t   process all relocations for the object\n\t   containing this entry before transferring\n\t   control to the program. */\n\tDF_STATIC_TLS DynFlag = 0x0010 /* Indicates that the shared object or\n\t   executable contains code using a static\n\t   thread-local storage scheme. */\n)</pre>\n\n",names:["DF_ORIGIN","DF_SYMBOLIC","DF_TEXTREL","DF_BIND_NOW","DF_STATIC_TLS"],type:"DynFlag"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:NType!\">NType</a></h2>\n<pre>const (\n\tNT_PRSTATUS NType = 1 /* Process status. */\n\tNT_FPREGSET NType = 2 /* Floating point registers. */\n\tNT_PRPSINFO NType = 3 /* Process state info. */\n)</pre>\n\n",names:["NT_PRSTATUS","NT_FPREGSET","NT_PRPSINFO"],type:"NType"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SymBind!\">SymBind</a></h2>\n<pre>const (\n\tSTB_LOCAL  SymBind = 0  /* Local symbol */\n\tSTB_GLOBAL SymBind = 1  /* Global symbol */\n\tSTB_WEAK   SymBind = 2  /* like global - lower precedence */\n\tSTB_LOOS   SymBind = 10 /* Reserved range for operating system */\n\tSTB_HIOS   SymBind = 12 /*   specific semantics. */\n\tSTB_LOPROC SymBind = 13 /* reserved range for processor */\n\tSTB_HIPROC SymBind = 15 /*   specific semantics. */\n)</pre>\n\n",names:["STB_LOCAL","STB_GLOBAL","STB_WEAK","STB_LOOS","STB_HIOS","STB_LOPROC","STB_HIPROC"],type:"SymBind"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SymType!\">SymType</a></h2>\n<pre>const (\n\tSTT_NOTYPE  SymType = 0  /* Unspecified type. */\n\tSTT_OBJECT  SymType = 1  /* Data object. */\n\tSTT_FUNC    SymType = 2  /* Function. */\n\tSTT_SECTION SymType = 3  /* Section. */\n\tSTT_FILE    SymType = 4  /* Source file. */\n\tSTT_COMMON  SymType = 5  /* Uninitialized common block. */\n\tSTT_TLS     SymType = 6  /* TLS object. */\n\tSTT_LOOS    SymType = 10 /* Reserved range for operating system */\n\tSTT_HIOS    SymType = 12 /*   specific semantics. */\n\tSTT_LOPROC  SymType = 13 /* reserved range for processor */\n\tSTT_HIPROC  SymType = 15 /*   specific semantics. */\n)</pre>\n\n",names:["STT_NOTYPE","STT_OBJECT","STT_FUNC","STT_SECTION","STT_FILE","STT_COMMON","STT_TLS","STT_LOOS","STT_HIOS","STT_LOPROC","STT_HIPROC"],type:"SymType"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:SymVis!\">SymVis</a></h2>\n<pre>const (\n\tSTV_DEFAULT   SymVis = 0x0 /* Default visibility (see binding). */\n\tSTV_INTERNAL  SymVis = 0x1 /* Special meaning in relocatable objects. */\n\tSTV_HIDDEN    SymVis = 0x2 /* Not visible. */\n\tSTV_PROTECTED SymVis = 0x3 /* Visible but not preemptible. */\n)</pre>\n\n",names:["STV_DEFAULT","STV_INTERNAL","STV_HIDDEN","STV_PROTECTED"],type:"SymVis"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_X86_64!\">R_X86_64</a></h2>\n<pre>const (\n\tR_X86_64_NONE     R_X86_64 = 0  /* No relocation. */\n\tR_X86_64_64       R_X86_64 = 1  /* Add 64 bit symbol value. */\n\tR_X86_64_PC32     R_X86_64 = 2  /* PC-relative 32 bit signed sym value. */\n\tR_X86_64_GOT32    R_X86_64 = 3  /* PC-relative 32 bit GOT offset. */\n\tR_X86_64_PLT32    R_X86_64 = 4  /* PC-relative 32 bit PLT offset. */\n\tR_X86_64_COPY     R_X86_64 = 5  /* Copy data from shared object. */\n\tR_X86_64_GLOB_DAT R_X86_64 = 6  /* Set GOT entry to data address. */\n\tR_X86_64_JMP_SLOT R_X86_64 = 7  /* Set GOT entry to code address. */\n\tR_X86_64_RELATIVE R_X86_64 = 8  /* Add load address of shared object. */\n\tR_X86_64_GOTPCREL R_X86_64 = 9  /* Add 32 bit signed pcrel offset to GOT. */\n\tR_X86_64_32       R_X86_64 = 10 /* Add 32 bit zero extended symbol value */\n\tR_X86_64_32S      R_X86_64 = 11 /* Add 32 bit sign extended symbol value */\n\tR_X86_64_16       R_X86_64 = 12 /* Add 16 bit zero extended symbol value */\n\tR_X86_64_PC16     R_X86_64 = 13 /* Add 16 bit signed extended pc relative symbol value */\n\tR_X86_64_8        R_X86_64 = 14 /* Add 8 bit zero extended symbol value */\n\tR_X86_64_PC8      R_X86_64 = 15 /* Add 8 bit signed extended pc relative symbol value */\n\tR_X86_64_DTPMOD64 R_X86_64 = 16 /* ID of module containing symbol */\n\tR_X86_64_DTPOFF64 R_X86_64 = 17 /* Offset in TLS block */\n\tR_X86_64_TPOFF64  R_X86_64 = 18 /* Offset in static TLS block */\n\tR_X86_64_TLSGD    R_X86_64 = 19 /* PC relative offset to GD GOT entry */\n\tR_X86_64_TLSLD    R_X86_64 = 20 /* PC relative offset to LD GOT entry */\n\tR_X86_64_DTPOFF32 R_X86_64 = 21 /* Offset in TLS block */\n\tR_X86_64_GOTTPOFF R_X86_64 = 22 /* PC relative offset to IE GOT entry */\n\tR_X86_64_TPOFF32  R_X86_64 = 23 /* Offset in static TLS block */\n)</pre>\n\n",names:["R_X86_64_NONE","R_X86_64_64","R_X86_64_PC32","R_X86_64_GOT32","R_X86_64_PLT32","R_X86_64_COPY","R_X86_64_GLOB_DAT","R_X86_64_JMP_SLOT","R_X86_64_RELATIVE","R_X86_64_GOTPCREL","R_X86_64_32","R_X86_64_32S","R_X86_64_16","R_X86_64_PC16","R_X86_64_8","R_X86_64_PC8","R_X86_64_DTPMOD64","R_X86_64_DTPOFF64","R_X86_64_TPOFF64","R_X86_64_TLSGD","R_X86_64_TLSLD","R_X86_64_DTPOFF32","R_X86_64_GOTTPOFF","R_X86_64_TPOFF32"],type:"R_X86_64"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_ALPHA!\">R_ALPHA</a></h2>\n<pre>const (\n\tR_ALPHA_NONE           R_ALPHA = 0  /* No reloc */\n\tR_ALPHA_REFLONG        R_ALPHA = 1  /* Direct 32 bit */\n\tR_ALPHA_REFQUAD        R_ALPHA = 2  /* Direct 64 bit */\n\tR_ALPHA_GPREL32        R_ALPHA = 3  /* GP relative 32 bit */\n\tR_ALPHA_LITERAL        R_ALPHA = 4  /* GP relative 16 bit w/optimization */\n\tR_ALPHA_LITUSE         R_ALPHA = 5  /* Optimization hint for LITERAL */\n\tR_ALPHA_GPDISP         R_ALPHA = 6  /* Add displacement to GP */\n\tR_ALPHA_BRADDR         R_ALPHA = 7  /* PC+4 relative 23 bit shifted */\n\tR_ALPHA_HINT           R_ALPHA = 8  /* PC+4 relative 16 bit shifted */\n\tR_ALPHA_SREL16         R_ALPHA = 9  /* PC relative 16 bit */\n\tR_ALPHA_SREL32         R_ALPHA = 10 /* PC relative 32 bit */\n\tR_ALPHA_SREL64         R_ALPHA = 11 /* PC relative 64 bit */\n\tR_ALPHA_OP_PUSH        R_ALPHA = 12 /* OP stack push */\n\tR_ALPHA_OP_STORE       R_ALPHA = 13 /* OP stack pop and store */\n\tR_ALPHA_OP_PSUB        R_ALPHA = 14 /* OP stack subtract */\n\tR_ALPHA_OP_PRSHIFT     R_ALPHA = 15 /* OP stack right shift */\n\tR_ALPHA_GPVALUE        R_ALPHA = 16\n\tR_ALPHA_GPRELHIGH      R_ALPHA = 17\n\tR_ALPHA_GPRELLOW       R_ALPHA = 18\n\tR_ALPHA_IMMED_GP_16    R_ALPHA = 19\n\tR_ALPHA_IMMED_GP_HI32  R_ALPHA = 20\n\tR_ALPHA_IMMED_SCN_HI32 R_ALPHA = 21\n\tR_ALPHA_IMMED_BR_HI32  R_ALPHA = 22\n\tR_ALPHA_IMMED_LO32     R_ALPHA = 23\n\tR_ALPHA_COPY           R_ALPHA = 24 /* Copy symbol at runtime */\n\tR_ALPHA_GLOB_DAT       R_ALPHA = 25 /* Create GOT entry */\n\tR_ALPHA_JMP_SLOT       R_ALPHA = 26 /* Create PLT entry */\n\tR_ALPHA_RELATIVE       R_ALPHA = 27 /* Adjust by program base */\n)</pre>\n\n",names:["R_ALPHA_NONE","R_ALPHA_REFLONG","R_ALPHA_REFQUAD","R_ALPHA_GPREL32","R_ALPHA_LITERAL","R_ALPHA_LITUSE","R_ALPHA_GPDISP","R_ALPHA_BRADDR","R_ALPHA_HINT","R_ALPHA_SREL16","R_ALPHA_SREL32","R_ALPHA_SREL64","R_ALPHA_OP_PUSH","R_ALPHA_OP_STORE","R_ALPHA_OP_PSUB","R_ALPHA_OP_PRSHIFT","R_ALPHA_GPVALUE","R_ALPHA_GPRELHIGH","R_ALPHA_GPRELLOW","R_ALPHA_IMMED_GP_16","R_ALPHA_IMMED_GP_HI32","R_ALPHA_IMMED_SCN_HI32","R_ALPHA_IMMED_BR_HI32","R_ALPHA_IMMED_LO32","R_ALPHA_COPY","R_ALPHA_GLOB_DAT","R_ALPHA_JMP_SLOT","R_ALPHA_RELATIVE"],type:"R_ALPHA"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_ARM!\">R_ARM</a></h2>\n<pre>const (\n\tR_ARM_NONE          R_ARM = 0 /* No relocation. */\n\tR_ARM_PC24          R_ARM = 1\n\tR_ARM_ABS32         R_ARM = 2\n\tR_ARM_REL32         R_ARM = 3\n\tR_ARM_PC13          R_ARM = 4\n\tR_ARM_ABS16         R_ARM = 5\n\tR_ARM_ABS12         R_ARM = 6\n\tR_ARM_THM_ABS5      R_ARM = 7\n\tR_ARM_ABS8          R_ARM = 8\n\tR_ARM_SBREL32       R_ARM = 9\n\tR_ARM_THM_PC22      R_ARM = 10\n\tR_ARM_THM_PC8       R_ARM = 11\n\tR_ARM_AMP_VCALL9    R_ARM = 12\n\tR_ARM_SWI24         R_ARM = 13\n\tR_ARM_THM_SWI8      R_ARM = 14\n\tR_ARM_XPC25         R_ARM = 15\n\tR_ARM_THM_XPC22     R_ARM = 16\n\tR_ARM_COPY          R_ARM = 20 /* Copy data from shared object. */\n\tR_ARM_GLOB_DAT      R_ARM = 21 /* Set GOT entry to data address. */\n\tR_ARM_JUMP_SLOT     R_ARM = 22 /* Set GOT entry to code address. */\n\tR_ARM_RELATIVE      R_ARM = 23 /* Add load address of shared object. */\n\tR_ARM_GOTOFF        R_ARM = 24 /* Add GOT-relative symbol address. */\n\tR_ARM_GOTPC         R_ARM = 25 /* Add PC-relative GOT table address. */\n\tR_ARM_GOT32         R_ARM = 26 /* Add PC-relative GOT offset. */\n\tR_ARM_PLT32         R_ARM = 27 /* Add PC-relative PLT offset. */\n\tR_ARM_GNU_VTENTRY   R_ARM = 100\n\tR_ARM_GNU_VTINHERIT R_ARM = 101\n\tR_ARM_RSBREL32      R_ARM = 250\n\tR_ARM_THM_RPC22     R_ARM = 251\n\tR_ARM_RREL32        R_ARM = 252\n\tR_ARM_RABS32        R_ARM = 253\n\tR_ARM_RPC24         R_ARM = 254\n\tR_ARM_RBASE         R_ARM = 255\n)</pre>\n\n",names:["R_ARM_NONE","R_ARM_PC24","R_ARM_ABS32","R_ARM_REL32","R_ARM_PC13","R_ARM_ABS16","R_ARM_ABS12","R_ARM_THM_ABS5","R_ARM_ABS8","R_ARM_SBREL32","R_ARM_THM_PC22","R_ARM_THM_PC8","R_ARM_AMP_VCALL9","R_ARM_SWI24","R_ARM_THM_SWI8","R_ARM_XPC25","R_ARM_THM_XPC22","R_ARM_COPY","R_ARM_GLOB_DAT","R_ARM_JUMP_SLOT","R_ARM_RELATIVE","R_ARM_GOTOFF","R_ARM_GOTPC","R_ARM_GOT32","R_ARM_PLT32","R_ARM_GNU_VTENTRY","R_ARM_GNU_VTINHERIT","R_ARM_RSBREL32","R_ARM_THM_RPC22","R_ARM_RREL32","R_ARM_RABS32","R_ARM_RPC24","R_ARM_RBASE"],type:"R_ARM"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_386!\">R_386</a></h2>\n<pre>const (\n\tR_386_NONE         R_386 = 0  /* No relocation. */\n\tR_386_32           R_386 = 1  /* Add symbol value. */\n\tR_386_PC32         R_386 = 2  /* Add PC-relative symbol value. */\n\tR_386_GOT32        R_386 = 3  /* Add PC-relative GOT offset. */\n\tR_386_PLT32        R_386 = 4  /* Add PC-relative PLT offset. */\n\tR_386_COPY         R_386 = 5  /* Copy data from shared object. */\n\tR_386_GLOB_DAT     R_386 = 6  /* Set GOT entry to data address. */\n\tR_386_JMP_SLOT     R_386 = 7  /* Set GOT entry to code address. */\n\tR_386_RELATIVE     R_386 = 8  /* Add load address of shared object. */\n\tR_386_GOTOFF       R_386 = 9  /* Add GOT-relative symbol address. */\n\tR_386_GOTPC        R_386 = 10 /* Add PC-relative GOT table address. */\n\tR_386_TLS_TPOFF    R_386 = 14 /* Negative offset in static TLS block */\n\tR_386_TLS_IE       R_386 = 15 /* Absolute address of GOT for -ve static TLS */\n\tR_386_TLS_GOTIE    R_386 = 16 /* GOT entry for negative static TLS block */\n\tR_386_TLS_LE       R_386 = 17 /* Negative offset relative to static TLS */\n\tR_386_TLS_GD       R_386 = 18 /* 32 bit offset to GOT (index,off) pair */\n\tR_386_TLS_LDM      R_386 = 19 /* 32 bit offset to GOT (index,zero) pair */\n\tR_386_TLS_GD_32    R_386 = 24 /* 32 bit offset to GOT (index,off) pair */\n\tR_386_TLS_GD_PUSH  R_386 = 25 /* pushl instruction for Sun ABI GD sequence */\n\tR_386_TLS_GD_CALL  R_386 = 26 /* call instruction for Sun ABI GD sequence */\n\tR_386_TLS_GD_POP   R_386 = 27 /* popl instruction for Sun ABI GD sequence */\n\tR_386_TLS_LDM_32   R_386 = 28 /* 32 bit offset to GOT (index,zero) pair */\n\tR_386_TLS_LDM_PUSH R_386 = 29 /* pushl instruction for Sun ABI LD sequence */\n\tR_386_TLS_LDM_CALL R_386 = 30 /* call instruction for Sun ABI LD sequence */\n\tR_386_TLS_LDM_POP  R_386 = 31 /* popl instruction for Sun ABI LD sequence */\n\tR_386_TLS_LDO_32   R_386 = 32 /* 32 bit offset from start of TLS block */\n\tR_386_TLS_IE_32    R_386 = 33 /* 32 bit offset to GOT static TLS offset entry */\n\tR_386_TLS_LE_32    R_386 = 34 /* 32 bit offset within static TLS block */\n\tR_386_TLS_DTPMOD32 R_386 = 35 /* GOT entry containing TLS index */\n\tR_386_TLS_DTPOFF32 R_386 = 36 /* GOT entry containing TLS offset */\n\tR_386_TLS_TPOFF32  R_386 = 37 /* GOT entry of -ve static TLS offset */\n)</pre>\n\n",names:["R_386_NONE","R_386_32","R_386_PC32","R_386_GOT32","R_386_PLT32","R_386_COPY","R_386_GLOB_DAT","R_386_JMP_SLOT","R_386_RELATIVE","R_386_GOTOFF","R_386_GOTPC","R_386_TLS_TPOFF","R_386_TLS_IE","R_386_TLS_GOTIE","R_386_TLS_LE","R_386_TLS_GD","R_386_TLS_LDM","R_386_TLS_GD_32","R_386_TLS_GD_PUSH","R_386_TLS_GD_CALL","R_386_TLS_GD_POP","R_386_TLS_LDM_32","R_386_TLS_LDM_PUSH","R_386_TLS_LDM_CALL","R_386_TLS_LDM_POP","R_386_TLS_LDO_32","R_386_TLS_IE_32","R_386_TLS_LE_32","R_386_TLS_DTPMOD32","R_386_TLS_DTPOFF32","R_386_TLS_TPOFF32"],type:"R_386"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_PPC!\">R_PPC</a></h2>\n<pre>const (\n\tR_PPC_NONE            R_PPC = 0 /* No relocation. */\n\tR_PPC_ADDR32          R_PPC = 1\n\tR_PPC_ADDR24          R_PPC = 2\n\tR_PPC_ADDR16          R_PPC = 3\n\tR_PPC_ADDR16_LO       R_PPC = 4\n\tR_PPC_ADDR16_HI       R_PPC = 5\n\tR_PPC_ADDR16_HA       R_PPC = 6\n\tR_PPC_ADDR14          R_PPC = 7\n\tR_PPC_ADDR14_BRTAKEN  R_PPC = 8\n\tR_PPC_ADDR14_BRNTAKEN R_PPC = 9\n\tR_PPC_REL24           R_PPC = 10\n\tR_PPC_REL14           R_PPC = 11\n\tR_PPC_REL14_BRTAKEN   R_PPC = 12\n\tR_PPC_REL14_BRNTAKEN  R_PPC = 13\n\tR_PPC_GOT16           R_PPC = 14\n\tR_PPC_GOT16_LO        R_PPC = 15\n\tR_PPC_GOT16_HI        R_PPC = 16\n\tR_PPC_GOT16_HA        R_PPC = 17\n\tR_PPC_PLTREL24        R_PPC = 18\n\tR_PPC_COPY            R_PPC = 19\n\tR_PPC_GLOB_DAT        R_PPC = 20\n\tR_PPC_JMP_SLOT        R_PPC = 21\n\tR_PPC_RELATIVE        R_PPC = 22\n\tR_PPC_LOCAL24PC       R_PPC = 23\n\tR_PPC_UADDR32         R_PPC = 24\n\tR_PPC_UADDR16         R_PPC = 25\n\tR_PPC_REL32           R_PPC = 26\n\tR_PPC_PLT32           R_PPC = 27\n\tR_PPC_PLTREL32        R_PPC = 28\n\tR_PPC_PLT16_LO        R_PPC = 29\n\tR_PPC_PLT16_HI        R_PPC = 30\n\tR_PPC_PLT16_HA        R_PPC = 31\n\tR_PPC_SDAREL16        R_PPC = 32\n\tR_PPC_SECTOFF         R_PPC = 33\n\tR_PPC_SECTOFF_LO      R_PPC = 34\n\tR_PPC_SECTOFF_HI      R_PPC = 35\n\tR_PPC_SECTOFF_HA      R_PPC = 36\n\tR_PPC_TLS             R_PPC = 67\n\tR_PPC_DTPMOD32        R_PPC = 68\n\tR_PPC_TPREL16         R_PPC = 69\n\tR_PPC_TPREL16_LO      R_PPC = 70\n\tR_PPC_TPREL16_HI      R_PPC = 71\n\tR_PPC_TPREL16_HA      R_PPC = 72\n\tR_PPC_TPREL32         R_PPC = 73\n\tR_PPC_DTPREL16        R_PPC = 74\n\tR_PPC_DTPREL16_LO     R_PPC = 75\n\tR_PPC_DTPREL16_HI     R_PPC = 76\n\tR_PPC_DTPREL16_HA     R_PPC = 77\n\tR_PPC_DTPREL32        R_PPC = 78\n\tR_PPC_GOT_TLSGD16     R_PPC = 79\n\tR_PPC_GOT_TLSGD16_LO  R_PPC = 80\n\tR_PPC_GOT_TLSGD16_HI  R_PPC = 81\n\tR_PPC_GOT_TLSGD16_HA  R_PPC = 82\n\tR_PPC_GOT_TLSLD16     R_PPC = 83\n\tR_PPC_GOT_TLSLD16_LO  R_PPC = 84\n\tR_PPC_GOT_TLSLD16_HI  R_PPC = 85\n\tR_PPC_GOT_TLSLD16_HA  R_PPC = 86\n\tR_PPC_GOT_TPREL16     R_PPC = 87\n\tR_PPC_GOT_TPREL16_LO  R_PPC = 88\n\tR_PPC_GOT_TPREL16_HI  R_PPC = 89\n\tR_PPC_GOT_TPREL16_HA  R_PPC = 90\n\tR_PPC_EMB_NADDR32     R_PPC = 101\n\tR_PPC_EMB_NADDR16     R_PPC = 102\n\tR_PPC_EMB_NADDR16_LO  R_PPC = 103\n\tR_PPC_EMB_NADDR16_HI  R_PPC = 104\n\tR_PPC_EMB_NADDR16_HA  R_PPC = 105\n\tR_PPC_EMB_SDAI16      R_PPC = 106\n\tR_PPC_EMB_SDA2I16     R_PPC = 107\n\tR_PPC_EMB_SDA2REL     R_PPC = 108\n\tR_PPC_EMB_SDA21       R_PPC = 109\n\tR_PPC_EMB_MRKREF      R_PPC = 110\n\tR_PPC_EMB_RELSEC16    R_PPC = 111\n\tR_PPC_EMB_RELST_LO    R_PPC = 112\n\tR_PPC_EMB_RELST_HI    R_PPC = 113\n\tR_PPC_EMB_RELST_HA    R_PPC = 114\n\tR_PPC_EMB_BIT_FLD     R_PPC = 115\n\tR_PPC_EMB_RELSDA      R_PPC = 116\n)</pre>\n\n",names:["R_PPC_NONE","R_PPC_ADDR32","R_PPC_ADDR24","R_PPC_ADDR16","R_PPC_ADDR16_LO","R_PPC_ADDR16_HI","R_PPC_ADDR16_HA","R_PPC_ADDR14","R_PPC_ADDR14_BRTAKEN","R_PPC_ADDR14_BRNTAKEN","R_PPC_REL24","R_PPC_REL14","R_PPC_REL14_BRTAKEN","R_PPC_REL14_BRNTAKEN","R_PPC_GOT16","R_PPC_GOT16_LO","R_PPC_GOT16_HI","R_PPC_GOT16_HA","R_PPC_PLTREL24","R_PPC_COPY","R_PPC_GLOB_DAT","R_PPC_JMP_SLOT","R_PPC_RELATIVE","R_PPC_LOCAL24PC","R_PPC_UADDR32","R_PPC_UADDR16","R_PPC_REL32","R_PPC_PLT32","R_PPC_PLTREL32","R_PPC_PLT16_LO","R_PPC_PLT16_HI","R_PPC_PLT16_HA","R_PPC_SDAREL16","R_PPC_SECTOFF","R_PPC_SECTOFF_LO","R_PPC_SECTOFF_HI","R_PPC_SECTOFF_HA","R_PPC_TLS","R_PPC_DTPMOD32","R_PPC_TPREL16","R_PPC_TPREL16_LO","R_PPC_TPREL16_HI","R_PPC_TPREL16_HA","R_PPC_TPREL32","R_PPC_DTPREL16","R_PPC_DTPREL16_LO","R_PPC_DTPREL16_HI","R_PPC_DTPREL16_HA","R_PPC_DTPREL32","R_PPC_GOT_TLSGD16","R_PPC_GOT_TLSGD16_LO","R_PPC_GOT_TLSGD16_HI","R_PPC_GOT_TLSGD16_HA","R_PPC_GOT_TLSLD16","R_PPC_GOT_TLSLD16_LO","R_PPC_GOT_TLSLD16_HI","R_PPC_GOT_TLSLD16_HA","R_PPC_GOT_TPREL16","R_PPC_GOT_TPREL16_LO","R_PPC_GOT_TPREL16_HI","R_PPC_GOT_TPREL16_HA","R_PPC_EMB_NADDR32","R_PPC_EMB_NADDR16","R_PPC_EMB_NADDR16_LO","R_PPC_EMB_NADDR16_HI","R_PPC_EMB_NADDR16_HA","R_PPC_EMB_SDAI16","R_PPC_EMB_SDA2I16","R_PPC_EMB_SDA2REL","R_PPC_EMB_SDA21","R_PPC_EMB_MRKREF","R_PPC_EMB_RELSEC16","R_PPC_EMB_RELST_LO","R_PPC_EMB_RELST_HI","R_PPC_EMB_RELST_HA","R_PPC_EMB_BIT_FLD","R_PPC_EMB_RELSDA"],type:"R_PPC"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:R_SPARC!\">R_SPARC</a></h2>\n<pre>const (\n\tR_SPARC_NONE     R_SPARC = 0\n\tR_SPARC_8        R_SPARC = 1\n\tR_SPARC_16       R_SPARC = 2\n\tR_SPARC_32       R_SPARC = 3\n\tR_SPARC_DISP8    R_SPARC = 4\n\tR_SPARC_DISP16   R_SPARC = 5\n\tR_SPARC_DISP32   R_SPARC = 6\n\tR_SPARC_WDISP30  R_SPARC = 7\n\tR_SPARC_WDISP22  R_SPARC = 8\n\tR_SPARC_HI22     R_SPARC = 9\n\tR_SPARC_22       R_SPARC = 10\n\tR_SPARC_13       R_SPARC = 11\n\tR_SPARC_LO10     R_SPARC = 12\n\tR_SPARC_GOT10    R_SPARC = 13\n\tR_SPARC_GOT13    R_SPARC = 14\n\tR_SPARC_GOT22    R_SPARC = 15\n\tR_SPARC_PC10     R_SPARC = 16\n\tR_SPARC_PC22     R_SPARC = 17\n\tR_SPARC_WPLT30   R_SPARC = 18\n\tR_SPARC_COPY     R_SPARC = 19\n\tR_SPARC_GLOB_DAT R_SPARC = 20\n\tR_SPARC_JMP_SLOT R_SPARC = 21\n\tR_SPARC_RELATIVE R_SPARC = 22\n\tR_SPARC_UA32     R_SPARC = 23\n\tR_SPARC_PLT32    R_SPARC = 24\n\tR_SPARC_HIPLT22  R_SPARC = 25\n\tR_SPARC_LOPLT10  R_SPARC = 26\n\tR_SPARC_PCPLT32  R_SPARC = 27\n\tR_SPARC_PCPLT22  R_SPARC = 28\n\tR_SPARC_PCPLT10  R_SPARC = 29\n\tR_SPARC_10       R_SPARC = 30\n\tR_SPARC_11       R_SPARC = 31\n\tR_SPARC_64       R_SPARC = 32\n\tR_SPARC_OLO10    R_SPARC = 33\n\tR_SPARC_HH22     R_SPARC = 34\n\tR_SPARC_HM10     R_SPARC = 35\n\tR_SPARC_LM22     R_SPARC = 36\n\tR_SPARC_PC_HH22  R_SPARC = 37\n\tR_SPARC_PC_HM10  R_SPARC = 38\n\tR_SPARC_PC_LM22  R_SPARC = 39\n\tR_SPARC_WDISP16  R_SPARC = 40\n\tR_SPARC_WDISP19  R_SPARC = 41\n\tR_SPARC_GLOB_JMP R_SPARC = 42\n\tR_SPARC_7        R_SPARC = 43\n\tR_SPARC_5        R_SPARC = 44\n\tR_SPARC_6        R_SPARC = 45\n\tR_SPARC_DISP64   R_SPARC = 46\n\tR_SPARC_PLT64    R_SPARC = 47\n\tR_SPARC_HIX22    R_SPARC = 48\n\tR_SPARC_LOX10    R_SPARC = 49\n\tR_SPARC_H44      R_SPARC = 50\n\tR_SPARC_M44      R_SPARC = 51\n\tR_SPARC_L44      R_SPARC = 52\n\tR_SPARC_REGISTER R_SPARC = 53\n\tR_SPARC_UA64     R_SPARC = 54\n\tR_SPARC_UA16     R_SPARC = 55\n)</pre>\n\n",names:["R_SPARC_NONE","R_SPARC_8","R_SPARC_16","R_SPARC_32","R_SPARC_DISP8","R_SPARC_DISP16","R_SPARC_DISP32","R_SPARC_WDISP30","R_SPARC_WDISP22","R_SPARC_HI22","R_SPARC_22","R_SPARC_13","R_SPARC_LO10","R_SPARC_GOT10","R_SPARC_GOT13","R_SPARC_GOT22","R_SPARC_PC10","R_SPARC_PC22","R_SPARC_WPLT30","R_SPARC_COPY","R_SPARC_GLOB_DAT","R_SPARC_JMP_SLOT","R_SPARC_RELATIVE","R_SPARC_UA32","R_SPARC_PLT32","R_SPARC_HIPLT22","R_SPARC_LOPLT10","R_SPARC_PCPLT32","R_SPARC_PCPLT22","R_SPARC_PCPLT10","R_SPARC_10","R_SPARC_11","R_SPARC_64","R_SPARC_OLO10","R_SPARC_HH22","R_SPARC_HM10","R_SPARC_LM22","R_SPARC_PC_HH22","R_SPARC_PC_HM10","R_SPARC_PC_LM22","R_SPARC_WDISP16","R_SPARC_WDISP19","R_SPARC_GLOB_JMP","R_SPARC_7","R_SPARC_5","R_SPARC_6","R_SPARC_DISP64","R_SPARC_PLT64","R_SPARC_HIX22","R_SPARC_LOX10","R_SPARC_H44","R_SPARC_M44","R_SPARC_L44","R_SPARC_REGISTER","R_SPARC_UA64","R_SPARC_UA16"],type:"R_SPARC"},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ARM_MAGIC_TRAMP_NUMBER!\">ARM_MAGIC_TRAMP_NUMBER</a></h2>\n<pre>const ARM_MAGIC_TRAMP_NUMBER = 0x5c000003</pre>\n<p>\nMagic number for the elf trampoline, chosen wisely to be an immediate value.\n</p>\n\n",names:["ARM_MAGIC_TRAMP_NUMBER"],type:""},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Sym32Size!\">Sym32Size</a></h2>\n<pre>const Sym32Size = 16</pre>\n\n",names:["Sym32Size"],type:""},{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Sym64Size!\">Sym64Size</a></h2>\n<pre>const Sym64Size = 24</pre>\n\n",names:["Sym64Size"],type:""}],vars:[]}