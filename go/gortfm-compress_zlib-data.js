var gortfmData = {index:"index.html",html:"<p>\nThe zlib package implements reading and writing of zlib\nformat compressed data, as specified in RFC 1950.\n</p>\n<p>\nThe implementation provides filters that uncompress during reading\nand compress during writing.  For example, to write compressed data\nto a buffer:\n</p>\n<pre>var b bytes.Buffer\nw, err := zlib.NewWriter(&amp;b)\nw.Write([]byte(&#34;hello, world\\n&#34;))\nw.Close()\n</pre>\n<p>\nand to read that data back:\n</p>\n<pre>r, err := zlib.NewReader(&amp;b)\nio.Copy(os.Stdout, r)\nr.Close()\n</pre>\n",name:"zlib",types:[],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewReader!\">NewReader</a></h2>\n<code>func NewReader(r io.Reader) (io.ReadCloser, os.Error)</code>\n<p>\nNewReader creates a new io.ReadCloser that satisfies reads by decompressing data read from r.\nThe implementation buffers input and may read more data than necessary from r.\nIt is the caller&#39;s responsibility to call Close on the ReadCloser when done.\n</p>\n\n",name:"NewReader"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewWriter!\">NewWriter</a></h2>\n<code>func NewWriter(w io.Writer) (io.WriteCloser, os.Error)</code>\n<p>\nNewWriter calls NewWriterLevel with the default compression level.\n</p>\n\n",name:"NewWriter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewWriterLevel!\">NewWriterLevel</a></h2>\n<code>func NewWriterLevel(w io.Writer, level int) (io.WriteCloser, os.Error)</code>\n<p>\nNewWriterLevel creates a new io.WriteCloser that satisfies writes by compressing data written to w.\nIt is the caller&#39;s responsibility to call Close on the WriteCloser when done.\nlevel is the compression level, which can be DefaultCompression, NoCompression,\nor any integer value between BestSpeed and BestCompression (inclusive).\n</p>\n\n",name:"NewWriterLevel"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:NoCompression!\"><em>group</em></a></h2>\n<pre>const (\n\tNoCompression      = flate.NoCompression\n\tBestSpeed          = flate.BestSpeed\n\tBestCompression    = flate.BestCompression\n\tDefaultCompression = flate.DefaultCompression\n)</pre>\n<p>\nThese constants are copied from the flate package, so that code that imports\n&#34;compress/zlib&#34; does not also have to import &#34;compress/flate&#34;.\n</p>\n\n",names:["NoCompression","BestSpeed","BestCompression","DefaultCompression"],type:""}],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:ChecksumError!\">ChecksumError</a></h2>\n<pre>var ChecksumError os.Error = os.ErrorString(&#34;zlib checksum error&#34;)</pre>\n\n",names:["ChecksumError"],type:""},{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:HeaderError!\">HeaderError</a></h2>\n<pre>var HeaderError os.Error = os.ErrorString(&#34;invalid zlib header&#34;)</pre>\n\n",names:["HeaderError"],type:""},{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:UnsupportedError!\">UnsupportedError</a></h2>\n<pre>var UnsupportedError os.Error = os.ErrorString(&#34;unsupported zlib format&#34;)</pre>\n\n",names:["UnsupportedError"],type:""}]}