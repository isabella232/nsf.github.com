var gortfmData = {index:"index.html",html:"<p>\nPackage base32 implements base32 encoding as specified by RFC 4648.\n</p>\n",name:"base32",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:CorruptInputError!\">CorruptInputError</a></h2>\n<pre>type CorruptInputError int64</pre>\n\n",name:"CorruptInputError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:CorruptInputError\">func (CorruptInputError)</a> <a href=\"?m:CorruptInputError.String!\">String</a></h2>\n<code>func (e CorruptInputError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Encoding!\">Encoding</a></h2>\n<pre>type Encoding struct {\n\t// contains unexported fields\n}</pre>\n<p>\nAn Encoding is a radix 32 encoding/decoding scheme, defined by a\n32-character alphabet.  The most common is the &#34;base32&#34; encoding\nintroduced for SASL GSSAPI and standardized in RFC 4648.\nThe alternate &#34;base32hex&#34; encoding is used in DNSSEC.\n</p>\n\n",name:"Encoding","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.Decode!\">Decode</a></h2>\n<code>func (enc *Encoding) Decode(dst, src []byte) (n int, err os.Error)</code>\n<p>\nDecode decodes src using the encoding enc.  It writes at most\nDecodedLen(len(src)) bytes to dst and returns the number of bytes\nwritten.  If src contains invalid base32 data, it will return the\nnumber of bytes successfully written and CorruptInputError.\n</p>\n\n",name:"Decode"},{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.DecodedLen!\">DecodedLen</a></h2>\n<code>func (enc *Encoding) DecodedLen(n int) int</code>\n<p>\nDecodedLen returns the maximum length in bytes of the decoded data\ncorresponding to n bytes of base32-encoded data.\n</p>\n\n",name:"DecodedLen"},{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.Encode!\">Encode</a></h2>\n<code>func (enc *Encoding) Encode(dst, src []byte)</code>\n<p>\nEncode encodes src using the encoding enc, writing\nEncodedLen(len(src)) bytes to dst.\n</p>\n<p>\nThe encoding pads the output to a multiple of 8 bytes,\nso Encode is not appropriate for use on individual blocks\nof a large data stream.  Use NewEncoder() instead.\n</p>\n\n",name:"Encode"},{html:"\n<h2><a class=\"black\" href=\"?m:Encoding\">func (*Encoding)</a> <a href=\"?m:Encoding.EncodedLen!\">EncodedLen</a></h2>\n<code>func (enc *Encoding) EncodedLen(n int) int</code>\n<p>\nEncodedLen returns the length in bytes of the base32 encoding\nof an input buffer of length n.\n</p>\n\n",name:"EncodedLen"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewDecoder!\">NewDecoder</a></h2>\n<code>func NewDecoder(enc *Encoding, r io.Reader) io.Reader</code>\n<p>\nNewDecoder constructs a new base32 stream decoder.\n</p>\n\n",name:"NewDecoder"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEncoder!\">NewEncoder</a></h2>\n<code>func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser</code>\n<p>\nNewEncoder returns a new base32 stream encoder.  Data written to\nthe returned writer will be encoded using enc and then written to w.\nBase32 encodings operate in 5-byte blocks; when finished\nwriting, the caller must Close the returned encoder to flush any\npartially written blocks.\n</p>\n\n",name:"NewEncoder"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEncoding!\">NewEncoding</a></h2>\n<code>func NewEncoding(encoder string) *Encoding</code>\n<p>\nNewEncoding returns a new Encoding defined by the given alphabet,\nwhich must be a 32-byte string.\n</p>\n\n",name:"NewEncoding"}],consts:[],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:StdEncoding!\">StdEncoding</a></h2>\n<pre>var StdEncoding = NewEncoding(encodeStd)</pre>\n<p>\nStdEncoding is the standard base32 encoding, as defined in\nRFC 4648.\n</p>\n\n",names:["StdEncoding"],type:""},{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:HexEncoding!\">HexEncoding</a></h2>\n<pre>var HexEncoding = NewEncoding(encodeHex)</pre>\n<p>\nHexEncoding is the &ldquo;Extended Hex Alphabet&rdquo; defined in RFC 4648.\nIt is typically used in DNS.\n</p>\n\n",names:["HexEncoding"],type:""}]}