var gortfmData = {index:"index.html",html:"<p>\nPackage patch implements parsing and execution of the textual and\nbinary patch descriptions used by version control tools such as\nCVS, Git, Mercurial, and Subversion.\n</p>\n",name:"patch",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Diff!\">Diff</a></h2>\n<pre>type Diff interface {\n\t// Apply applies the changes listed in the diff\n\t// to the string s, returning the new version of the string.\n\t// Note that the string s need not be a text string.\n\tApply(old []byte) (new []byte, err os.Error)\n}</pre>\n<p>\nA Diff is any object that describes changes to transform\nan old byte stream to a new one.\n</p>\n\n",name:"Diff","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:File!\">File</a></h2>\n<pre>type File struct {\n\tVerb             Verb\n\tSrc              string // source for Verb == Copy, Verb == Rename\n\tDst              string\n\tOldMode, NewMode int // 0 indicates not used\n\tDiff                 // changes to data; == NoDiff if operation does not edit file\n}</pre>\n<p>\nA File represents a collection of changes to be made to a single file.\n</p>\n\n",name:"File","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:GitBinaryLiteral!\">GitBinaryLiteral</a></h2>\n<pre>type GitBinaryLiteral struct {\n\tOldSHA1 []byte // if non-empty, the SHA1 hash of the original\n\tNew     []byte // the new contents\n}</pre>\n<p>\nGitBinaryLiteral represents a Git binary literal diff.\n</p>\n\n",name:"GitBinaryLiteral","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:GitBinaryLiteral\">func (*GitBinaryLiteral)</a> <a href=\"?m:GitBinaryLiteral.Apply!\">Apply</a></h2>\n<code>func (d *GitBinaryLiteral) Apply(old []byte) ([]byte, os.Error)</code>\n<p>\nApply implements the Diff interface&#39;s Apply method.\n</p>\n\n",name:"Apply"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Op!\">Op</a></h2>\n<pre>type Op struct {\n\tVerb Verb   // action\n\tSrc  string // source file\n\tDst  string // destination file\n\tMode int    // mode for destination (if non-zero)\n\tData []byte // data for destination (if non-nil)\n}</pre>\n<p>\nAn Op is a single operation to execute to apply a patch.\n</p>\n\n",name:"Op","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Set!\">Set</a></h2>\n<pre>type Set struct {\n\tHeader string // free-form text\n\tFile   []*File\n}</pre>\n<p>\nA Set represents a set of patches to be applied as a single atomic unit.\nPatch sets are often preceded by a descriptive header.\n</p>\n\n",name:"Set","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Set\">func (*Set)</a> <a href=\"?m:Set.Apply!\">Apply</a></h2>\n<code>func (set *Set) Apply(readFile func(string) ([]byte, os.Error)) ([]Op, os.Error)</code>\n<p>\nApply applies the patch set to the files named in the patch set,\nconstructing an in-memory copy of the new file state.\nIt is the client&#39;s job to write the changes to the file system\nif desired.\n</p>\n<p>\nThe function readFile should return the contents of the named file.\nTypically this function will be io.ReadFile.\n</p>\n\n",name:"Apply"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:SyntaxError!\">SyntaxError</a></h2>\n<pre>type SyntaxError string</pre>\n<p>\nA SyntaxError represents a syntax error encountered while parsing a patch.\n</p>\n\n",name:"SyntaxError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:SyntaxError\">func (SyntaxError)</a> <a href=\"?m:SyntaxError.String!\">String</a></h2>\n<code>func (e SyntaxError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:TextChunk!\">TextChunk</a></h2>\n<pre>type TextChunk struct {\n\tLine int\n\tOld  []byte\n\tNew  []byte\n}</pre>\n<p>\nA TextChunk specifies an edit to a section of a file:\nthe text beginning at Line, which should be exactly Old,\nis to be replaced with New.\n</p>\n\n",name:"TextChunk","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:TextDiff!\">TextDiff</a></h2>\n<pre>type TextDiff []TextChunk</pre>\n\n",name:"TextDiff","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:TextDiff\">func (TextDiff)</a> <a href=\"?m:TextDiff.Apply!\">Apply</a></h2>\n<code>func (d TextDiff) Apply(data []byte) ([]byte, os.Error)</code>\n<p>\nApply applies the changes listed in the diff\nto the data, returning the new version.\n</p>\n\n",name:"Apply"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Verb!\">Verb</a></h2>\n<pre>type Verb string</pre>\n<p>\nA Verb is an action performed on a file.\n</p>\n\n",name:"Verb","methods":[]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Parse!\">Parse</a></h2>\n<code>func Parse(text []byte) (*Set, os.Error)</code>\n<p>\nParse patches the patch text to create a patch Set.\nThe patch text typically comprises a textual header and a sequence\nof file patches, as would be generated by CVS, Subversion,\nMercurial, or Git.\n</p>\n\n",name:"Parse"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ParseGitBinary!\">ParseGitBinary</a></h2>\n<code>func ParseGitBinary(raw []byte) (Diff, os.Error)</code>\n<p>\nParseGitBinary parses raw as a Git binary patch.\n</p>\n\n",name:"ParseGitBinary"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ParseTextDiff!\">ParseTextDiff</a></h2>\n<code>func ParseTextDiff(raw []byte) (TextDiff, os.Error)</code>\n\n",name:"ParseTextDiff"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:Verb!\">Verb</a></h2>\n<pre>const (\n\tAdd    Verb = &#34;add&#34;\n\tCopy   Verb = &#34;copy&#34;\n\tDelete Verb = &#34;delete&#34;\n\tEdit   Verb = &#34;edit&#34;\n\tRename Verb = &#34;rename&#34;\n)</pre>\n\n",names:["Add","Copy","Delete","Edit","Rename"],type:"Verb"}],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:ErrPatchFailure!\">ErrPatchFailure</a></h2>\n<pre>var ErrPatchFailure = os.NewError(&#34;patch did not apply cleanly&#34;)</pre>\n\n",names:["ErrPatchFailure"],type:""},{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:NoDiff!\">NoDiff</a></h2>\n<pre>var NoDiff Diff = noDiffType(0)</pre>\n<p>\nNoDiff is a no-op Diff implementation: it passes the\nold data through unchanged.\n</p>\n\n",names:["NoDiff"],type:""}]}