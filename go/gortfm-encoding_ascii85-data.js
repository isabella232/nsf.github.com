var gortfmData = {index:"index.html",html:"<p>\nPackage ascii85 implements the ascii85 data encoding\nas used in the btoa tool and Adobe&#39;s PostScript and PDF document formats.\n</p>\n",name:"ascii85",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:CorruptInputError!\">CorruptInputError</a></h2>\n<pre>type CorruptInputError int64</pre>\n\n",name:"CorruptInputError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:CorruptInputError\">func (CorruptInputError)</a> <a href=\"?m:CorruptInputError.String!\">String</a></h2>\n<code>func (e CorruptInputError) String() string</code>\n\n",name:"String"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Decode!\">Decode</a></h2>\n<code>func Decode(dst, src []byte, flush bool) (ndst, nsrc int, err os.Error)</code>\n<p>\nDecode decodes src into dst, returning both the number\nof bytes written to dst and the number consumed from src.\nIf src contains invalid ascii85 data, Decode will return the\nnumber of bytes successfully written and a CorruptInputError.\nDecode ignores space and control characters in src.\nOften, ascii85-encoded data is wrapped in &lt;~ and ~&gt; symbols.\nDecode expects these to have been stripped by the caller.\n</p>\n<p>\nIf flush is true, Decode assumes that src represents the\nend of the input stream and processes it completely rather\nthan wait for the completion of another 32-bit block.\n</p>\n<p>\nNewDecoder wraps an io.Reader interface around Decode.\n</p>\n\n",name:"Decode"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Encode!\">Encode</a></h2>\n<code>func Encode(dst, src []byte) int</code>\n<p>\nEncode encodes src into at most MaxEncodedLen(len(src))\nbytes of dst, returning the actual number of bytes written.\n</p>\n<p>\nThe encoding handles 4-byte chunks, using a special encoding\nfor the last fragment, so Encode is not appropriate for use on\nindividual blocks of a large data stream.  Use NewEncoder() instead.\n</p>\n<p>\nOften, ascii85-encoded data is wrapped in &lt;~ and ~&gt; symbols.\nEncode does not add these.\n</p>\n\n",name:"Encode"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:MaxEncodedLen!\">MaxEncodedLen</a></h2>\n<code>func MaxEncodedLen(n int) int</code>\n<p>\nMaxEncodedLen returns the maximum length of an encoding of n source bytes.\n</p>\n\n",name:"MaxEncodedLen"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewDecoder!\">NewDecoder</a></h2>\n<code>func NewDecoder(r io.Reader) io.Reader</code>\n<p>\nNewDecoder constructs a new ascii85 stream decoder.\n</p>\n\n",name:"NewDecoder"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEncoder!\">NewEncoder</a></h2>\n<code>func NewEncoder(w io.Writer) io.WriteCloser</code>\n<p>\nNewEncoder returns a new ascii85 stream encoder.  Data written to\nthe returned writer will be encoded and then written to w.\nAscii85 encodings operate in 32-bit blocks; when finished\nwriting, the caller must Close the returned encoder to flush any\ntrailing partial block.\n</p>\n\n",name:"NewEncoder"}],consts:[],vars:[]}