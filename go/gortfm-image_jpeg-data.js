var gortfmData = {index:"index.html",html:"<p>\nPackage jpeg implements a JPEG image decoder and encoder.\n</p>\n<p>\nJPEG is defined in ITU-T T.81: <a href=\"http://www.w3.org/Graphics/JPEG/itu-t81.pdf\">http://www.w3.org/Graphics/JPEG/itu-t81.pdf</a>.\n</p>\n",name:"jpeg",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:FormatError!\">FormatError</a></h2>\n<pre>type FormatError string</pre>\n<p>\nA FormatError reports that the input is not a valid JPEG.\n</p>\n\n",name:"FormatError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:FormatError\">func (FormatError)</a> <a href=\"?m:FormatError.String!\">String</a></h2>\n<code>func (e FormatError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Options!\">Options</a></h2>\n<pre>type Options struct {\n\tQuality int\n}</pre>\n<p>\nOptions are the encoding parameters.\nQuality ranges from 1 to 100 inclusive, higher is better.\n</p>\n\n",name:"Options","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Reader!\">Reader</a></h2>\n<pre>type Reader interface {\n\tio.Reader\n\tReadByte() (c byte, err os.Error)\n}</pre>\n<p>\nIf the passed in io.Reader does not also have ReadByte, then Decode will introduce its own buffering.\n</p>\n\n",name:"Reader","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:UnsupportedError!\">UnsupportedError</a></h2>\n<pre>type UnsupportedError string</pre>\n<p>\nAn UnsupportedError reports that the input uses a valid but unimplemented JPEG feature.\n</p>\n\n",name:"UnsupportedError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:UnsupportedError\">func (UnsupportedError)</a> <a href=\"?m:UnsupportedError.String!\">String</a></h2>\n<code>func (e UnsupportedError) String() string</code>\n\n",name:"String"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Decode!\">Decode</a></h2>\n<code>func Decode(r io.Reader) (image.Image, os.Error)</code>\n<p>\nDecode reads a JPEG image from r and returns it as an image.Image.\n</p>\n\n",name:"Decode"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:DecodeConfig!\">DecodeConfig</a></h2>\n<code>func DecodeConfig(r io.Reader) (image.Config, os.Error)</code>\n<p>\nDecodeConfig returns the color model and dimensions of a JPEG image without\ndecoding the entire image.\n</p>\n\n",name:"DecodeConfig"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Encode!\">Encode</a></h2>\n<code>func Encode(w io.Writer, m image.Image, o *Options) os.Error</code>\n<p>\nEncode writes the Image m to w in JPEG 4:2:0 baseline format with the given\noptions. Default parameters are used if a nil *Options is passed.\n</p>\n\n",name:"Encode"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:DefaultQuality!\">DefaultQuality</a></h2>\n<pre>const DefaultQuality = 75</pre>\n<p>\nDefaultQuality is the default quality encoding parameter.\n</p>\n\n",names:["DefaultQuality"],type:""}],vars:[]}