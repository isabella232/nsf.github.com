var gortfmData = {index:"index.html",html:"<p>\nPackage cgi implements CGI (Common Gateway Interface) as specified\nin RFC 3875.\n</p>\n<p>\nNote that using CGI means starting a new process to handle each\nrequest, which is typically less efficient than using a\nlong-running server.  This package is intended primarily for\ncompatibility with existing systems.\n</p>\n",name:"cgi",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Handler!\">Handler</a></h2>\n<pre>type Handler struct {\n\tPath string // path to the CGI executable\n\tRoot string // root URI prefix of handler or empty for &#34;/&#34;\n\n\tEnv    []string    // extra environment variables to set, if any\n\tLogger *log.Logger // optional log for errors or nil to use log.Print\n\tArgs   []string    // optional arguments to pass to child process\n}</pre>\n<p>\nHandler runs an executable in a subprocess with a CGI environment.\n</p>\n\n",name:"Handler","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Handler\">func (*Handler)</a> <a href=\"?m:Handler.ServeHTTP!\">ServeHTTP</a></h2>\n<code>func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request)</code>\n\n",name:"ServeHTTP"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Request!\">Request</a></h2>\n<code>func Request() (*http.Request, os.Error)</code>\n<p>\nRequest returns the HTTP request as represented in the current\nenvironment. This assumes the current program is being run\nby a web server in a CGI environment.\n</p>\n\n",name:"Request"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Serve!\">Serve</a></h2>\n<code>func Serve(handler http.Handler) os.Error</code>\n<p>\nServe executes the provided Handler on the currently active CGI\nrequest, if any. If there&#39;s no current CGI environment\nan error is returned. The provided handler may be nil to use\nhttp.DefaultServeMux.\n</p>\n\n",name:"Serve"}],consts:[],vars:[]}