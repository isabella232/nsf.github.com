var gortfmData = {index:"index.html",html:"<p>\nPackage gosym implements access to the Go symbol\nand line number tables embedded in Go binaries generated\nby the gc compilers.\n</p>\n",name:"gosym",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:DecodingError!\">DecodingError</a></h2>\n<pre>type DecodingError struct {\n\t// contains unexported fields\n}</pre>\n<p>\nDecodingError represents an error during the decoding of\nthe symbol table.\n</p>\n\n",name:"DecodingError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:DecodingError\">func (*DecodingError)</a> <a href=\"?m:DecodingError.String!\">String</a></h2>\n<code>func (e *DecodingError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Func!\">Func</a></h2>\n<pre>type Func struct {\n\tEntry uint64\n\t*Sym\n\tEnd       uint64\n\tParams    []*Sym\n\tLocals    []*Sym\n\tFrameSize int\n\tLineTable *LineTable\n\tObj       *Obj\n}</pre>\n<p>\nA Func collects information about a single function.\n</p>\n\n",name:"Func","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:LineTable!\">LineTable</a></h2>\n<pre>type LineTable struct {\n\tData []byte\n\tPC   uint64\n\tLine int\n}</pre>\n\n",name:"LineTable","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:LineTable\">func (*LineTable)</a> <a href=\"?m:LineTable.LineToPC!\">LineToPC</a></h2>\n<code>func (t *LineTable) LineToPC(line int, maxpc uint64) uint64</code>\n\n",name:"LineToPC"},{html:"\n<h2><a class=\"black\" href=\"?m:LineTable\">func (*LineTable)</a> <a href=\"?m:LineTable.PCToLine!\">PCToLine</a></h2>\n<code>func (t *LineTable) PCToLine(pc uint64) int</code>\n\n",name:"PCToLine"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Obj!\">Obj</a></h2>\n<pre>type Obj struct {\n\tFuncs []Func\n\tPaths []Sym\n}</pre>\n<p>\nAn Obj represents a single object file.\n</p>\n\n",name:"Obj","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Sym!\">Sym</a></h2>\n<pre>type Sym struct {\n\tValue  uint64\n\tType   byte\n\tName   string\n\tGoType uint64\n\t// If this symbol if a function symbol, the corresponding Func\n\tFunc *Func\n}</pre>\n<p>\nA Sym represents a single symbol table entry.\n</p>\n\n",name:"Sym","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Sym\">func (*Sym)</a> <a href=\"?m:Sym.BaseName!\">BaseName</a></h2>\n<code>func (s *Sym) BaseName() string</code>\n<p>\nBaseName returns the symbol name without the package or receiver name.\n</p>\n\n",name:"BaseName"},{html:"\n<h2><a class=\"black\" href=\"?m:Sym\">func (*Sym)</a> <a href=\"?m:Sym.PackageName!\">PackageName</a></h2>\n<code>func (s *Sym) PackageName() string</code>\n<p>\nPackageName returns the package part of the symbol name,\nor the empty string if there is none.\n</p>\n\n",name:"PackageName"},{html:"\n<h2><a class=\"black\" href=\"?m:Sym\">func (*Sym)</a> <a href=\"?m:Sym.ReceiverName!\">ReceiverName</a></h2>\n<code>func (s *Sym) ReceiverName() string</code>\n<p>\nReceiverName returns the receiver type name of this symbol,\nor the empty string if there is none.\n</p>\n\n",name:"ReceiverName"},{html:"\n<h2><a class=\"black\" href=\"?m:Sym\">func (*Sym)</a> <a href=\"?m:Sym.Static!\">Static</a></h2>\n<code>func (s *Sym) Static() bool</code>\n<p>\nStatic returns whether this symbol is static (not visible outside its file).\n</p>\n\n",name:"Static"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Table!\">Table</a></h2>\n<pre>type Table struct {\n\tSyms  []Sym\n\tFuncs []Func\n\tFiles map[string]*Obj\n\tObjs  []Obj\n}</pre>\n<p>\nTable represents a Go symbol table.  It stores all of the\nsymbols decoded from the program and provides methods to translate\nbetween symbols, names, and addresses.\n</p>\n\n",name:"Table","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Table\">func (*Table)</a> <a href=\"?m:Table.LineToPC!\">LineToPC</a></h2>\n<code>func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err os.Error)</code>\n<p>\nLineToPC looks up the first program counter on the given line in\nthe named file.  Returns UnknownPathError or UnknownLineError if\nthere is an error looking up this line.\n</p>\n\n",name:"LineToPC"},{html:"\n<h2><a class=\"black\" href=\"?m:Table\">func (*Table)</a> <a href=\"?m:Table.LookupFunc!\">LookupFunc</a></h2>\n<code>func (t *Table) LookupFunc(name string) *Func</code>\n<p>\nLookupFunc returns the text, data, or bss symbol with the given name,\nor nil if no such symbol is found.\n</p>\n\n",name:"LookupFunc"},{html:"\n<h2><a class=\"black\" href=\"?m:Table\">func (*Table)</a> <a href=\"?m:Table.LookupSym!\">LookupSym</a></h2>\n<code>func (t *Table) LookupSym(name string) *Sym</code>\n<p>\nLookupSym returns the text, data, or bss symbol with the given name,\nor nil if no such symbol is found.\n</p>\n\n",name:"LookupSym"},{html:"\n<h2><a class=\"black\" href=\"?m:Table\">func (*Table)</a> <a href=\"?m:Table.PCToFunc!\">PCToFunc</a></h2>\n<code>func (t *Table) PCToFunc(pc uint64) *Func</code>\n<p>\nPCToFunc returns the function containing the program counter pc,\nor nil if there is no such function.\n</p>\n\n",name:"PCToFunc"},{html:"\n<h2><a class=\"black\" href=\"?m:Table\">func (*Table)</a> <a href=\"?m:Table.PCToLine!\">PCToLine</a></h2>\n<code>func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)</code>\n<p>\nPCToLine looks up line number information for a program counter.\nIf there is no information, it returns fn == nil.\n</p>\n\n",name:"PCToLine"},{html:"\n<h2><a class=\"black\" href=\"?m:Table\">func (*Table)</a> <a href=\"?m:Table.SymByAddr!\">SymByAddr</a></h2>\n<code>func (t *Table) SymByAddr(addr uint64) *Sym</code>\n<p>\nSymByAddr returns the text, data, or bss symbol starting at the given address.\nTODO(rsc): Allow lookup by any address within the symbol.\n</p>\n\n",name:"SymByAddr"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:UnknownFileError!\">UnknownFileError</a></h2>\n<pre>type UnknownFileError string</pre>\n<p>\nUnknownFileError represents a failure to find the specific file in\nthe symbol table.\n</p>\n\n",name:"UnknownFileError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:UnknownFileError\">func (UnknownFileError)</a> <a href=\"?m:UnknownFileError.String!\">String</a></h2>\n<code>func (e UnknownFileError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:UnknownLineError!\">UnknownLineError</a></h2>\n<pre>type UnknownLineError struct {\n\tFile string\n\tLine int\n}</pre>\n<p>\nUnknownLineError represents a failure to map a line to a program\ncounter, either because the line is beyond the bounds of the file\nor because there is no code on the given line.\n</p>\n\n",name:"UnknownLineError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:UnknownLineError\">func (*UnknownLineError)</a> <a href=\"?m:UnknownLineError.String!\">String</a></h2>\n<code>func (e *UnknownLineError) String() string</code>\n\n",name:"String"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewLineTable!\">NewLineTable</a></h2>\n<code>func NewLineTable(data []byte, text uint64) *LineTable</code>\n<p>\nNewLineTable returns a new PC/line table\ncorresponding to the encoded data.\nText must be the start address of the\ncorresponding text segment.\n</p>\n\n",name:"NewLineTable"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewTable!\">NewTable</a></h2>\n<code>func NewTable(symtab []byte, pcln *LineTable) (*Table, os.Error)</code>\n<p>\nNewTable decodes the Go symbol table in data,\nreturning an in-memory representation.\n</p>\n\n",name:"NewTable"}],consts:[],vars:[]}