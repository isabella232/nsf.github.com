var gortfmData = {index:"index.html",html:"<p>\nPackage dsa implements the Digital Signature Algorithm, as defined in FIPS 186-3\n</p>\n",name:"dsa",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:ParameterSizes!\">ParameterSizes</a></h2>\n<pre>type ParameterSizes int</pre>\n<p>\nParameterSizes is a enumeration of the acceptable bit lengths of the primes\nin a set of DSA parameters. See FIPS 186-3, section 4.2.\n</p>\n\n",name:"ParameterSizes","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Parameters!\">Parameters</a></h2>\n<pre>type Parameters struct {\n\tP, Q, G *big.Int\n}</pre>\n<p>\nParameters represents the domain parameters for a key. These parameters can\nbe shared across many keys. The bit length of Q must be a multiple of 8.\n</p>\n\n",name:"Parameters","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:PrivateKey!\">PrivateKey</a></h2>\n<pre>type PrivateKey struct {\n\tPublicKey\n\tX *big.Int\n}</pre>\n<p>\nPrivateKey represents a DSA private key.\n</p>\n\n",name:"PrivateKey","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:PublicKey!\">PublicKey</a></h2>\n<pre>type PublicKey struct {\n\tParameters\n\tY *big.Int\n}</pre>\n<p>\nPublicKey represents a DSA public key.\n</p>\n\n",name:"PublicKey","methods":[]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:GenerateKey!\">GenerateKey</a></h2>\n<code>func GenerateKey(priv *PrivateKey, rand io.Reader) os.Error</code>\n<p>\nGenerateKey generates a public&amp;private key pair. The Parameters of the\nPrivateKey must already be valid (see GenerateParameters).\n</p>\n\n",name:"GenerateKey"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:GenerateParameters!\">GenerateParameters</a></h2>\n<code>func GenerateParameters(params *Parameters, rand io.Reader, sizes ParameterSizes) (err os.Error)</code>\n<p>\nGenerateParameters puts a random, valid set of DSA parameters into params.\nThis function takes many seconds, even on fast machines.\n</p>\n\n",name:"GenerateParameters"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Sign!\">Sign</a></h2>\n<code>func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err os.Error)</code>\n<p>\nSign signs an arbitrary length hash (which should be the result of hashing a\nlarger message) using the private key, priv. It returns the signature as a\npair of integers. The security of the private key depends on the entropy of\nrand.\n</p>\n\n",name:"Sign"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Verify!\">Verify</a></h2>\n<code>func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool</code>\n<p>\nVerify verifies the signature in r, s of hash using the public key, pub. It\nreturns true iff the signature is valid.\n</p>\n\n",name:"Verify"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:ParameterSizes!\">ParameterSizes</a></h2>\n<pre>const (\n\tL1024N160 ParameterSizes = iota\n\tL2048N224\n\tL2048N256\n\tL3072N256\n)</pre>\n\n",names:["L1024N160","L2048N224","L2048N256","L3072N256"],type:"ParameterSizes"}],vars:[{html:"\n<h2><a class=\"black\" href=\"?v:\">var</a> <a href=\"?v:InvalidPublicKeyError!\">InvalidPublicKeyError</a></h2>\n<pre>var InvalidPublicKeyError = invalidPublicKeyError(0)</pre>\n<p>\nInvalidPublicKeyError results when a public key is not usable by this code.\nFIPS is quite strict about the format of DSA keys, but other code may be\nless so. Thus, when using keys which may have been generated by other code,\nthis error must be handled.\n</p>\n\n",names:["InvalidPublicKeyError"],type:""}]}