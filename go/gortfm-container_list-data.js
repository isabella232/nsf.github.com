var gortfmData = {index:"index.html",html:"<p>\nThe list package implements a doubly linked list.\n</p>\n<p>\nTo iterate over a list (where l is a *List):\n</p>\n<pre>for e := l.Front(); e != nil; e = e.Next() {\n\t// do something with e.Value\n}\n</pre>\n",name:"list",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Element!\">Element</a></h2>\n<pre>type Element struct {\n\n\t// The contents of this list element.\n\tValue interface{}\n\t// contains unexported fields\n}</pre>\n<p>\nElement is an element in the linked list.\n</p>\n\n",name:"Element","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Element\">func (*Element)</a> <a href=\"?m:Element.Next!\">Next</a></h2>\n<code>func (e *Element) Next() *Element</code>\n<p>\nNext returns the next list element or nil.\n</p>\n\n",name:"Next"},{html:"\n<h2><a class=\"black\" href=\"?m:Element\">func (*Element)</a> <a href=\"?m:Element.Prev!\">Prev</a></h2>\n<code>func (e *Element) Prev() *Element</code>\n<p>\nPrev returns the previous list element or nil.\n</p>\n\n",name:"Prev"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:List!\">List</a></h2>\n<pre>type List struct {\n\t// contains unexported fields\n}</pre>\n<p>\nList represents a doubly linked list.\nThe zero value for List is an empty list ready to use.\n</p>\n\n",name:"List","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.Back!\">Back</a></h2>\n<code>func (l *List) Back() *Element</code>\n<p>\nBack returns the last element in the list.\n</p>\n\n",name:"Back"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.Front!\">Front</a></h2>\n<code>func (l *List) Front() *Element</code>\n<p>\nFront returns the first element in the list.\n</p>\n\n",name:"Front"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.Init!\">Init</a></h2>\n<code>func (l *List) Init() *List</code>\n<p>\nInit initializes or clears a List.\n</p>\n\n",name:"Init"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.InsertAfter!\">InsertAfter</a></h2>\n<code>func (l *List) InsertAfter(value interface{}, mark *Element) *Element</code>\n<p>\nInsertAfter inserts the value immediately after mark and returns a new Element containing the value.\n</p>\n\n",name:"InsertAfter"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.InsertBefore!\">InsertBefore</a></h2>\n<code>func (l *List) InsertBefore(value interface{}, mark *Element) *Element</code>\n<p>\nInsertBefore inserts the value immediately before mark and returns a new Element containing the value.\n</p>\n\n",name:"InsertBefore"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.Len!\">Len</a></h2>\n<code>func (l *List) Len() int</code>\n<p>\nLen returns the number of elements in the list.\n</p>\n\n",name:"Len"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.MoveToBack!\">MoveToBack</a></h2>\n<code>func (l *List) MoveToBack(e *Element)</code>\n<p>\nMoveToBack moves the element to the back of the list.\n</p>\n\n",name:"MoveToBack"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.MoveToFront!\">MoveToFront</a></h2>\n<code>func (l *List) MoveToFront(e *Element)</code>\n<p>\nMoveToFront moves the element to the front of the list.\n</p>\n\n",name:"MoveToFront"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.PushBack!\">PushBack</a></h2>\n<code>func (l *List) PushBack(value interface{}) *Element</code>\n<p>\nPushBack inserts the value at the back of the list and returns a new Element containing the value.\n</p>\n\n",name:"PushBack"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.PushBackList!\">PushBackList</a></h2>\n<code>func (l *List) PushBackList(ol *List)</code>\n<p>\nPushBackList inserts each element of ol at the back of the list.\n</p>\n\n",name:"PushBackList"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.PushFront!\">PushFront</a></h2>\n<code>func (l *List) PushFront(value interface{}) *Element</code>\n<p>\nPushFront inserts the value at the front of the list and returns a new Element containing the value.\n</p>\n\n",name:"PushFront"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.PushFrontList!\">PushFrontList</a></h2>\n<code>func (l *List) PushFrontList(ol *List)</code>\n<p>\nPushFrontList inserts each element of ol at the front of the list. The ordering of the passed list is preserved.\n</p>\n\n",name:"PushFrontList"},{html:"\n<h2><a class=\"black\" href=\"?m:List\">func (*List)</a> <a href=\"?m:List.Remove!\">Remove</a></h2>\n<code>func (l *List) Remove(e *Element)</code>\n<p>\nRemove removes the element from the list.\n</p>\n\n",name:"Remove"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:New!\">New</a></h2>\n<code>func New() *List</code>\n<p>\nNew returns an initialized list.\n</p>\n\n",name:"New"}],consts:[],vars:[]}