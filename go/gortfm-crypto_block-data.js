var gortfmData = {index:"index.html",html:"<p>\nThe block package is deprecated, use cipher instead.\nThe block package implements standard block cipher modes\nthat can be wrapped around low-level block cipher implementations.\nSee <a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html\">http://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html</a>\nand NIST Special Publication 800-38A.\n</p>\n",name:"block",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Cipher!\">Cipher</a></h2>\n<pre>type Cipher interface {\n\t// BlockSize returns the cipher&#39;s block size.\n\tBlockSize() int\n\n\t// Encrypt encrypts the first block in src into dst.\n\t// Src and dst may point at the same memory.\n\tEncrypt(dst, src []byte)\n\n\t// Decrypt decrypts the first block in src into dst.\n\t// Src and dst may point at the same memory.\n\tDecrypt(dst, src []byte)\n}</pre>\n<p>\nA Cipher represents an implementation of block cipher\nusing a given key.  It provides the capability to encrypt\nor decrypt individual blocks.  The mode implementations\nextend that capability to streams of blocks.\n</p>\n\n",name:"Cipher","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:EAXTagError!\">EAXTagError</a></h2>\n<pre>type EAXTagError struct {\n\tRead     []byte\n\tComputed []byte\n}</pre>\n<p>\nAn EAXTagError is returned when the message has failed to authenticate,\nbecause the tag at the end of the message stream (Read) does not match\nthe tag computed from the message itself (Computed).\n</p>\n\n",name:"EAXTagError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:EAXTagError\">func (*EAXTagError)</a> <a href=\"?m:EAXTagError.String!\">String</a></h2>\n<code>func (e *EAXTagError) String() string</code>\n\n",name:"String"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCBCDecrypter!\">NewCBCDecrypter</a></h2>\n<code>func NewCBCDecrypter(c Cipher, iv []byte, r io.Reader) io.Reader</code>\n<p>\nNewCBCDecrypter returns a reader that reads data from r and decrypts it using c\nin cipher block chaining (CBC) mode with the initialization vector iv.\nThe returned Reader does not buffer or read ahead except\nas required by the cipher&#39;s block size.\n</p>\n\n",name:"NewCBCDecrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCBCEncrypter!\">NewCBCEncrypter</a></h2>\n<code>func NewCBCEncrypter(c Cipher, iv []byte, w io.Writer) io.Writer</code>\n<p>\nNewCBCEncrypter returns a writer that encrypts data using c\nin cipher block chaining (CBC) mode with the initialization vector iv\nand writes the encrypted data to w.\nThe returned Writer does no buffering except as required\nby the cipher&#39;s block size, so there is no need for a Flush method.\n</p>\n\n",name:"NewCBCEncrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCFBDecrypter!\">NewCFBDecrypter</a></h2>\n<code>func NewCFBDecrypter(c Cipher, s int, iv []byte, r io.Reader) io.Reader</code>\n<p>\nNewCFBDecrypter returns a reader that reads data from r and decrypts it using c\nin s-bit cipher feedback (CFB) mode with the initialization vector iv.\nThe returned Reader does not buffer or read ahead except\nas required by the cipher&#39;s block size.\nModes for s not a multiple of 8 are unimplemented.\n</p>\n\n",name:"NewCFBDecrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCFBEncrypter!\">NewCFBEncrypter</a></h2>\n<code>func NewCFBEncrypter(c Cipher, s int, iv []byte, w io.Writer) io.Writer</code>\n<p>\nNewCFBEncrypter returns a writer that encrypts data using c\nin s-bit cipher feedback (CFB) mode with the initialization vector iv\nand writes the encrypted data to w.\nThe returned Writer does no buffering except as required\nby the cipher&#39;s block size, so there is no need for a Flush method.\nModes for s not a multiple of 8 are unimplemented.\n</p>\n\n",name:"NewCFBEncrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCMAC!\">NewCMAC</a></h2>\n<code>func NewCMAC(c Cipher) hash.Hash</code>\n<p>\nNewCMAC returns a new instance of a CMAC message authentication code\ndigest using the given Cipher.\n</p>\n\n",name:"NewCMAC"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCTRReader!\">NewCTRReader</a></h2>\n<code>func NewCTRReader(c Cipher, iv []byte, r io.Reader) io.Reader</code>\n<p>\nNewCTRReader returns a reader that reads data from r, decrypts (or encrypts)\nit using c in counter (CTR) mode with the initialization vector iv.\nThe returned Reader does not buffer and has no block size.\nIn CTR mode, encryption and decryption are the same operation:\na CTR reader applied to an encrypted stream produces a decrypted\nstream and vice versa.\n</p>\n\n",name:"NewCTRReader"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCTRWriter!\">NewCTRWriter</a></h2>\n<code>func NewCTRWriter(c Cipher, iv []byte, w io.Writer) io.Writer</code>\n<p>\nNewCTRWriter returns a writer that encrypts (or decrypts) data using c\nin counter (CTR) mode with the initialization vector iv\nand writes the encrypted data to w.\nThe returned Writer does not buffer and has no block size.\nIn CTR mode, encryption and decryption are the same operation:\na CTR writer applied to an decrypted stream produces an encrypted\nstream and vice versa.\n</p>\n\n",name:"NewCTRWriter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEAXDecrypter!\">NewEAXDecrypter</a></h2>\n<code>func NewEAXDecrypter(c Cipher, iv []byte, hdr []byte, tagBytes int, r io.Reader) io.Reader</code>\n<p>\nNewEAXDecrypter creates and returns a new EAX decrypter\nusing the given cipher c, initialization vector iv, associated data hdr,\nand tag length tagBytes.  The encrypter&#39;s Read method decrypts and\nreturns data read from r.  At r&#39;s EOF, the encrypter checks the final\nauthenticating tag and returns an EAXTagError if the tag is invalid.\nIn that case, the message should be discarded.\nNote that the data stream returned from Read cannot be\nassumed to be valid, authenticated data until Read returns\n0, nil to signal the end of the data.\n</p>\n\n",name:"NewEAXDecrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewEAXEncrypter!\">NewEAXEncrypter</a></h2>\n<code>func NewEAXEncrypter(c Cipher, iv []byte, hdr []byte, tagBytes int, w io.Writer) io.WriteCloser</code>\n<p>\nNewEAXEncrypter creates and returns a new EAX encrypter\nusing the given cipher c, initialization vector iv, associated data hdr,\nand tag length tagBytes.  The encrypter&#39;s Write method encrypts\nthe data it receives and writes that data to w.\nThe encrypter&#39;s Close method writes a final authenticating tag to w.\n</p>\n\n",name:"NewEAXEncrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewECBDecrypter!\">NewECBDecrypter</a></h2>\n<code>func NewECBDecrypter(c Cipher, r io.Reader) io.Reader</code>\n<p>\nNewECBDecrypter returns a reader that reads data from r and decrypts it using c.\nIt decrypts by calling c.Decrypt on each block in sequence;\nthis mode is known as electronic codebook mode, or ECB.\nThe returned Reader does not buffer or read ahead except\nas required by the cipher&#39;s block size.\n</p>\n\n",name:"NewECBDecrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewECBEncrypter!\">NewECBEncrypter</a></h2>\n<code>func NewECBEncrypter(c Cipher, w io.Writer) io.Writer</code>\n<p>\nNewECBEncrypter returns a writer that encrypts data using c and writes it to w.\nIt encrypts by calling c.Encrypt on each block in sequence;\nthis mode is known as electronic codebook mode, or ECB.\nThe returned Writer does no buffering except as required\nby the cipher&#39;s block size, so there is no need for a Flush method.\n</p>\n\n",name:"NewECBEncrypter"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewOFBReader!\">NewOFBReader</a></h2>\n<code>func NewOFBReader(c Cipher, iv []byte, r io.Reader) io.Reader</code>\n<p>\nNewOFBReader returns a reader that reads data from r, decrypts (or encrypts)\nit using c in output feedback (OFB) mode with the initialization vector iv.\nThe returned Reader does not buffer and has no block size.\nIn OFB mode, encryption and decryption are the same operation:\nan OFB reader applied to an encrypted stream produces a decrypted\nstream and vice versa.\n</p>\n\n",name:"NewOFBReader"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewOFBWriter!\">NewOFBWriter</a></h2>\n<code>func NewOFBWriter(c Cipher, iv []byte, w io.Writer) io.Writer</code>\n<p>\nNewOFBWriter returns a writer that encrypts (or decrypts) data using c\nin cipher feedback (OFB) mode with the initialization vector iv\nand writes the encrypted data to w.\nThe returned Writer does not buffer and has no block size.\nIn OFB mode, encryption and decryption are the same operation:\nan OFB writer applied to an decrypted stream produces an encrypted\nstream and vice versa.\n</p>\n\n",name:"NewOFBWriter"}],consts:[],vars:[]}