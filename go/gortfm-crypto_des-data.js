var gortfmData = {index:"index.html",html:"<p>\nPackage des implements the Data Encryption Standard (DES) and the\nTriple Data Encryption Algorithm (TDEA) as defined\nin U.S. Federal Information Processing Standards Publication 46-3.\n</p>\n",name:"des",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Cipher!\">Cipher</a></h2>\n<pre>type Cipher struct {\n\t// contains unexported fields\n}</pre>\n<p>\nCipher is an instance of DES encryption.\n</p>\n\n",name:"Cipher","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Cipher\">func (*Cipher)</a> <a href=\"?m:Cipher.BlockSize!\">BlockSize</a></h2>\n<code>func (c *Cipher) BlockSize() int</code>\n<p>\nBlockSize returns the DES block size, 8 bytes.\n</p>\n\n",name:"BlockSize"},{html:"\n<h2><a class=\"black\" href=\"?m:Cipher\">func (*Cipher)</a> <a href=\"?m:Cipher.Decrypt!\">Decrypt</a></h2>\n<code>func (c *Cipher) Decrypt(dst, src []byte)</code>\n<p>\nDecrypts the 8-byte buffer src and stores the result in dst.\n</p>\n\n",name:"Decrypt"},{html:"\n<h2><a class=\"black\" href=\"?m:Cipher\">func (*Cipher)</a> <a href=\"?m:Cipher.Encrypt!\">Encrypt</a></h2>\n<code>func (c *Cipher) Encrypt(dst, src []byte)</code>\n<p>\nEncrypts the 8-byte buffer src and stores the result in dst.\nNote that for amounts of data larger than a block,\nit is not safe to just call Encrypt on successive blocks;\ninstead, use an encryption mode like CBC (see crypto/cipher/cbc.go).\n</p>\n\n",name:"Encrypt"},{html:"\n<h2><a class=\"black\" href=\"?m:Cipher\">func (*Cipher)</a> <a href=\"?m:Cipher.Reset!\">Reset</a></h2>\n<code>func (c *Cipher) Reset()</code>\n<p>\nReset zeros the key data, so that it will no longer\nappear in the process&#39;s memory.\n</p>\n\n",name:"Reset"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:KeySizeError!\">KeySizeError</a></h2>\n<pre>type KeySizeError int</pre>\n\n",name:"KeySizeError","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:KeySizeError\">func (KeySizeError)</a> <a href=\"?m:KeySizeError.String!\">String</a></h2>\n<code>func (k KeySizeError) String() string</code>\n\n",name:"String"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:TripleDESCipher!\">TripleDESCipher</a></h2>\n<pre>type TripleDESCipher struct {\n\t// contains unexported fields\n}</pre>\n<p>\nA TripleDESCipher is an instance of TripleDES encryption.\n</p>\n\n",name:"TripleDESCipher","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:TripleDESCipher\">func (*TripleDESCipher)</a> <a href=\"?m:TripleDESCipher.BlockSize!\">BlockSize</a></h2>\n<code>func (c *TripleDESCipher) BlockSize() int</code>\n<p>\nBlockSize returns the TripleDES block size, 8 bytes.\nIt is necessary to satisfy the Block interface in the\npackage &#34;crypto/cipher&#34;.\n</p>\n\n",name:"BlockSize"},{html:"\n<h2><a class=\"black\" href=\"?m:TripleDESCipher\">func (*TripleDESCipher)</a> <a href=\"?m:TripleDESCipher.Decrypt!\">Decrypt</a></h2>\n<code>func (c *TripleDESCipher) Decrypt(dst, src []byte)</code>\n<p>\nDecrypts the 8-byte buffer src and stores the result in dst.\n</p>\n\n",name:"Decrypt"},{html:"\n<h2><a class=\"black\" href=\"?m:TripleDESCipher\">func (*TripleDESCipher)</a> <a href=\"?m:TripleDESCipher.Encrypt!\">Encrypt</a></h2>\n<code>func (c *TripleDESCipher) Encrypt(dst, src []byte)</code>\n<p>\nEncrypts the 8-byte buffer src and stores the result in dst.\nNote that for amounts of data larger than a block,\nit is not safe to just call Encrypt on successive blocks;\ninstead, use an encryption mode like CBC (see crypto/cipher/cbc.go).\n</p>\n\n",name:"Encrypt"},{html:"\n<h2><a class=\"black\" href=\"?m:TripleDESCipher\">func (*TripleDESCipher)</a> <a href=\"?m:TripleDESCipher.Reset!\">Reset</a></h2>\n<code>func (c *TripleDESCipher) Reset()</code>\n<p>\nReset zeros the key data, so that it will no longer\nappear in the process&#39;s memory.\n</p>\n\n",name:"Reset"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewCipher!\">NewCipher</a></h2>\n<code>func NewCipher(key []byte) (*Cipher, os.Error)</code>\n<p>\nNewCipher creates and returns a new Cipher.\n</p>\n\n",name:"NewCipher"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewTripleDESCipher!\">NewTripleDESCipher</a></h2>\n<code>func NewTripleDESCipher(key []byte) (*TripleDESCipher, os.Error)</code>\n<p>\nNewCipher creates and returns a new Cipher.\n</p>\n\n",name:"NewTripleDESCipher"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:BlockSize!\">BlockSize</a></h2>\n<pre>const BlockSize = 8</pre>\n<p>\nThe DES block size in bytes.\n</p>\n\n",names:["BlockSize"],type:""}],vars:[]}