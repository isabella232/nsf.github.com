var gortfmData = {index:"index.html",html:"<p>\nPackage multipart implements MIME multipart parsing, as defined in RFC\n2046.\n</p>\n<p>\nThe implementation is sufficient for HTTP (RFC 2388) and the multipart\nbodies generated by popular browsers.\n</p>\n",name:"multipart",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Part!\">Part</a></h2>\n<pre>type Part struct {\n\t// The headers of the body, if any, with the keys canonicalized\n\t// in the same fashion that the Go http.Request headers are.\n\t// i.e. &#34;foo-bar&#34; changes case to &#34;Foo-Bar&#34;\n\tHeader textproto.MIMEHeader\n\t// contains unexported fields\n}</pre>\n<p>\nA Part represents a single part in a multipart body.\n</p>\n\n",name:"Part","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Part\">func (*Part)</a> <a href=\"?m:Part.Close!\">Close</a></h2>\n<code>func (bp *Part) Close() os.Error</code>\n\n",name:"Close"},{html:"\n<h2><a class=\"black\" href=\"?m:Part\">func (*Part)</a> <a href=\"?m:Part.FormName!\">FormName</a></h2>\n<code>func (p *Part) FormName() string</code>\n<p>\nFormName returns the name parameter if p has a Content-Disposition\nof type &#34;form-data&#34;.  Otherwise it returns the empty string.\n</p>\n\n",name:"FormName"},{html:"\n<h2><a class=\"black\" href=\"?m:Part\">func (*Part)</a> <a href=\"?m:Part.Read!\">Read</a></h2>\n<code>func (bp *Part) Read(p []byte) (n int, err os.Error)</code>\n<p>\nRead reads the body of a part, after its headers and before the\nnext part (if any) begins.\n</p>\n\n",name:"Read"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Reader!\">Reader</a></h2>\n<pre>type Reader interface {\n\t// NextPart returns the next part in the multipart, or (nil,\n\t// nil) on EOF.  An error is returned if the underlying reader\n\t// reports errors, or on truncated or otherwise malformed\n\t// input.\n\tNextPart() (*Part, os.Error)\n}</pre>\n<p>\nReader is an iterator over parts in a MIME multipart body.\nReader&#39;s underlying parser consumes its input as needed.  Seeking\nisn&#39;t supported.\n</p>\n\n",name:"Reader","methods":[]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewReader!\">NewReader</a></h2>\n<code>func NewReader(reader io.Reader, boundary string) Reader</code>\n<p>\nNewReader creates a new multipart Reader reading from r using the\ngiven MIME boundary.\n</p>\n\n",name:"NewReader"}],consts:[],vars:[]}