var gortfmData = {index:"index.html",html:"<p>\nPackage printer implements printing of AST nodes.\n</p>\n",name:"printer",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Config!\">Config</a></h2>\n<pre>type Config struct {\n\tMode     uint // default: 0\n\tTabwidth int  // default: 8\n}</pre>\n<p>\nA Config node controls the output of Fprint.\n</p>\n\n",name:"Config","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Config\">func (*Config)</a> <a href=\"?m:Config.Fprint!\">Fprint</a></h2>\n<code>func (cfg *Config) Fprint(output io.Writer, fset *token.FileSet, node interface{}) (int, os.Error)</code>\n<p>\nFprint &#34;pretty-prints&#34; an AST node to output and returns the number\nof bytes written and an error (if any) for a given configuration cfg.\nPosition information is interpreted relative to the file set fset.\nThe node type must be *ast.File, or assignment-compatible to ast.Expr,\nast.Decl, ast.Spec, or ast.Stmt.\n</p>\n\n",name:"Fprint"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Fprint!\">Fprint</a></h2>\n<code>func Fprint(output io.Writer, fset *token.FileSet, node interface{}) os.Error</code>\n<p>\nFprint &#34;pretty-prints&#34; an AST node to output.\nIt calls Config.Fprint with default settings.\n</p>\n\n",name:"Fprint"}],consts:[{html:"\n<h2><a class=\"black\" href=\"?c:\">const</a> <a href=\"?c:RawFormat!\"><em>group</em></a></h2>\n<pre>const (\n\tRawFormat uint = 1 &lt;&lt; iota // do not use a tabwriter; if set, UseSpaces is ignored\n\tTabIndent                  // use tabs for indentation independent of UseSpaces\n\tUseSpaces                  // use spaces instead of tabs for alignment\n)</pre>\n<p>\nGeneral printing is controlled with these Config.Mode flags.\n</p>\n\n",names:["RawFormat","TabIndent","UseSpaces"],type:""}],vars:[]}