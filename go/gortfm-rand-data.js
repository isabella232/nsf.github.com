var gortfmData = {index:"index.html",html:"<p>\nPackage rand implements pseudo-random number generators.\n</p>\n",name:"rand",types:[{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Rand!\">Rand</a></h2>\n<pre>type Rand struct {\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nA Rand is a source of random numbers.\n</p>\n\n",name:"Rand","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.ExpFloat64!\">ExpFloat64</a></h2>\n<code>func (r *Rand) ExpFloat64() float64</code>\n<p>\nExpFloat64 returns an exponentially distributed float64 in the range\n(0, +math.MaxFloat64] with an exponential distribution whose rate parameter\n(lambda) is 1 and whose mean is 1/lambda (1).\nTo produce a distribution with a different rate parameter,\ncallers can adjust the output using:\n</p>\n<pre>sample = ExpFloat64() / desiredRateParameter\n</pre>\n\n",name:"ExpFloat64"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Float32!\">Float32</a></h2>\n<code>func (r *Rand) Float32() float32</code>\n<p>\nFloat32 returns, as a float32, a pseudo-random number in [0.0,1.0).\n</p>\n\n",name:"Float32"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Float64!\">Float64</a></h2>\n<code>func (r *Rand) Float64() float64</code>\n<p>\nFloat64 returns, as a float64, a pseudo-random number in [0.0,1.0).\n</p>\n\n",name:"Float64"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Int!\">Int</a></h2>\n<code>func (r *Rand) Int() int</code>\n<p>\nInt returns a non-negative pseudo-random int.\n</p>\n\n",name:"Int"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Int31!\">Int31</a></h2>\n<code>func (r *Rand) Int31() int32</code>\n<p>\nInt31 returns a non-negative pseudo-random 31-bit integer as an int32.\n</p>\n\n",name:"Int31"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Int31n!\">Int31n</a></h2>\n<code>func (r *Rand) Int31n(n int32) int32</code>\n<p>\nInt31n returns, as an int32, a non-negative pseudo-random number in [0,n).\n</p>\n\n",name:"Int31n"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Int63!\">Int63</a></h2>\n<code>func (r *Rand) Int63() int64</code>\n<p>\nInt63 returns a non-negative pseudo-random 63-bit integer as an int64.\n</p>\n\n",name:"Int63"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Int63n!\">Int63n</a></h2>\n<code>func (r *Rand) Int63n(n int64) int64</code>\n<p>\nInt63n returns, as an int64, a non-negative pseudo-random number in [0,n).\n</p>\n\n",name:"Int63n"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Intn!\">Intn</a></h2>\n<code>func (r *Rand) Intn(n int) int</code>\n<p>\nIntn returns, as an int, a non-negative pseudo-random number in [0,n).\n</p>\n\n",name:"Intn"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.NormFloat64!\">NormFloat64</a></h2>\n<code>func (r *Rand) NormFloat64() float64</code>\n<p>\nNormFloat64 returns a normally distributed float64 in the range\n[-math.MaxFloat64, +math.MaxFloat64] with\nstandard normal distribution (mean = 0, stddev = 1).\nTo produce a different normal distribution, callers can\nadjust the output using:\n</p>\n<pre>sample = NormFloat64() * desiredStdDev + desiredMean\n</pre>\n\n",name:"NormFloat64"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Perm!\">Perm</a></h2>\n<code>func (r *Rand) Perm(n int) []int</code>\n<p>\nPerm returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n).\n</p>\n\n",name:"Perm"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Seed!\">Seed</a></h2>\n<code>func (r *Rand) Seed(seed int64)</code>\n<p>\nSeed uses the provided seed value to initialize the generator to a deterministic state.\n</p>\n\n",name:"Seed"},{html:"\n<h2><a class=\"black\" href=\"?m:Rand\">func (*Rand)</a> <a href=\"?m:Rand.Uint32!\">Uint32</a></h2>\n<code>func (r *Rand) Uint32() uint32</code>\n<p>\nUint32 returns a pseudo-random 32-bit value as a uint32.\n</p>\n\n",name:"Uint32"}]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Source!\">Source</a></h2>\n<pre>type Source interface {\n\tInt63() int64\n\tSeed(seed int64)\n}</pre>\n<p>\nA Source represents a source of uniformly-distributed\npseudo-random int64 values in the range [0, 1&lt;&lt;63).\n</p>\n\n",name:"Source","methods":[]},{html:"\n<h2><a class=\"black\" href=\"?t:\">type</a> <a href=\"?t:Zipf!\">Zipf</a></h2>\n<pre>type Zipf struct {\n\t// contains filtered or unexported fields\n}</pre>\n<p>\nA Zipf generates Zipf distributed variates.\n</p>\n\n",name:"Zipf","methods":[{html:"\n<h2><a class=\"black\" href=\"?m:Zipf\">func (*Zipf)</a> <a href=\"?m:Zipf.Uint64!\">Uint64</a></h2>\n<code>func (z *Zipf) Uint64() uint64</code>\n<p>\nUint64 returns a value drawn from the Zipf distributed described\nby the Zipf object.\n</p>\n\n",name:"Uint64"}]}],funcs:[{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:ExpFloat64!\">ExpFloat64</a></h2>\n<code>func ExpFloat64() float64</code>\n<p>\nExpFloat64 returns an exponentially distributed float64 in the range\n(0, +math.MaxFloat64] with an exponential distribution whose rate parameter\n(lambda) is 1 and whose mean is 1/lambda (1).\nTo produce a distribution with a different rate parameter,\ncallers can adjust the output using:\n</p>\n<pre>sample = ExpFloat64() / desiredRateParameter\n</pre>\n\n",name:"ExpFloat64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float32!\">Float32</a></h2>\n<code>func Float32() float32</code>\n<p>\nFloat32 returns, as a float32, a pseudo-random number in [0.0,1.0).\n</p>\n\n",name:"Float32"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Float64!\">Float64</a></h2>\n<code>func Float64() float64</code>\n<p>\nFloat64 returns, as a float64, a pseudo-random number in [0.0,1.0).\n</p>\n\n",name:"Float64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int!\">Int</a></h2>\n<code>func Int() int</code>\n<p>\nInt returns a non-negative pseudo-random int.\n</p>\n\n",name:"Int"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int31!\">Int31</a></h2>\n<code>func Int31() int32</code>\n<p>\nInt31 returns a non-negative pseudo-random 31-bit integer as an int32.\n</p>\n\n",name:"Int31"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int31n!\">Int31n</a></h2>\n<code>func Int31n(n int32) int32</code>\n<p>\nInt31n returns, as an int32, a non-negative pseudo-random number in [0,n).\n</p>\n\n",name:"Int31n"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int63!\">Int63</a></h2>\n<code>func Int63() int64</code>\n<p>\nInt63 returns a non-negative pseudo-random 63-bit integer as an int64.\n</p>\n\n",name:"Int63"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Int63n!\">Int63n</a></h2>\n<code>func Int63n(n int64) int64</code>\n<p>\nInt63n returns, as an int64, a non-negative pseudo-random number in [0,n).\n</p>\n\n",name:"Int63n"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Intn!\">Intn</a></h2>\n<code>func Intn(n int) int</code>\n<p>\nIntn returns, as an int, a non-negative pseudo-random number in [0,n).\n</p>\n\n",name:"Intn"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:New!\">New</a></h2>\n<code>func New(src Source) *Rand</code>\n<p>\nNew returns a new Rand that uses random values from src\nto generate other random values.\n</p>\n\n",name:"New"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewSource!\">NewSource</a></h2>\n<code>func NewSource(seed int64) Source</code>\n<p>\nNewSource returns a new pseudo-random Source seeded with the given value.\n</p>\n\n",name:"NewSource"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NewZipf!\">NewZipf</a></h2>\n<code>func NewZipf(r *Rand, s float64, v float64, imax uint64) *Zipf</code>\n<p>\nNewZipf returns a Zipf generating variates p(k) on [0, imax]\nproportional to (v+k)**(-s) where s&gt;1 and k&gt;=0, and v&gt;=1.\n</p>\n\n",name:"NewZipf"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:NormFloat64!\">NormFloat64</a></h2>\n<code>func NormFloat64() float64</code>\n<p>\nNormFloat64 returns a normally distributed float64 in the range\n[-math.MaxFloat64, +math.MaxFloat64] with\nstandard normal distribution (mean = 0, stddev = 1).\nTo produce a different normal distribution, callers can\nadjust the output using:\n</p>\n<pre>sample = NormFloat64() * desiredStdDev + desiredMean\n</pre>\n\n",name:"NormFloat64"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Perm!\">Perm</a></h2>\n<code>func Perm(n int) []int</code>\n<p>\nPerm returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n).\n</p>\n\n",name:"Perm"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Seed!\">Seed</a></h2>\n<code>func Seed(seed int64)</code>\n<p>\nSeed uses the provided seed value to initialize the generator to a deterministic state.\n</p>\n\n",name:"Seed"},{html:"\n<h2><a class=\"black\" href=\"?f:\">func</a> <a href=\"?f:Uint32!\">Uint32</a></h2>\n<code>func Uint32() uint32</code>\n<p>\nUint32 returns a pseudo-random 32-bit value as a uint32.\n</p>\n\n",name:"Uint32"}],consts:[],vars:[]}